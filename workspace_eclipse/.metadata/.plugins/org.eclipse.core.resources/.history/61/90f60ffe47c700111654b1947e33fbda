package com.marconi.tmp.tools;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;

import com.ericsson.oss.sbiadapter.converter.StepByStepConverter;
import com.ericsson.oss.sbiadapter.converter.StepByStepConverter.TypeOfConversion;
import com.ericsson.oss.slc.ClassConvertionException;
import com.marconi.fusion.X36.X36Message;
import com.marconi.fusion.X36.X36MessageFactory;
import com.marconi.fusion.base.application.Profile;
import com.marconi.fusion.base.asn1.msg.FileMsgBerReader;
import com.marconi.fusion.base.asn1.msg.FileMsgBerWriter;
import com.marconi.fusion.base.asn1.msg.Message;
import com.marconi.fusion.base.asn1.msg.MessageFactory;
import com.marconi.fusion.base.asn1.msg.io.MessageDecoder;
import com.marconi.fusion.base.logging.DumpInfo;
import com.marconi.fusion.tmf.i36PlugIn.I36PlugIn;
import com.marconi.fusion.tmf.plugIn.adapter.support.PENPDMConverter;

public class BerConJob implements Runnable {

	private final Profile profile;
	int latestX36Index = 0;
	private StepByStepConverter stepByStepConverter;
	private String msgFactoryClsStr;
	private String berHome;
	private boolean removeOldies;

	private final File berFile;
	private final PropertyChangeSupport pcSupport;

	public BerConJob(final File berFile, final Profile profile, final Object source) {
		super();
		this.berFile = berFile;
		this.profile = profile;
		pcSupport = new PropertyChangeSupport(this);
		pcSupport.addPropertyChangeListener((PropertyChangeListener) source);

	}

	@Override
	public void run() {
		pcSupport.firePropertyChange("START", null, null);
		convert(berFile);
		pcSupport.firePropertyChange("END", null, null);
	}

	private void convert(final File berFile) {
		final String version = getVer(getBERVersion(berFile.getName()));
		boolean isLatestX36Version = true;
		final String syntaxSeperator = profile.getProperty(I36PlugIn.PluginProperty.x36SyntaxSeparator, "_");
		int currentX36Index = 0;
		if (version != null) {
			currentX36Index = Integer.parseInt(profile.getProperty("PlugIn.X36Index." + version, "0"));
		}
		if (currentX36Index != latestX36Index) {
			isLatestX36Version = false;
			stepByStepConverter = new StepByStepConverter(latestX36Index, currentX36Index, syntaxSeperator, TypeOfConversion.X36,
					profile.getProperty(PENPDMConverter.ROOT_DIR));

			// Getting the MessageFactory according to the version of X36
			// Build the message factory class string
			msgFactoryClsStr = "com.marconi.fusion.X36" + syntaxSeperator + (currentX36Index - latestX36Index)
					+ ".X36MessageFactory";
		} else {
			log("\nBER file is Latest... and skipping conversion for :" + berFile.getName());
		}

		List<X36Message<?>> x36MsgsList = new ArrayList<X36Message<?>>();
		try {
			x36MsgsList = getMessages(berFile, msgFactoryClsStr, isLatestX36Version);
		} catch (final Exception e) {
			e.printStackTrace();
		}

		log("Completed Conversion....for <" + berFile.getName() + "> and Writing to BER file");
		writeBERMessages(profile, berFile, x36MsgsList);
		log("Completed Writing BER File...for <" + berFile.getName() + ">");
		if (removeOldies) {
			log("Deleting old BER File..");
			berFile.delete();
			log("Deleted old BER File..");
		}
	}

	public String getLatestVersion() {
		if (profile != null) {
			return profile.getProperty("Plugin.ASN.X36Version");
		} else {
			return "";
		}
	}

	private FileMsgBerWriter<X36Message<?>> getFileMsgBerWriter(final String fileName) {
		FileMsgBerWriter<X36Message<?>> writer = null;
		if (berHome != null) {
			File file = new File(berHome);
			file.mkdirs();
			final String meNm = getFileNametoWrite(fileName);
			file = new File(file.getPath() + File.separator + meNm);
			try {
				writer = new FileMsgBerWriter<X36Message<?>>(file, false);
			} catch (final FileNotFoundException e) {
				log(String.format("Unable to write BER: file <%s> not found.", file.getName()));
			}
		}
		return writer;
	}

	private String getFileNametoWrite(final String oldFileName) {
		String newFileName = oldFileName;

		String version = getBERVersion(oldFileName);
		version = version.replace(".", "_");
		final int ind = oldFileName.lastIndexOf(version);
		if (ind != -1) {
			newFileName = oldFileName.substring(0, ind);
			newFileName += getLatestVersion().replace(".", "_") + ".ber";
		}

		log(oldFileName + " <-> " + newFileName);
		return newFileName;

	}

	private void writeBERMessages(final Profile profile, final File oldBerFile, final List<X36Message<?>> responseList) {
		FileMsgBerWriter<X36Message<?>> writer = null;
		try {
			writer = getFileMsgBerWriter(oldBerFile.getName());
			if (writer != null) {
				writeBER(writer, responseList);
			}
		} catch (final Exception e) {
			System.err.println(new DumpInfo(String.format("Unable to write BER messages for ", oldBerFile), e));
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (final Exception e) {
					System.err.println(new DumpInfo("unable to close Writer object ", e));
				}
			}
		}
	}

	private void writeBER(final FileMsgBerWriter<X36Message<?>> writer, final List<X36Message<?>> responseList) {
		for (final X36Message<?> message : responseList) {
			if (message == null) {
				continue;
			}
			if (writer != null) {
				try {
					writer.writeBER(message);
				} catch (final Exception e) {
					log(new DumpInfo("Unable to write messages in BER file", e));
				}
			}
		}
	}

	public List<X36Message<?>> getMessages(final File filename, final String msgFactoryClsStr, final boolean isLatestX36Version)
			throws Exception {

		// log("Ready to read X36Messages from the BER files");

		final List<X36Message<?>> x36MsgList = new ArrayList<X36Message<?>>();
		MessageFactory<Message<?>> msgFactory = null;
		Constructor<?> berFileReaderConstructor = null;
		Object msgFactoryObj = null;

		try {
			if (msgFactoryClsStr != null && !isLatestX36Version) {

				// Load the message factory class
				final Class<?> msgFactoryClass = Class.forName(msgFactoryClsStr);

				// Create an instance of X36MessageFactory
				msgFactoryObj = msgFactoryClass.newInstance();

				// Load the FileMsgBerReader class
				final Class<?> berFileReaderClass = Class.forName("com.marconi.fusion.base.asn1.msg.FileMsgBerReader");

				// Get the constructor of FileMsgBerReader
				berFileReaderConstructor = berFileReaderClass.getConstructor(File.class, MessageDecoder.class);

			} else {
				msgFactory = new X36MessageFactory();
			}
			if (filename != null) {
				processBerFile(filename, isLatestX36Version, berFileReaderConstructor, msgFactoryObj, msgFactory, x36MsgList);
			} else {
				System.err.println(new DumpInfo("Invalid BER location: "));
				throw new Exception("Invalid BER location : ");
			}
		} catch (final ClassNotFoundException e) {
			System.err.println(new DumpInfo("Unable to locate the class : " + msgFactoryClsStr, e));
			throw e;
		} catch (final InstantiationException e) {
			System.err.println(new DumpInfo("Unable to instantiate the class : " + msgFactoryClsStr, e));
			throw e;
		} catch (final FileNotFoundException e) {
			System.err.println(new DumpInfo("Unable to locate the BER file : " + filename, e));
			throw e;
		} catch (final Exception e) {
			System.err.println(new DumpInfo("Unable to read messages from BER file", e));
			throw e;
		}
		return x36MsgList;
	}

	private void processBerFile(final File berFile, final boolean isLatestX36Version,
			final Constructor<?> berFileReaderConstructor, final Object msgFactoryObj,
			final MessageFactory<Message<?>> msgFactory, final List<X36Message<?>> x36MsgList) throws Exception {

		createBerForNeId(isLatestX36Version, berFileReaderConstructor, msgFactoryObj, berFile, msgFactory, x36MsgList);
	}

	@SuppressWarnings("unchecked")
	private void createBerForNeId(final boolean isLatestX36Version, final Constructor<?> berFileReaderConstructor,
			final Object msgFactoryObj, final File berFile, final MessageFactory<Message<?>> msgFactory,
			final List<X36Message<?>> x36MsgList) throws Exception {
		FileMsgBerReader<Message<?>> berReader = null;
		Message<?> msg = null;
		if (!isLatestX36Version) {
			// Build the message decoder class string
			final String messageDecoderClassStr = "com.marconi.fusion.base.asn1.msg.io.MessageDecoder";

			// Load the message decoder class
			final Class<?> messageDecoderClass = Class.forName(messageDecoderClassStr);

			// Get the constructor
			final Constructor<?> messageDecoderConstructor = messageDecoderClass.getConstructor(MessageFactory.class);

			final Object messageDecoderObject = messageDecoderConstructor.newInstance(msgFactoryObj);

			// Create instance of FileMsgBerReader
			final Object berFileReaderObject = berFileReaderConstructor.newInstance(berFile, messageDecoderObject);
			berReader = (FileMsgBerReader<Message<?>>) berFileReaderObject;

		} else {
			berReader = new FileMsgBerReader<Message<?>>(berFile, msgFactory);
		}
		// Read X36 messages from the ber file
		while ((msg = berReader.readBER()) != null) {
			// If the version of X36 message present in the ber file is not latest, convert it to latest
			// X36
			if (stepByStepConverter != null && !isLatestX36Version) {
				try {
					System.out
					.println(String.format("Converting <%s> which is read from the BER file", msg.getClass().getName()));
					msg = (Message<?>) stepByStepConverter.convert(msg, null);
				} catch (final ClassConvertionException c) {
					log(new DumpInfo("Unable to convert the class : " + msg.getClass().getName() + " to the latest version", c));
				}
			}
			final X36Message<?> x36Msg = (X36Message<?>) msg;
			x36MsgList.add(x36Msg);
		}
		if (berReader != null) {
			berReader.close();
		}
	}

	private String getVer(final String version) {
		String ver = null;
		if (version != null) {
			version.replaceAll(".", "_");
			final int ind = version.lastIndexOf('_');
			if (ind != -1) {
				ver = version.substring(0, ind);
			}
		}
		return ver;
	}

	private String getBERVersion(final String berFile) {
		String version = null;
		if (berFile == null) {
			return version;
		}
		String name = berFile;
		try {

			int ind = name.lastIndexOf(".ber");
			if (ind != -1) {
				name = name.substring(0, ind);
				// removed extention.
				if ((name.lastIndexOf(".ber")) != -1) {
					return getBERVersion(name);
				}
				ind = name.lastIndexOf('_');
				int major = 0;
				int minor = 0;
				int sub = 0;
				try {
					if (ind != -1) {
						minor = Integer.parseInt(name.substring(ind + 1));
						name = name.substring(0, ind);
						ind = name.lastIndexOf('_');
						if (ind != -1) {
							sub = Integer.parseInt(name.substring(ind + 1));
							name = name.substring(0, ind);
							ind = name.lastIndexOf('_');
							if (ind != -1) {
								major = Integer.parseInt(name.substring(ind + 1));
							}
						}
					}
					if (major != 0 && minor != 0 && sub != 0) {
						version = major + "." + sub + "." + minor;
					}
				} catch (final Exception e) {
					major = 0;
					sub = 0;
					minor = 0;
					version = null;
				}
			}

		} catch (final Exception e) {
		}
		return version;
	}

	private void log(final Object object) {
		System.out.println(Thread.currentThread().getName() + object);
	}

	@Override
	public String toString() {
		return berFile.getName();
	}
}
