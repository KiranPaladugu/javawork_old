/**
 * Converter to process TNPs
 */
package com.marconi.fusion.tmf.i36PlugIn.converter;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.apache.commons.lang.time.StopWatch;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.marconi.fusion.base.logging.DumpInfo;
import com.marconi.fusion.tmf.db.DBFtp;
import com.marconi.fusion.tmf.db.DBIterator;
import com.marconi.fusion.tmf.db.DBPortTp;
import com.marconi.fusion.tmf.db.DBProtectionGroup;
import com.marconi.fusion.tmf.db.DBSnc;
import com.marconi.fusion.tmf.db.DBTrailNtwProtection;
import com.marconi.fusion.tmf.i36PlugIn.I36DatabaseManager;
import com.marconi.fusion.tmf.i36PlugIn.I36Naming;
import com.marconi.fusion.tmf.i36PlugIn.I36PlugIn.PluginProperty;
import com.marconi.fusion.tmf.i36PlugIn.NeHelper;
import com.marconi.fusion.tmf.i36PlugIn.protection.TNPSupport;
import com.marconi.fusion.tmf.plugIn.PlugInException;
import com.marconi.fusion.tmf.plugIn.PlugInExceptionHandler;
import com.marconi.fusion.tmf.plugIn.types.AdditionalInfo;
import com.marconi.fusion.tmf.plugIn.types.LayerRate;
import com.marconi.fusion.tmf.plugIn.types.MEDn;
import com.marconi.fusion.tmf.plugIn.types.ProtectionGroup;
import com.marconi.fusion.tmf.plugIn.types.SNCDn;
import com.marconi.fusion.tmf.plugIn.types.SNCDnList;
import com.marconi.fusion.tmf.plugIn.types.SNCDnMultipleList;
import com.marconi.fusion.tmf.plugIn.types.TPDnList;
import com.marconi.fusion.tmf.plugIn.types.TrailNtwProtection;
import com.marconi.fusion.tmf.plugIn.types.TrailNtwProtectionDn;
import com.marconi.fusion.tmf.tmfFramework.TmfNameUtilities;
import com.marconi.fusion.tmf.tmfFramework.repository.LayerRateManager;
import com.marconi.fusion.tmf.utilities.Stats;

/**
 * Processes TNPs for each MPLS PG created
 *
 * @author XSUSSIK
 *
 */
public class TNPConverter {

	private static final Log LOG = LogFactory.getLog(FDConverter.class);

	public static final String PROCESS_TNP = "Process TNP";

	protected Stats stats = new Stats();

	private NeHelper helper = null; // initialized in constructor
	private I36DatabaseManager dbManager = null; // initialized in constructor

	private Set<TrailNtwProtectionDn> oldTnpSet = new HashSet<TrailNtwProtectionDn>();

	private boolean populateWorkerProtectionTrailsInTNP = false;

	private final LayerRate mplsLayer = LayerRateManager
			.getLayerRate("LR_MPLS_TP");

	private boolean createTnpDuringRealignment = true;

	/**
	 * Constructor
	 *
	 * @param neHelper
	 */
	public TNPConverter(final NeHelper neHelper) {
		this.helper = neHelper;
		this.dbManager = this.helper.getSBIClient().getDbManager();
		populateWorkerProtectionTrailsInTNP = this.helper
				.getSBIClient()
				.getProfile()
				.getBoolProperty(
						PluginProperty.POPULATE_WORKER_PROTECTION_TRAILIN_TNP,
						false);
		createTnpDuringRealignment = this.helper
				.getSBIClient()
				.getProfile()
				.getBoolProperty(
						PluginProperty.CREATE_TNP_During_TrailPGRealignment,
						true);
	}

	public Stats process() throws PlugInException {

		if (LOG.isDebugEnabled()) {
			LOG.debug(String.format("Process TNPs on ME <%s>: start....",
					getNeLocator()));
		}

		final StopWatch watch = new StopWatch();
		watch.start();

		int processedTNPCount = 0;
		int receivedTNPCount = 0;

		if (createTnpDuringRealignment) {
			try {
				final MEDn meDn = helper.getMEDn();
				final DBIterator<DBProtectionGroup> dbPGsItr = dbManager.getManagedElement(meDn).getProtectionGroups()
						.iterator();
				try {
					while (dbPGsItr.hasNext()) {
						final DBProtectionGroup dbPG = dbPGsItr.next();
						if (!dbPG.getRate().equals(mplsLayer)) {
							continue;
						} else if (processTNP(null, dbPG, null) != null) {
							processedTNPCount++;
						}
						receivedTNPCount++;
					}
				} finally {
					dbPGsItr.close();
				}
				// deleting the old TNPs
				discardOldTNPs();
			} catch (final Exception e) {
				throw PlugInExceptionHandler.internalError(String.format("Unable to process TNPs on ME <%s>.",
						getNeLocator()) + "\nReason: " + e.getMessage());
			} finally {
				watch.stop();
			}
		} else {
			LOG.debug("Property CreateTNPDuringTrailPGRealignment is false. So not realigning any TNPs");
		}

		if (LOG.isDebugEnabled()) {
			LOG.debug(String.format(
					"Process <%d/%d> TNPs on ME <%s>: done in <%s>",
					processedTNPCount, receivedTNPCount, getNeLocator(),
					watch.toString()));
		}
		return stats;
	}

	/**
	 * This method processes, creates an FD and stores the DBFlowDomain object
	 * in DB. The created FD is associated to MFD
	 * 
	 * @param tnpName
	 * 
	 * @param mfdId
	 * @return
	 * 
	 */
	public DBTrailNtwProtection processTNP(final TrailNtwProtectionDn tnpName,
			final DBProtectionGroup aEndPG, final DBProtectionGroup zEndPG)
					throws Exception {

		stats.start(PROCESS_TNP);

		if (LOG.isDebugEnabled()) {
			LOG.debug(String.format(
					"Process TNP associated to PG <%s> on ME <%s>",
					TmfNameUtilities.toString(aEndPG.getDn()),
					getNeLocator()));
		}

		try {

			final ProtectionGroup protectionGroupA = aEndPG.getInformation();

			ProtectionGroup protectionGroupZ = null;

			if (zEndPG != null) {
				protectionGroupZ = zEndPG.getInformation();
			}

			final TrailNtwProtection trailNtwProtection = new TrailNtwProtection();

			final SNCDn protectionLspSncDn = getTrailSnc(aEndPG);

			if (protectionLspSncDn == null) {
				LOG.error(String
						.format("Couldn't find LSP Snc for PG <%s>. Can't determine the name",
								TmfNameUtilities.toString(aEndPG
										.getDn())));
				return null;
			}

//			trailNtwProtection.setName(getNaming()
//					.makeTNPDn(protectionLspSncDn));

			final String tnpType = (zEndPG == null) ? "Open" : "Closed";

			trailNtwProtection.setNativeEMSName(trailNtwProtection.getName()
					.getTNP().getValue()
					+ "/" + tnpType);

			trailNtwProtection.setUserLabel("");

			trailNtwProtection.setOwner("");

			trailNtwProtection.setProtectionGroupType(protectionGroupA
					.getProtectionGroupType());

			trailNtwProtection.setProtectionSchemeState(protectionGroupA
					.getProtectionSchemeState());

			trailNtwProtection.setReversionMode(protectionGroupA
					.getReversionMode());

			trailNtwProtection.setRate(protectionGroupA.getRate());

			trailNtwProtection.setTrailNtwProtectionType(tnpType);

			trailNtwProtection.setProtectionGroupAName(protectionGroupA
					.getName());

			if (protectionGroupZ != null) {
				trailNtwProtection.setProtectionGroupZName(protectionGroupZ.getName());
			}

			trailNtwProtection.setPgATPList(protectionGroupA.getPgpTPList());

			if (protectionGroupZ != null) {
				trailNtwProtection.setPgZTPList(protectionGroupZ.getPgpTPList());
			} else {
				trailNtwProtection.setPgZTPList(new TPDnList());
			}

			if (populateWorkerProtectionTrailsInTNP) {

				final SNCDnMultipleList workerTrailList = new SNCDnMultipleList();

				final SNCDnList aWorkerTrailList = getWorkerTrailSnc(aEndPG);

				if (aWorkerTrailList == null) {
					LOG.error(String
							.format("Could not retrieve worker trail list for TNP <%s> using aEnd PG <%s>",
									TmfNameUtilities
									.toString(trailNtwProtection
											.getName()),
											TmfNameUtilities.toString(aEndPG
													.getDn())));
				} else {
					workerTrailList.add(aWorkerTrailList);
				}

				if (zEndPG != null) {
					final SNCDnList zWorkerTrailList = getWorkerTrailSnc(zEndPG);

					if (zWorkerTrailList == null) {
						LOG.error(String.format("Could not retrieve worker trail list for TNP <%s> using zEnd PG <%s>",
								TmfNameUtilities.toString(trailNtwProtection.getName()),
								TmfNameUtilities.toString(zEndPG.getDn())));
					} else {
						workerTrailList.add(zWorkerTrailList);
					}
				}

				trailNtwProtection.setWorkerTrailList(workerTrailList);

				final SNCDnList protectionTrailList = new SNCDnList();

				final SNCDnList aProtectionTrailList = getProtectionTrailSnc(aEndPG);

				if (aProtectionTrailList == null) {
					LOG.error(String
							.format("Could not retrieve protection trail list for TNP <%s> using aEnd PG <%s>",
									TmfNameUtilities
									.toString(trailNtwProtection
											.getName()),
											TmfNameUtilities.toString(aEndPG
													.getDn())));
				} else {
					protectionTrailList.addAll(aProtectionTrailList);
				}

				if (zEndPG != null) {

					final SNCDnList zProtectionTrailList = getProtectionTrailSnc(zEndPG);

					if (zProtectionTrailList == null) {
						LOG.error(String.format(
								"Could not retrieve protection trail list for TNP <%s> using zEnd PG <%s>",
								TmfNameUtilities.toString(trailNtwProtection.getName()),
								TmfNameUtilities.toString(zEndPG.getDn())));
					} else {
						protectionTrailList.addAll(zProtectionTrailList);
					}
				}

				trailNtwProtection.setProtectionTrail(protectionTrailList);

			} else {
				trailNtwProtection.setWorkerTrailList(new SNCDnMultipleList());
				trailNtwProtection.setProtectionTrail(new SNCDnList());
			}

			trailNtwProtection.setTnpParameters(protectionGroupA
					.getPgpParameters());

			trailNtwProtection.setApsFunction("MPLS-TP");

			trailNtwProtection.setNetworkAccessDomain("");

			final AdditionalInfo addInfo = new AdditionalInfo();

			trailNtwProtection.setAdditionalInfo(addInfo);

			return createOrUpdateTNP(tnpName, trailNtwProtection);

		} catch (final Exception e) {
			LOG.error(new DumpInfo(String.format(
					"Error processing TNP associated to PG <%s> on ME <%s>",
					TmfNameUtilities.toString(aEndPG.getDn()),
					getNeLocator()), e));
			throw e;
		} finally {
			stats.end(PROCESS_TNP);
		}
	}

	/**
	 * This method creates/updates the DBFlowDomain object in DB
	 * 
	 * @param tnpName
	 * 
	 * @param info
	 * @return
	 */
	private DBTrailNtwProtection createOrUpdateTNP(
			final TrailNtwProtectionDn tnpName, final TrailNtwProtection info) {

		DBTrailNtwProtection dbTNP = dbManager.getObject(
				DBTrailNtwProtection.class,
				tnpName != null ? tnpName : info.getName());

		if (dbTNP == null) {
			dbTNP = dbManager.createObject(DBTrailNtwProtection.class, info);
		} else {
			dbManager.update(dbTNP, info, true);
		}

		oldTnpSet.remove(dbTNP.getDn());

		return dbTNP;
	}

	/**
	 * This method discards the FDs not managed anymore from DB.
	 */
	private void discardOldTNPs() throws Exception {
		if (LOG.isDebugEnabled()) {
			LOG.debug(String.format("Discarding unmanaged TNPs on ME <%s>.", getNeLocator()));
		}


		try {
			final Iterator<TrailNtwProtectionDn> itr = oldTnpSet.iterator();


			while (itr.hasNext()) {
				final TrailNtwProtectionDn tpnDn = itr.next();
				final DBTrailNtwProtection discardableTNP = dbManager.getObject(DBTrailNtwProtection.class, tpnDn);
				if (discardableTNP != null
						&& discardableTNP.getInformation()
						.getTrailNtwProtectionType().getValue()
						.equalsIgnoreCase(TNPSupport.OpenTNP)) {
					dbManager.delete(discardableTNP);
				}
			}
		} catch (final Exception e) {
			LOG.error(new DumpInfo(String.format("Error discarding unmanaged TNPs on ME <%s>", getNeLocator()), e));
			throw e;
		}
	}

	private String getNeLocator() {
		return helper.getSBIClient().getNeLocator(helper.getMEDn());
	}

	private I36Naming getNaming() {
		return helper.getSBIClient().getNaming();
	}

	public void setOldTNPSet(final Set<TrailNtwProtectionDn> oldTnpSet) {
		this.oldTnpSet = oldTnpSet;
	}

	private SNCDn getTrailSnc(final DBProtectionGroup dbPGP) {

		final DBIterator<DBPortTp> dbPortTPItr = dbPGP.getProtectings()
				.iterator();

		try {
			while (dbPortTPItr.hasNext()) {
				final DBPortTp dbPortTp = dbPortTPItr.next();
				if (dbPortTp instanceof DBFtp) {
					final DBFtp lspFtp = (DBFtp) dbPortTp;
					final DBIterator<DBSnc> lspSncItr = lspFtp
							.getSncConnections().iterator();
					try {
						while (lspSncItr.hasNext()) {
							final DBSnc lspSnc = lspSncItr.next();
							if (lspSnc.getRate().equals(mplsLayer)) {
								return lspSnc.getDn();
							}
						}
					} finally {
						lspSncItr.close();
					}
				}
			}
		} finally {
			dbPortTPItr.close();
		}

		return null;
	}

	private SNCDnList getWorkerTrailSnc(final DBProtectionGroup dbPGP) {

		final DBIterator<DBPortTp> dbPortTPItr = dbPGP.getProtecteds()
				.iterator();

		try {
			while (dbPortTPItr.hasNext()) {
				final DBPortTp dbPortTp = dbPortTPItr.next();
				if (dbPortTp instanceof DBFtp) {
					final DBFtp lspFtp = (DBFtp) dbPortTp;
					final DBIterator<DBSnc> lspSncItr = lspFtp
							.getSncConnections().iterator();
					try {
						final SNCDnList list = new SNCDnList();
						while (lspSncItr.hasNext()) {
							final DBSnc lspSnc = lspSncItr.next();
							if (lspSnc.getRate().equals(mplsLayer)) {
								list.add(lspSnc.getDn());
							}
						}
						return list;
					} finally {
						lspSncItr.close();
					}
				}
			}
		} finally {
			dbPortTPItr.close();
		}

		return null;
	}

	private SNCDnList getProtectionTrailSnc(final DBProtectionGroup dbPGP) {

		final DBIterator<DBPortTp> dbPortTPItr = dbPGP.getProtectings()
				.iterator();

		try {
			while (dbPortTPItr.hasNext()) {
				final DBPortTp dbPortTp = dbPortTPItr.next();
				if (dbPortTp instanceof DBFtp) {
					final DBFtp lspFtp = (DBFtp) dbPortTp;
					final DBIterator<DBSnc> lspSncItr = lspFtp
							.getSncConnections().iterator();
					try {
						final SNCDnList list = new SNCDnList();
						while (lspSncItr.hasNext()) {
							final DBSnc lspSnc = lspSncItr.next();
							if (lspSnc.getRate().equals(mplsLayer)) {
								list.add(lspSnc.getDn());
							}
						}
						return list;
					} finally {
						lspSncItr.close();
					}
				}
			}
		} finally {
			dbPortTPItr.close();
		}

		return null;
	}

}