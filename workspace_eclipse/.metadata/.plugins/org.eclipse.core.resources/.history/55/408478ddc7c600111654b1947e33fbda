package com.marconi.tmp.tools;

import java.io.File;
import java.io.IOException;

import com.marconi.fusion.base.application.Profile;
import com.marconi.fusion.tmf.i36PlugIn.I36PlugIn;

public class BERDataConverter {
	private String confPath;
	private String berHome;
	private final String profileName = "I36Plugin.properties";
	private Profile profile;
	private int latestX36Index;
	private final boolean ready = false;

	public BERDataConverter(final String confPath, final String berHome) {
		if (confPath == null || berHome == null) {
			System.out.println("Invalid Args..");
		}
		this.confPath = confPath;
		this.berHome = berHome;
		if (!loadProfile()) {
			System.out.println("Profile is not loaded... check path in arguments");
			return;
		}
	}

	public void start() {

		if (profile == null) {
			System.out.println("Profile is not loaded... check path in arguments");
			return;
		}

		final BERConvManager berManager = new BERConvManager(profile);

		final File berFileLoc = new File(berHome);
		if (berFileLoc.exists() && berFileLoc.isDirectory()) {
			final File berFiles[] = berFileLoc.listFiles();
			for (final File berFile : berFiles) {
				if (getLatestVersion().equals(getBERVersion(berFile.getName()))) {
					System.out.println("\nBER file is Latest... and skipping conversion for :" + berFile.getName());
				} else {
					System.out.println("\nBER file is NOT Latest... Starting conversion for :" + berFile.getName());
					berManager.enQueue(berFile);
				}
			}
		}
	}

	public String getLatestVersion() {
		if (profile != null) {
			return profile.getProperty("Plugin.ASN.X36Version");
		} else {
			return "";
		}
	}

	private String getBERVersion(final String berFile) {
		String version = null;
		if (berFile == null) {
			return version;
		}
		String name = berFile;
		try {

			int ind = name.lastIndexOf(".ber");
			if (ind != -1) {
				name = name.substring(0, ind);
				// removed extention.
				if ((name.lastIndexOf(".ber")) != -1) {
					return getBERVersion(name);
				}
				ind = name.lastIndexOf('_');
				int major = 0;
				int minor = 0;
				int sub = 0;
				try {
					if (ind != -1) {
						minor = Integer.parseInt(name.substring(ind + 1));
						name = name.substring(0, ind);
						ind = name.lastIndexOf('_');
						if (ind != -1) {
							sub = Integer.parseInt(name.substring(ind + 1));
							name = name.substring(0, ind);
							ind = name.lastIndexOf('_');
							if (ind != -1) {
								major = Integer.parseInt(name.substring(ind + 1));
							}
						}
					}
					if (major != 0 && minor != 0 && sub != 0) {
						version = major + "." + sub + "." + minor;
					}
				} catch (final Exception e) {
					major = 0;
					sub = 0;
					minor = 0;
					version = null;
				}
			}

		} catch (final Exception e) {
		}
		return version;
	}

	private boolean loadProfile() {
		boolean flag = false;
		try {
			profile = new Profile(confPath + File.separator + profileName);
			latestX36Index = Integer.parseInt(profile.getProperty(I36PlugIn.PluginProperty.latestX36Index, "0"));
			flag = true;
		} catch (final IOException e) {
			e.printStackTrace();
		}
		return flag;
	}

	static public void main(final String[] args) {

		// args[0] = conf directory path
		// args[1] = BER directory path.

		final BERConvertionManager manager = new BERConvertionManager();

		if (args == null || args.length != 2) {
			System.out.println("Invalid args.. \n ");
			return;
		}
		final String confPath = args[0];
		final String berPath = args[1];

		final BERDataConverter converter = new BERDataConverter(confPath, berPath);
		converter.start();

	}
}
