
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;

import com.marconi.fusion.X36.X36MessageFactory;
import com.marconi.fusion.base.asn1.msg.FileMsgBerReader;
import com.marconi.fusion.base.asn1.msg.Message;
import com.marconi.fusion.base.asn1.msg.MessageFactory;

public class BerReader {
	public class BerFileFilter extends FileFilter {
		public boolean accept(File f) {
			return f.isDirectory() || f.getName().toUpperCase().endsWith(".ber") || f.getName().toLowerCase().endsWith(".ber");
		}

		public String getDescription() {
			return ".ber";
		}
	}

	public static void main(String[] args) {
		try {
			String windowsTheme = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
			try {
				UIManager.setLookAndFeel(windowsTheme);
			} catch (Exception e) {
				e.printStackTrace();
			}
			MessageFactory<Message<?>> msgfactory = new X36MessageFactory();
			JFileChooser fileChooser = new JFileChooser();
			BerFileFilter logFilter = new BerReader().new BerFileFilter();
			fileChooser.setFileFilter(logFilter);
			int x = fileChooser.showDialog(null, "Open");
			File file = null;
			if (x == JFileChooser.APPROVE_OPTION) {
				file = fileChooser.getSelectedFile();
				FileMsgBerReader<Message<?>> readber = new FileMsgBerReader<Message<?>>(file, msgfactory);
				Message<?> message = null;
				String parent = getParentDirectory(file);
				File newFile = getFiletoWrite(parent, file.getName(),0);
				BufferedWriter writer = new BufferedWriter(new FileWriter(newFile,true));
				while ((message = readber.readBER()) != null) {
					writer.write(message.toString());
					System.out.println(message);
				}
				writer.flush();
				writer.close();
				System.out.println("(-:-) written to FILE @ :"+newFile.getAbsolutePath());
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e);
		}
	}
	private static String getParentDirectory(File file){
		File parent = file.getParentFile();
		if(parent.isDirectory()){
			return parent.getAbsolutePath();
		}else{
			return getParentDirectory(parent);
		}
	}
	private static File getFiletoWrite(String path,String nameSuggest,int delim){
		String fileName = null;
		if(delim ==0 ){
			fileName=path+File.separator+nameSuggest+".txt";
		}else{
			fileName=path+File.separator+nameSuggest+"_"+delim+".txt";
		}		
		File file =new File(fileName);
		if(file.exists()){
			delim++;
			return getFiletoWrite(path, nameSuggest, delim);
		}else{
			return file;
		}
	}
}
