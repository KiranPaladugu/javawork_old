I38 DEFINITIONS ::= BEGIN

#include <I38Query.asn>

SmartReqIdtype ::= INTEGER
SmartResIdtype ::= INTEGER

KLevel ::= INTEGER

JavaPreferences ::= GraphicString

LossOfTrafficFlag ::= BOOLEAN

LossOfResilienceFlag ::= BOOLEAN

Colour ::= INTEGER

SetOfSRG ::= SET OF SRG

SRG ::= INTEGER

CircuitIdentifier ::= SEQUENCE {
    neAddress GenericAddress OPTIONAL,
    circuitId INTEGER
}

CircuitStatus ::= ENUMERATED {
    noRequest                               (0),
    manualSwitchToProtection                (1),
    autoSwitch                              (2),
    forcedSwitchToProtection                (3),
    lockout                                 (4),
    noRequestAutoSwitchPending              (5),
    unProtectedOtfFailure                   (6),
    alarmOnProtection                       (7),
    externalFailure                         (8),
    manualSwitchToWorker                    (9)
}

NetError ::= SEQUENCE {
    errorCode INTEGER OPTIONAL,
    errorValue INTEGER OPTIONAL,
    erroredNe GenericAddress OPTIONAL
}

GetCreateGMPLSPathInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfGMPLSPath SetOfGMPLSPath,
	createPath BOOLEAN OPTIONAL
}

GetGMPLSDetails ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	setOfGMPLSPath SetOfGMPLSPath,
	dummy          NULL OPTIONAL
}

GetGMPLSDiscrepancies ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	setOfUSNId SetOfSNId,
	dummy      NULL   OPTIONAL
}

GetGMPLSNodes ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	setOfUSNId SetOfSNId,
	dummy      NULL   OPTIONAL
}

AbortMeasure ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	scanners   SetOfScanner,
	signalType SignalType     OPTIONAL,
	pathId     PathId         OPTIONAL,
        deleteScanner             NULL OPTIONAL
}

AbortRestoration ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userId           AttrId,
	resourcesToAbort SetOfPaths,
	dummy            NULL OPTIONAL
}

AccessRights ::= SEQUENCE {
	netProfile         NetProf       OPTIONAL,
	sysProfile         SysProf       OPTIONAL,
	userProfileName    GraphicString OPTIONAL
}

Acknowledge ::= SEQUENCE {
	orderId OrderId OPTIONAL
}

AcknowledgeNMAlarm ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	userName AttrName,
	nmAlarm AlarmId,
	pathOrLink PathOrLinkId OPTIONAL
}

ActivateLeg ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathId PathId,
	ttp TTPId OPTIONAL,
	ctp CTPId OPTIONAL
}

ActivateMSSPRing ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	msspringId SmartResIdtype,
	dummy      NULL OPTIONAL
}

ActivatePath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathId PathId,
	pathState PathState,
	usersGroups RefUsersGroupList OPTIONAL,
	pathCmdType PathCmdType OPTIONAL,
	isASTNManaged BOOLEAN OPTIONAL,
	forcedNonASTN NULL OPTIONAL
}

ActTimerExpired ::= SEQUENCE {
	reqId   SmartReqIdtype,
	orderId AttrId,
	dummy   NULL OPTIONAL
}

AddAG ::= SEQUENCE {
	reqId     SmartReqIdtype,
	userId    AttrId,
	usnId     SNId,
	name      AGName,
	setOfPort SetOfPort,
	dummy     NULL OPTIONAL
}

AddBidProf ::= SEQUENCE {
	vc12 Flag,
	vc2 Flag,
	vc2_5c Flag,
	vc3 Flag,
	vc4 Flag,
	vc4_4c Flag,
	vt15 Flag,
	vt2 Flag,
	vt3 Flag,
	vt6 Flag,
	sts1 Flag,
	sts3c Flag,
	sts12c Flag,
	sts21c Flag,
	sts48c Flag,
	sts192c Flag,
	sts768c Flag
}

AddBroadProf ::= SEQUENCE {
	vc12 Flag,
	vc2 Flag,
	vc2_5c Flag,
	vc3 Flag,
	vc4 Flag,
	vc4_4c Flag,
	vt15 Flag,
	vt2 Flag,
	vt3 Flag,
	vt6 Flag,
	sts1 Flag,
	sts3c Flag,
	sts12c Flag,
	sts21c Flag,
	sts48c Flag,
	sts192c Flag,
	sts768c Flag
}

AddedArea ::= SEQUENCE {
	userId AttrId,
	areaId AreaId,
	label GraphicString,
	isArea IsArea,
	ne NetworkElement OPTIONAL
}

AddedNE ::= SEQUENCE {
	userId  AttrId,
	addedNE SetOfNEs,
	dummy   NULL OPTIONAL
}

AddedPC ::= SEQUENCE {
	userId  AttrId,
	setOfPC SetOfPC,
	dummy   NULL OPTIONAL
}

AddedSnc ::= SEQUENCE {
	setOfLogicalSnc SetOfLogicalSnc,
	bSetDomain BOOLEAN OPTIONAL
}

AddGetEMAlarmList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	addedtps SetOfTPs,
	dummy    NULL OPTIONAL
}

AddGetNMAlarmList ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	resDomainId AttrId,
	addedNe     SetOfNEId,
	dummy       NULL OPTIONAL
}

AddInfo ::= GraphicString

AdditionalText ::= GraphicString

AddLeg ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	signalType   SignalType,
	pathId       PathId,
	pathState    PathState,
	routing      Routing,
	colour       Colour OPTIONAL,
	isProtection NULL   OPTIONAL
}

AddLegs ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	orderId OrderId,
	addTPs  SetOfTPIds,
	dummy   NULL OPTIONAL
}

AddModRemProf ::= SEQUENCE {
	add Flag,
	modify Flag,
	remove Flag
}

AddProt ::= BOOLEAN

AddProtection ::= SEQUENCE {
	reqId             SmartReqIdtype,
	userId            AttrId,
	pathId            PathId,
	signalType        SignalType,
	protType          ProtType,
	revertive         Revertive         OPTIONAL,
	priority          Priority          OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	routing           Routing,
	pathCmdType       PathCmdType       OPTIONAL,
	lspId             LSPId             OPTIONAL,
	srgDiversity      BOOLEAN           OPTIONAL,
	colour            Colour            OPTIONAL,
	createTandemSNCP  BOOLEAN           OPTIONAL,
        protOperationMode ProtOperMode	    OPTIONAL
}

AddUniProf ::= SEQUENCE {
	vc12 Flag,
	vc2 Flag,
	vc2_5c Flag,
	vc3 Flag,
	vc4 Flag,
	vc4_4c Flag,
	vt15 Flag,
	vt2 Flag,
	vt3 Flag,
	vt6 Flag,
	sts1 Flag,
	sts3c Flag,
	sts12c Flag,
	sts21c Flag,
	sts48c Flag,
	sts192c Flag,
	sts768c Flag
}

AddXCProf ::= SEQUENCE {
	uni Flag,
	bid Flag,
	broad Flag,
	uniPathProt Flag,
	bidPathProt Flag
}

AdminState ::= ENUMERATED {
	unlocked(1),
	locked(2),
          undefined(3)
}

AG ::= SEQUENCE {
	agName AGName,
	agId AGId,
	signalType SignalType OPTIONAL
}

AggregateNEStatus ::= SEQUENCE {
	neState SNState,
	dummy   NULL OPTIONAL
}

AggregateNMStatus ::= SEQUENCE {
	sdhState       SNState,
	sonetState     SNState,
	photonicsState SNState,
	dummy          NULL OPTIONAL
}

AGId ::= SEQUENCE {
	snId SNId,
	agId AGRelId
}

AGName ::= GraphicString

AGRelId ::= Identifier

Alarm ::= SEQUENCE {
	orderId OrderId,
	type AlarmType,
	alarmTime Time,
	addInfo AddInfo OPTIONAL
}

AlarmId ::= GraphicString

ResourceIdentifier ::= CHOICE {
	pathIdentifier Paths,
	linkIdentifier LinkIdentifier
}

AlarmInfo ::= SEQUENCE {
	resourceName GraphicString,
	pathStructFlag PathStructFlag OPTIONAL,
	resourceIdentifier ResourceIdentifier,
	resourceState ResourceState,
	severity Severity
}

AlarmOptions ::= SEQUENCE {
	colOrder ColumnsOrder,
	rowsNum INTEGER,
	rowsNumNM INTEGER,
	beep BOOLEAN,
	unackBeep BOOLEAN OPTIONAL,
	alarmTopSort BOOLEAN OPTIONAL
}

AlarmProf ::= SEQUENCE {
	history Flag,
	alarm NMAlarmProf OPTIONAL
}

alarmProtocolTechnology ProtocolTechnology ::= {
	TechID 3,
	ptTechDescription "I38 - Alarms Interface"
}

AlarmType ::= ENUMERATED {
	alarmCeased(0),
	unprotectedCircuitIsDisabled(1),
	protectedCircuitIsDisabled(2),
	protectedCircuitCannotBeRerouted(3),
	circuitNotActivatedAtDueTime(4),
	circuitNotDeletedAtDueTime(5),
	circuitWillNotBeActivated(6)
}

AlSignalDirection ::= ENUMERATED {
	indeterminated(0),
	clientSide(1),
	lineSide(2)
}

AlSignalType ::= ENUMERATED {
	indeterminated(0),
	ph(1),
	rs(2),
	ms(3),
	au4vc4(4),
	au3vc3(5),
	tu3vc3(6),
	tu2vc2(7),
	tu12vc12(8),
	tu(9),
	mb2Pdh(10),
	mb6x8Pdh(11),
	mb34x45Pdh(12),
	mb140Pdh(13),
	ph140Pdh(14),
	tu2vc2_nc(15),
	rsNearEnd(16),
	rsFarEnd(17),
	msNearEnd(18),
	msFarEnd(19),
	vc4NearEnd(20),
	vc4FarEnd(21),
	vc3NearEnd(22),
	vc3FarEnd(23),
	vc12NearEnd(24),
	vc12FarEnd(25),
	tuNearEnd(26),
	tuFarEnd(27),
	mb2PdhFarEnd(28),
	mb2PdhNearEnd(29),
	mb34x45PdhNearEnd(30),
	mb34x45PdhFarEnd(31),
	mb140PdhNearEnd(32),
	mb140PdhFarEnd(33),
	tu2Vc2_5cNearEnd(34),
	tu2Vc2_5cFarEnd(35),
	au4vc4_nc(36),
	ots(37),
	oms(38),
	och(39),
	au4vc4_ncv(40),
	vc2NearEnd(41),
	vc2FarEnd(42),
	ochNearEnd(43),
	ochFarEnd(44),
	sts1(45),
	vt6(46),
	vt2(47),
	vt15(48),
	sts1NearEnd(49),
	sts1FarEnd(50),
	vt6NearEnd(51),
	vt6FarEnd(52),
	vt2NearEnd(53),
	vt2FarEnd(54),
	vt15NearEnd(55),
	vt15FarEnd(56),
	sts3c(57),
	sts3cNearEnd(58),
	sts3cFarEnd(59),
	vt3(60),
	vt3NearEnd(61),
	vt3FarEnd(62),
	sts12c(63),
	sts12cNearEnd(64),
	sts12cFarEnd(65),
	sts48c(66),
	sts48cNearEnd(67),
	sts48cFarEnd(68),
	sts192c(69),
	sts192cNearEnd(70),
	sts192cFarEnd(71),
	sts768c(72),
	sts768cNearEnd(73),
	sts768cFarEnd(74),
	t1(75),
	t1NearEnd(76),
	t1FarEnd(77),
	t3(78),
	t3NearEnd(79),
	t3FarEnd(80),
	sts21c(81),
	sts21cNearEnd(82),
	sts21cFarEnd(83),
	sts24c(84),
	sts24cNearEnd(85),
	sts24cFarEnd(86),
	odu(87),
	otu(88),
	oduNearEnd(89),
	oduFarEnd(90),
	otuNearEnd(91),
	otuFarEnd(92),
	nv(93),
	ethernet(94),
	cbr(95),
	e1(96),
	e2(97),
	e3(98),
	e1_nv(99)

}

AlState ::= ENUMERATED {
	indeterminate(0),
	on(1),
	toBeReack(2),
	ack(3),
	clr(4),
	ackClr(5),
	deleted(6)
}

AreaDescriptor ::= SEQUENCE {
	adAreaId INTEGER,
	adAreaName GraphicString,
	adCoreHandler GraphicString OPTIONAL
}

AreaId ::= INTEGER

AsnCompilerHack ::= SEQUENCE {
	reqId      ReqId,
	msspringId MSSPRingId,
	lnLinkId   LnLinkId,
	linkId     LinkId,
	pathId     PathId,
	trailId    TrailId,
	scannerId  ScannerId,
	emId       EMId,
	dummy      NULL OPTIONAL
}

AssignPort ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	neId NEId,
	shelfId INTEGER,
	cardId INTEGER,
	portId INTEGER,
	timeslot INTEGER OPTIONAL,
	signalType SignalType OPTIONAL
}

AssignState ::= ENUMERATED {
	free(1),
	reserved(2),
	assigned(3)
}

AssociateProtectedPath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathName PathName,
	pathType PathType,
	protType ProtType,
	revertive Revertive OPTIONAL,
	priority Priority OPTIONAL,
	pathState PathState,
	pathStructFlag PathStructFlag OPTIONAL,
	sdhStructure AU4Info OPTIONAL,
	sonetStructure STS1Info OPTIONAL,
	lopWeight Weight OPTIONAL,  -- TO BE REMOVED
	customerData CustomerData OPTIONAL,
	routing Routing,
	firstXcIsUnidir BOOLEAN OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	pathGroup PathGroup OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	serviceState ServiceState,
	hopLinkName GraphicString OPTIONAL,
	vc4PathName GraphicString OPTIONAL,
	clientTrType ClientTrType OPTIONAL,
	srgDiversity BOOLEAN OPTIONAL,
	workerColour Colour OPTIONAL,
	protColour Colour OPTIONAL,
	astnCircuitInfo ASTNCircuitInfo OPTIONAL,
	protTypeASTN ProtType OPTIONAL
}

AttrId ::= Identifier

AttrName ::= GraphicString

AU4Info ::= CHOICE {
	oneAU4 ConnectionInfo,
	oneVC4 VC4StructureInfo
}

AutoRouteVC4Core ::= SEQUENCE {
	reqId              SmartReqIdtype,
	trialRun           BOOLEAN,
	tpOptions          GetVC4CoreTPListOptions,
	transformationTTPs SetOfTransformationTTPs,
	dummy              NULL   OPTIONAL
}



autoRouteArea AreaDescriptor ::= {
	AreaId 4,
	adAreaName "Auto Route Area",
	adCoreHandler MV38_ARH
}

Band ::= ENUMERATED {
	bandC(1),
	bandL(2)
}

BroadRouting ::= SET OF SetOfRouteItem

BSHRConfig ::= SEQUENCE {
	bshrTypeOnNM BSHRType,
	bshrTypeOnNE BSHRType
}

BshrGroupsStatus ::= SEQUENCE {
	eastBshrGroupStatus BshrGroupStatus,
	westBshrGroupStatus BshrGroupStatus
}

BshrGroupStatus ::= SEQUENCE {
	sectionStatus BshrSectionStatus,
	unitsState BshrProtectionUnitState
}

BshrProtectionUnitState ::= SEQUENCE {
	workingUnit TTP,
	workingState ProtectionState,
	protectionUnit TTP,
	protectionState ProtectionState
}

BshrSectionsStatus ::= SEQUENCE {
	eastBshrSectionStatus BshrSectionStatus,
	westBshrSectionStatus BshrSectionStatus
}

BshrSectionStatus ::= ENUMERATED {
	idle(0),
	fullPassThrough(1),
	kBytePassThrough(2),
	bridgeAndSwitchWest(3),
	bridgeAndSwitchEast(4),
	linkDown(5),
	isolatedNode(6),
	ruleS4b(7),
	dropBrSw(8)
}

BSHRType ::= ENUMERATED {
	msSPRing(1),
	nut(2),
	eNut(3),
	mspProt(4),
	misaligned(5),
	notConf(6)
}

CancelCircuit ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	orderId OrderId,
	dummy   NULL OPTIONAL
}

CancelOrder ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	orderId OrderId,
	dummy   NULL OPTIONAL
}

CardInvolved ::= ENUMERATED {
	pdh_pdh(1),
	pdh_sdh(2),
	sdh_sdh(3),
	sdh_pdh(4)
}

CardStr ::= GraphicString

Cause ::= GraphicString

ChangedTPs ::= SEQUENCE {
	areaId  AreaId,
	is_area INTEGER,
	label   GraphicString,
	dummy   NULL OPTIONAL
}

ChangedUserProfile ::= SEQUENCE {
	setOfUserId  SetOfUserId,
	viewName     AttrName,
	accessRights AccessRights,
	dummy        NULL OPTIONAL
}

ChangeOrder ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathName PathName,
	orderId OrderId,
	signalType SignalType,
	pathType PathType,
	protType ProtType,
	protectionMode ProtectionMode OPTIONAL,
	priority Priority OPTIONAL,
	quality Quality,
	customer Customer,
	startTime Time,
	endTime Time OPTIONAL,
	originTP TPId,
	destTPs SetOfTPIds
}

ChannelNumber ::= INTEGER

ForcedNonASTN ::= BOOLEAN

CircDefault ::= SEQUENCE {
	pathState PathState,
	protType ProtType,
	revertive Revertive,
	protectionMode ProtectionMode,
	priority Priority,
	deactAndRem DeactAndRem,
	normAndRem NormAndRem,
	pathProtDiversity PathProtDiversity,
	serviceState ServiceState,
	forcedNonASTN ForcedNonASTN,
	srgDiversity BOOLEAN,
	workerColour Colour,
	protColour Colour

}

SetOfProtState ::= SET OF ProtState

ProtState::= ENUMERATED {
	 indeterminate(0),
	 notActive(1),
	 notPresent(2),
	 notActiveReserved (3),
	 reservedOnDB(4),
	 partActiveOnDB(5),
	 faultReservedOnDB(6),
	 faultPartActiveOnDB(7),
	 faultOnProtection(8),
	 faultOnProtectionPartActive(9),
	 noFault(10),
	 faultOnProtectionBooked(11),
	 faultOnWorker(12),
	 faultOnWorkerActive(13),
	 lossOfTraffic(14),
	 noFaultActive(15),
	 faultOnProtectionActive(16),
	 notPresentFaultOnWorker(17),
	 sharedProtBusy(18),
	 protNotAvail(19),
	 sharedProtBusyBooked(20),
	 protNotAvailBooked(21),
	 lossOfTrafficReserved(22),
	 lossOfTrafficPartActive(23),
	 lossOfTrafficSharedProt (24),
	 lossOfTrafficProtNotAvail(25),
	 lossOfTrafficBooked(26),
	 lossOfTrafficSharedProtBooked(27),
	 lossOfTrafficProtNotAvailBooked(28),
	 notActivePartActive(29),
	 notActiveActive(30),
         combinedNotActive(31),
         activeNoFault(32),
         activeFault(33),
         activeFaultWorkerAndProt(34),
         activeFaultOnWorker(35),
         activeFaultOnProtection(36),
         notActiveNoFault(37)
}

State ::= ENUMERATED {
  indeterminate  (0),
  provisioning   (1),
  monitoring     (2),
  extAlarm       (3),
  restoring      (4),
  retrying       (5),
  failure        (6),
  reentry        (7)
}

CircToRest ::= SEQUENCE {
      failureCause FailureCause OPTIONAL,
      circuit CircInfo
}

CircManaged ::= SEQUENCE {
      failureCause FailureCause OPTIONAL,
      path Paths
}

SetOfCircManaged ::= SET OF CircManaged

SetOfCircToRest ::= SET OF CircToRest

FailureCause ::=  GraphicString

CircInfo ::= SEQUENCE {
	resourceName            GraphicString,
	resourceId              Paths,
	pathStructFlag          PathStructFlag       OPTIONAL,
	restPriority            Priority             OPTIONAL,
	seed                    Seed                 OPTIONAL,
	state                   CircuitState         OPTIONAL,
	protectionType          ProtType,
	protectionState         ProtState,
	circState               State,
	modified                UnixTime             OPTIONAL,
	astnOperationalState    ASTNOperationalState OPTIONAL,
	originalProtectionState ProtState            OPTIONAL,
	astnCircuitType         ASTNCircuitType      OPTIONAL,
	failureCause            FailureCause         OPTIONAL
}

SetOfCircInfo ::= SET OF CircInfo

Circuit ::= SEQUENCE {
	orderId OrderId,
	startTime Time,
	endTime Time OPTIONAL,
	originTP TPId,
	destTPs SetOfTPIds
}

CircuitBooked ::= SEQUENCE {
	userId    AttrId,
	orderId   AttrId,
	startTime SchedTime,
	endTime   SchedTime,
	dummy     NULL OPTIONAL
}

CircuitBookedModified ::= SEQUENCE {
	userId    AttrId,
	orderId   AttrId,
	startTime SchedTime,
	endTime   SchedTime,
	dummy     NULL OPTIONAL
}

CircuitBookedRemoved ::= SEQUENCE {
	userId  AttrId,
	orderId AttrId,
	dummy   NULL OPTIONAL
}

CircuitId ::= Identifier

CircuitName ::= GraphicString

CircuitProf ::= SEQUENCE {
	addBid AddBidProf OPTIONAL,
	addBroad AddBroadProf OPTIONAL,
	addUni AddUniProf OPTIONAL,
	pathGroup PathGroupProf OPTIONAL,
	leg LegProf OPTIONAL,
	find Flag,
	autoRoute Flag,
	activate Flag,
	secure Flag,
	modify Flag,
	service Flag,
	pathProt PathProtProf OPTIONAL,
	unsecure Flag,
	resetName Flag,
	deactivate Flag,
	disass Flag,
	remove Flag
}

CircuitState ::= ENUMERATED {
	indeterminate(0),
	inserted(1),
	deleted(2)
}

ClearNEEvent ::= SEQUENCE {
	reqId     SmartReqIdtype,
	userId    AttrId,
	userName  AttrName,
	neEventId EventId,
	dummy     NULL OPTIONAL
}

ClearNMAlarm ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	userName AttrName,
	nmAlarm AlarmId,
	pathOrLink PathOrLinkId OPTIONAL
}

Client ::= SEQUENCE {
	clientportId TPId OPTIONAL,
	clientName TPName OPTIONAL,
	clientTrType ClientTrType
}

ClientTrType ::= ENUMERATED {
	cttUnequipped(1),
	cttLinearTransponderMode(2),
	cttSTM1(3),
	cttSTM4(4),
	ctt1GFibreChannel(5),
	cttGigabitEthernet(6),
	cttSTM16(7),
	cttSTM64(8),
	cttOther(9),
	cttFailedClient(10),
	cttNotSupported(11),
	cttFddi(12),
	cttEscon(13),
	cttDigitalVideo(14),
	cttFastEthernet(15),
	ctt10GAggregated(16),
	ctt2_5GAggregated(17),
	ctt250MFibreChannel(18),
	ctt500MFibreChannel(19),
	ctt2GFibreChannel(20),
	cttFlexMux(21),
	ctt155MTransparent(22),
	ctt622MTransparent(23),
	ctt2_5GbTransparent(24),
	ctt10GbTransparent(25),
	ctt10GType1(26), ---10Gb WAN Ethernet
	ctt10GType2(27), ---10G Fibre Channel
	ctt10GType3(28),
	ctt2_5GType1(29),
	ctt2_5GType2(30),
	ctt2_5GType3(31),
	cttGeneralType1(32), ---10Gb Ethernet
	cttGeneralType2(33),
	cttGeneralType3(34),
	cttGeneralType4(35), ---4G Fibre Channel
	cttFrom155Mto2_5G(36),
	ctt4xODU1(37),
	cttOTM0_1(38),
	cttSTM256(39),
        ctt40GAggregated(40),
	cttVirtual(41)
}

ClrReason ::= ENUMERATED {
	indeterminate(0),
	emCLR(1),
	nmREAL(2),
	userCLR(3),
	resDeleted(4),
	nmCLR(5)
}

CmdType ::= ENUMERATED {
	removeLeg    (1),
	deactivateLeg(2),
	addCircuit   (3),
	modSpring    (4),
	defStructure (5),
	createPath   (6),
	setLogName   (7),
	getAllTTPs   (8),
	recompute    (9),
	addTandem    (10)
}

Coloured ::= SEQUENCE {
	name TTPName,
	freq Wavelengths OPTIONAL,
	wrapper Wrapper OPTIONAL
}

ColumnInfo ::= SEQUENCE {
	pos INTEGER,
	shown BOOLEAN
}

ColumnsOrder ::= SET OF ColumnInfo

CommandType ::= ENUMERATED {
	add                       (1),
	remove                    (2),
	addProtection             (3),
	removeProtection          (4),
	addLeg                    (5),
	removeLeg                 (6),
	modifyProtection          (7),
	workingSideList           (8),
	getWorkingSide            (9),
	addTandemSNCPconnection   (10),
	removeTandemSNCPconnection(11)
}

CompleteName ::= GraphicString

Compliance ::= ENUMERATED {
	resOk(1),
	neReadOnly(2),
	neCommunicationProblem(3),
	emProcessingError(4),
	nmInvalidRequest(5),
	nmInvalidResource(6),
	rejectedFromNe(7),
	notYetImplemented(8),
	notSupportedByNe(9),
	multipleRequestFailed(10),
	userUnknown(11),
	invalidPassword(12),
	invalidConfiguration(13)
}

ComplianceStr ::= GraphicString

ConcatenatedType ::= ENUMERATED {
	free(1),
	busy(2)
}

LCASOpState ::= ENUMERATED{
	lcasNotSupported (0),
	lcasDisabled (1),
	lcasEnabled (2)
}

ConfEth ::= CHOICE {
	oneGbEthInVC4_nv NULL,
	oneGbEthInVC4_4c NULL,
	oneGbEthInVC4_16v NULL,
	oneGbEthInVC4 NULL
}

StructuringMode ::= ENUMERATED {
	flat (1),
	nested(2)
}

ConfBackPlanes ::= SEQUENCE {
	vc4s INTEGER,
	backPlanes INTEGER,
	structuringMode StructuringMode

}

ConfEthPort ::= SEQUENCE {
	physicalPorts INTEGER OPTIONAL,
	vcgs INTEGER OPTIONAL,
	confBackPlanes ConfBackPlanes,
	isAggregated BOOLEAN OPTIONAL,
	  isLCAS BOOLEAN OPTIONAL
}

LoBpPortType ::= ENUMERATED {
	pStm1(1),
	pStm4(2),
	pStm16(3)
}

ConfLOBpPort ::= SEQUENCE {
	linePortNumber INTEGER      OPTIONAL,
	linePortType   LoBpPortType OPTIONAL
}

ConfigProf ::= SEQUENCE {
	em EMProf OPTIONAL,
	ne NEProf OPTIONAL,
	sn SNProf OPTIONAL,
	virtSN VirtSNProf OPTIONAL,
	link LinkProf OPTIONAL,
	spring MSSPRingProf OPTIONAL,
	optPath OptPathProf OPTIONAL,
	vc4Path VC4PathProf OPTIONAL,
	sts1Path STS1PathProf OPTIONAL,
	linkConn LinkConnProf OPTIONAL
}

ConfModify ::= SEQUENCE {
	configModOnNE BOOLEAN,
	configModOnNM BOOLEAN
}

ConnectionInfo ::= SEQUENCE {
	state ConnectionState OPTIONAL,
	side Side OPTIONAL
}

ConnectionState ::= ENUMERATED {
	free(1),
	conn(2)
}

ConnectivityId ::= CHOICE {
	pathId PathId,
	linkConnId LinkConnId
}

ClientInfo ::= SEQUENCE {
	serverTrailId SmartResIdtype,
	layer Layer,
	klm KLM
}

LKInfoOnNode ::= SEQUENCE {
	neName      NEName OPTIONAL,
	routerId    GenericAddress,
	lkInterface GenericAddress,
	weight      Weight   OPTIONAL,
	isFake 	    NULL     OPTIONAL,
	protocolLinkClusterInfo ProtocolLinkClusterInfo OPTIONAL,
        configured      ConfiguredOnCP   OPTIONAL,
        configurable    ConfigurableOnCP OPTIONAL,
        restorePhase    RestorePhase OPTIONAL
}

LkLockingState ::= ENUMERATED {
	locked  (0),
	unlocked(1)
}

GeneralLinkClusterInfo ::= SEQUENCE {
	neInfoFrom   LKInfoOnNode,
	neInfoTo     LKInfoOnNode,
	creationDate UnixTime,
	lockingState LkLockingState
}

ProtocolLinkClusterInfo ::= SEQUENCE {
	lmpOperState  LMPOperState,
	lkAdminState  LkAdminState,
	ospfLkAdminState  LkAdminState,
	rsvpLkAdminState  LkAdminState,
	lkSumRetInterval  INTEGER,
	lkSumRetLimit	  INTEGER,
	lkSumRetDelta	  INTEGER,
        dummy             NULL OPTIONAL
}

EdgeLinkClusterInformation ::= SEQUENCE {
	edgeType       EdgeType       OPTIONAL,
	tnaAddress     GenericAddress OPTIONAL,
	uniRemotePeer  GenericAddress OPTIONAL,
	enniRemotePeer GenericAddress OPTIONAL,
	e2_enniClient  GenericAddress OPTIONAL
}

TELinkClusterInformation ::= SEQUENCE {
	colour   Colour   OPTIONAL,
	setOfSRG SetOfSRG OPTIONAL
}

TestResult ::= ENUMERATED {
	no_test     (0),
	test_success(1),
	test_failure(2)
}

VerifiedDataLink ::= SEQUENCE {
	dataLinkName GraphicString OPTIONAL,
	testResult   TestResult    OPTIONAL,
	information  GraphicString OPTIONAL
}

SetOfVerifiedDataLink ::= SET OF VerifiedDataLink

LinkClusterInfo ::= SEQUENCE {
	linkClusterName            GraphicString      OPTIONAL,
	generalLinkClusterInfo     GeneralLinkClusterInfo OPTIONAL,
	edgeLinkClusterInformation EdgeLinkClusterInformation OPTIONAL,
	teLinkClusterInformation   TELinkClusterInformation OPTIONAL,
          managedSignalType	       SetOfSignalType,
          isMisaligned               BOOLEAN       OPTIONAL,
          canBeDeconfigured          BOOLEAN       OPTIONAL,
          isTrib                     BOOLEAN       OPTIONAL
}

ConnInfo ::= SEQUENCE {
	link            LnLink,
	linkConn        LinkConn        OPTIONAL,
	clientLinkConn  ClientInfo      OPTIONAL,
	linkClusterInfo LinkClusterInfo OPTIONAL
}

coreDbArea AreaDescriptor ::= {
	AreaId 2,
	adAreaName "CORE Db Area",
	adCoreHandler MV38_CH
}

Cost ::= INTEGER

CreateEM ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	emName      EMName,
	commandPort EMCommandPort,
	alarmPort   EMAlarmPort,
	dummy       NULL OPTIONAL
}

ReservationType ::= ENUMERATED {
	nms    (1),
	astnDD (2),
	undef  (3)
}

CreateLink ::= SEQUENCE {
	reqId                SmartReqIdtype,
	userId               AttrId,
	fromUSNId            SNId,
	toUSNId              SNId,
	linkName             LinkName,
	ttpIdFrom            TTPId           OPTIONAL,
	ttpIdTo              TTPId           OPTIONAL,
	weight               Weight          OPTIONAL,
	sdhStructure         AU4Info         OPTIONAL,
	sonetStructure       STS1Info        OPTIONAL,
	lopWeight            Weight          OPTIONAL,-- TO BE REMOVED
	customerData         CustomerData    OPTIONAL,
	hopRestSideWeight    Weight          OPTIONAL,-- TO BE REMOVED
	hopNormSideWeight    Weight          OPTIONAL,-- TO BE REMOVED
	fraction             Fraction        OPTIONAL,
	manageAIS            ManageAIS       OPTIONAL,
	supportTSI           SupportTSI      OPTIONAL,
	hopLinkName          GraphicString   OPTIONAL,
	ochLinkName          GraphicString   OPTIONAL,
	vc4PathName          GraphicString   OPTIONAL,
	colour               Colour          OPTIONAL,
	setOfSRG             SetOfSRG        OPTIONAL
}

CreateLinkConnGroup ::= SEQUENCE {
	reqId             SmartReqIdtype,
	userId            AttrId,
	lnLinkId          SmartResIdtype,
	lnType            LnType,
	linkConnGroupType LinkConnGroupType,
	setOfLinkConn     SetOfLinkConn,
	dummy             NULL OPTIONAL
}

CreateMSSPRing ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	msspringName MSSPRingName,
	msspringType MSSPRingType,
	msspringNutConfig BSHRType,
	signalType SignalType,
	waitToRestoreTime WaitToRestoreTime,
	customerData CustomerData OPTIONAL,
	ring Ring,
	extraTrfSupport BOOLEAN OPTIONAL
}

CreateObjResDomain ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	object ObjResDomain,
	dummy  NULL OPTIONAL
}

CreateObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	object ObjSNCList,
	dummy  NULL OPTIONAL
}

CreateObjUsersGroup ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	object ObjUsersGroup,
	dummy  NULL OPTIONAL
}

CreatePath ::= SEQUENCE {
	reqId             SmartReqIdtype,
	userId            AttrId,
	signalType        SignalType,
	pathName          PathName,
	pathType          PathType,
	protType          ProtType,
	revertive         Revertive         OPTIONAL,
	priority          Priority          OPTIONAL,
	pathState         PathState,
	pathStructFlag    PathStructFlag    OPTIONAL,
	sdhStructure      AU4Info           OPTIONAL,
	-- sonetStructure STS1Info          OPTIONAL,
	lopWeight         Weight            OPTIONAL, -- TO BE REMOVED
	customerData      CustomerData      OPTIONAL,
	routing           Routing,
	firstXcIsUnidir   BOOLEAN           OPTIONAL,
	startTime         SchedTime         OPTIONAL,
	endTime           SchedTime         OPTIONAL,
	preemptFlag       PreemptFlag       OPTIONAL,
	pathGroup         PathGroup         OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	serviceState      ServiceState,
	hopLinkName       GraphicString     OPTIONAL,
	vc4PathName       GraphicString     OPTIONAL,
	clientTrType      ClientTrType      OPTIONAL,
	encapsulationMode EncapsulationMode OPTIONAL,
	serverSDHProt     BOOLEAN           OPTIONAL,
	restorationType   RestorationType   OPTIONAL,
	astnCircuitInfo   ASTNCircuitInfo   OPTIONAL,
	workerColour      Colour            OPTIONAL,
	protColour        Colour            OPTIONAL,
	srgDiversity      BOOLEAN           OPTIONAL,
	createTandemSNCP  BOOLEAN           OPTIONAL
}

CreateSN ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	snName SNName,
	usnParentId SNId,
	snCoord SNCoord,
	snType SNType,
	setOfLayer SetOfLayer OPTIONAL,
	mapFile MapFile OPTIONAL,
	isArea BOOLEAN OPTIONAL,
	managedVSNInfo ManagedVSNInfo OPTIONAL
}

CreateUser ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	userName AttrName,
	usersGroup AttrId,
	timeWindow WeeklyTimeWindow,
	forcedUserId  AttrId OPTIONAL
}

CreateUserProfile ::= SEQUENCE {
	reqId           SmartReqIdtype,
	userId          AttrId,
	userProfileName AttrName,
	accessRights    AccessRights,
	dummy           NULL OPTIONAL
}

CTP ::= SEQUENCE {
	ctpName CTPName,
	ctpId CTPId,
	signalType SignalType,
	assignState TPAssignState,
	operState OperState
}

ODU ::= SEQUENCE {
	ochId  INTEGER OPTIONAL,
	odu3Id INTEGER,
	odu2Id INTEGER,
	odu1Id INTEGER,
    odu0Id INTEGER
}

TimeSlotId ::= INTEGER

VirtualTpId ::= SEQUENCE {
        au4 INTEGER,
        vc4 INTEGER
}

RST ::= SEQUENCE {
	r INTEGER,
	s INTEGER,
	t INTEGER
}

Timeslot ::= CHOICE {
	klm         KLM,
	ochId       INTEGER,
	oduTimeSlot ODUTimeSlot,
	timeSlotId  TimeSlotId,
	null        NULL,
	virtualTpId VirtualTpId,  -- per virtually concatenated
	genericTpId INTEGER,
	rst         RST
}

CTPId ::= SEQUENCE {
	snId  SNId,
	ctpId CTPRelId
}

CTPInfo ::= SEQUENCE {
	snId         SNId     OPTIONAL,
	ctpId        TTPRelId OPTIONAL,
	shelfId      INTEGER  OPTIONAL,
	cardId       INTEGER  OPTIONAL,
	portId       INTEGER  OPTIONAL,
	ctpChannelId Timeslot OPTIONAL,
	tpName       TPName   OPTIONAL
}

CTPName ::= GraphicString

CTPRelId ::= Identifier

CTT ::= CHOICE {
	endPointsCTT EndPointsCTT,
	clientTrType ClientTrType
}

CurrConn ::= CHOICE {
	unselPath UnselPath,
	unselLink UnselLink,
	conn ConnInfo
}

CurrLink ::= CHOICE {
	unselPath UnselPath,
	unselLink UnselLink,
	lnLinkCouple LnLinkCouple
}

CurrRingSN ::= SEQUENCE {
	uSN SNs,
	sn SNId OPTIONAL,
	westWorker TTP OPTIONAL,
	eastWorker TTP OPTIONAL,
	westProtection TTP OPTIONAL,
	eastProtection TTP OPTIONAL,
	nodeId NodeId OPTIONAL,
	ringMap RingMap OPTIONAL,
	pathInfoMismatch PathInfoMismatch OPTIONAL,
	bshrRingStatus BshrSectionsStatus OPTIONAL,
	bshrSpanStatus BshrSectionsStatus OPTIONAL,
	springState CycleLifeState OPTIONAL,
	bshrConf BSHRConfig OPTIONAL,
	protectionId INTEGER OPTIONAL,
	isVirtualSN NULL OPTIONAL
}

CurrSN ::= SEQUENCE {
	uSN SNs,
	sn SNId OPTIONAL,
	snc SNC OPTIONAL,
	snType SNType OPTIONAL,
	snState SNState OPTIONAL,
	autoSNC NULL OPTIONAL,
	managedVSNInfo ManagedVSNInfo OPTIONAL,
	routeCTPFrom TP OPTIONAL,
	routeCTPTo TP OPTIONAL,
	astnState ASTNOperationalState OPTIONAL,
        associated BOOLEAN OPTIONAL ,
        sncRegeneration SNC OPTIONAL
}

CustDataConfig ::= SEQUENCE {
	label Label,
	type CustDataType
}

CustDataLink ::= SEQUENCE {
	number NumCustData,
	setOfCustDataConfig SetOfCustDataConfig
}

CustDataMSSPRing ::= SEQUENCE {
	number NumCustData,
	setOfCustDataConfig SetOfCustDataConfig
}

CustDataPath ::= SEQUENCE {
	number NumCustData,
	setOfCustDataConfig SetOfCustDataConfig
}

CustDataPattern ::= SET OF CustDataPatternItem

CustDataPatternItem ::= CHOICE {
	intValuePattern IntValuePattern,
	null NULL,
	stringValuePattern StringValuePattern,
	dataValuePattern DataValuePattern
}

CustDataType ::= ENUMERATED {
	integer(1),
	string(2),
	data(3)
}

Customer ::= GraphicString

CustomerData ::= SET OF CustomerDataItem

CustomerDataItem ::= CHOICE {
	intValue IntValue,
	null NULL,
	stringValue StringValue,
	dataValue DataValue
}

CustomerDataItemString ::= GraphicString

CustomerDataString ::= SET OF CustomerDataItemString

CycleLifeState ::= ENUMERATED {
	indeterminated(0),
	reserved(1),
	partiallyActived(2),
	actived(3),
	alreadyActived(4),
	booked(5),
	preplanned(6),
	partiallySecured(7),
	secured(8),
	framed(9),
	preplannedOnNe(10)
}

DataValue ::= GraphicString

DataValuePattern ::= DataValue

DeactAndRem ::= BOOLEAN

DeactivateLeg ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	pathId     PathId,
	tp         TPId OPTIONAL
}

DeactivateMSSPRing ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	msspringId SmartResIdtype,
	dummy      NULL OPTIONAL
}

DeactivatePath ::= SEQUENCE {
	reqId                SmartReqIdtype,
	userId               AttrId,
	signalType           SignalType,
	pathId               PathId,
	pathState            PathState,
	protType             ProtType    OPTIONAL,
	setOfLSPId           SetOfLSPId  OPTIONAL,
	emId                 EMId        OPTIONAL,
	pathCmdType          PathCmdType OPTIONAL,
	isASTNManaged        BOOLEAN     OPTIONAL, -- used only for circuit audit
	isAutoRecompute      BOOLEAN     OPTIONAL, -- used only in case of automatic recompute
	isRevertiveProcedure BOOLEAN     OPTIONAL,
	removeAlso           NULL        OPTIONAL
}

DeactTimerExpired ::= SEQUENCE {
	reqId   SmartReqIdtype,
	orderId AttrId,
	dummy   NULL OPTIONAL
}

DeAssignPort ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	ttpId TTPId,
	domain GraphicString OPTIONAL
}

DeletedArea ::= SEQUENCE {
	userId AttrId,
	id     Id,
	isArea IsArea,
	dummy  NULL OPTIONAL
}

DeletedNE ::= SEQUENCE {
	userId    AttrId,
	deletedNE SetOfNEs,
	dummy     NULL OPTIONAL
}

DeletedSnc ::= SEQUENCE {
	setOfLogicalSnc SetOfLogicalSnc,
	bSetDomain BOOLEAN OPTIONAL
}

DeleteObjAG ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	object ObjAG,
	dummy  NULL OPTIONAL
}

DeleteObjResDomain ::= SEQUENCE {
	reqId  SmartReqIdtype,
	object ObjResDomain,
	dummy  NULL OPTIONAL
}

DeleteObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	object ObjSNC,
	dummy  NULL OPTIONAL
}

DeleteObjUsersGroup ::= SEQUENCE {
	reqId  SmartReqIdtype,
	object ObjUsersGroup,
	dummy  NULL OPTIONAL
}

DeleteScanners ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	scanners SetOfScanner,
	dummy    NULL OPTIONAL
}

desktopArea AreaDescriptor ::= {
	AreaId 1,
	adAreaName "Desktop Layer",
	adCoreHandler MV38_UM
}

DetailsProf ::= SEQUENCE {
	em Flag,
	sn Flag,
	link Flag,
	spring Flag,
	optPath Flag,
	vc4Path Flag,
	sts1Path Flag,
	circuit Flag,
	lifeCycle Flag,
	trace Flag
}

Dimension ::= INTEGER

Directionality ::= ENUMERATED {
	unidirectional(1),
	bidirectional(2),
	broadcast(3)
}

DisableResources ::= BOOLEAN

DisassociateMSSPRing ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	msspringId SmartResIdtype,
	dummy      NULL OPTIONAL
}

DisassociatePath ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	signalType     SignalType,
	pathId         PathId,
	protectionOnly BOOLEAN,
	dummy          NULL OPTIONAL
}

DisplayItem ::= SEQUENCE {
	snId SNId,
	setOfSegment SetOfSegment
}

DisplayOption ::= CHOICE {
	pathIdentifier Paths,
	routing Routing
}

DisplayRouting ::= SET OF DisplayItem

DW ::= CHOICE {
	endPointsDW EndPointsDW,
	digWrapper Wrapper
}

EMAlarm ::= SEQUENCE {
	emAlId            Identifier,
	emName            EMName,
	ne                NEName,
	tp                TP,
	shelf             Identifier,
	cardStr           CardStr,
	sourceNum         GraphicString,
	port              INTEGER,
	timeSlot          INTEGER           OPTIONAL,
	raisingTime       INTEGER,
	receivingTime     INTEGER,
	severity          Severity,
	additionalTxt     AdditionalText,
	clrTime           INTEGER,
	clrReason         ClrReason,
	probableCause     ProbableCause,
	probableStr       GraphicString,
	alsignalType      AlSignalType,
	portLabel         GraphicString     OPTIONAL,
	neId              EMNEId,
	alSignalDirection AlSignalDirection OPTIONAL,
	additionalId      Identifier        OPTIONAL,
	timeSlotInfo      Timeslot,
	card              INTEGER           OPTIONAL
}

EMAlarmId ::= SEQUENCE {
	emAlId Identifier,
	emName EMName,
	neName NEName,
	sourceNum GraphicString,
	additionalId Identifier OPTIONAL
}

EMAlarmPort ::= INTEGER

EMCommand ::= ENUMERATED {
	indeterminate(0),
	neParameters(1),
	portConfig(2),
	sncSncp(3),
	msProtection(4),
	msSPRing(5)
}

EMCommandPort ::= INTEGER

EMId ::= Identifier

EMLogin ::= SEQUENCE {
	id     SmartResIdtype,
	name   EMName,
	dummy  NULL OPTIONAL
}

EMLogout ::= SEQUENCE {
	id    SmartResIdtype,
	name  EMName,
	dummy NULL OPTIONAL
}

EMLostConnection ::= SEQUENCE {
	id    SmartResIdtype,
	name  EMName,
	msg   Cause,
	dummy NULL OPTIONAL
}

EMName ::= GraphicString

EMNEId ::= Identifier

EMProf ::= SEQUENCE {
	add Flag,
	realign Flag,
	remove Flag
}

EMReconnection ::= SEQUENCE {
	id    SmartResIdtype,
	name  EMName,
	msg   Cause,
	dummy NULL OPTIONAL
}

EMAlarmState ::=  ENUMERATED {
         indeterminated(0),
         aligned (1),
         notAligned (2),
         duringAlignement(3),
         notConnected    (4),
         unavailable     (5)
}

EMs ::= SEQUENCE {
	emName EMName,
	emId SmartResIdtype,
	emState EMState,
        emAlarmState EMAlarmState
}

EMState ::= ENUMERATED {
	idle(1),
	associated(2),
	duringAssociation(3),
	notLogged(4)
}

EncapsulationMode ::= ENUMERATED {
	encapmode_notapplic(1),
	encapmode_laps(2),
	encapmode_pfs_hdlc(3),
	encapmode_pfs_turbo(4),
	encapmode_mllpp(5)
}

EndName ::= GraphicString

EndPointsCTT ::= SEQUENCE {
	aEndClientTrType ClientTrType OPTIONAL,
	zEndClientTrType ClientTrType OPTIONAL
}

EndPointsDW ::= SEQUENCE {
	aEndDigWrapper Wrapper OPTIONAL,
	zEndDigWrapper Wrapper OPTIONAL
}

EndPointsFREQ ::= SEQUENCE {
	aEndFreq Wavelengths OPTIONAL,
	zEndFreq Wavelengths OPTIONAL
}

EndsToSwap ::= ENUMERATED {
	bothEnds(1),
	aEndOnly(2),
	zEndOnly(3)
}

Event ::= SEQUENCE {
	orderId OrderId,
	type EventType,
	eventTime Time,
	addInfo AddInfo OPTIONAL
}

EventId ::= GraphicString

EventType ::= ENUMERATED {
	circuitActivated(0),
	circuitDeleted(1),
	circuitRerouted(2),
	circuitProtected(3)
}

ExtendCircuit ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	orderId OrderId,
	endTime Time OPTIONAL,
	extendTPs ExtendTPs OPTIONAL
}

ExtendTime ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	orderId OrderId,
	endTime Time,
	dummy   NULL OPTIONAL
}

ExtendTPs ::= CHOICE {
	addTPs SetOfTPIds,
	remTPs SetOfTPIds
}

ExtLnType ::= SEQUENCE {
	lnType LnType,
	simulation BOOLEAN OPTIONAL
}

Failed ::= ENUMERATED {
	worker(1),
	protection(2),
	both(3),
	noFail(4)
}

CardPortChannel ::= SEQUENCE {
	ag      AG,
	port    Port,
	channel ChannelInfo,
    bulkProvisioning   NULL   OPTIONAL   -- LS Provisioning Enhancement
}

FarEndSN ::= SEQUENCE {
	uSN             SNs,
	sn              SNId                 OPTIONAL,
	ttp             TTP                  OPTIONAL,
	snc             SNC                  OPTIONAL,
	snType          SNType               OPTIONAL,
	snState         SNState              OPTIONAL,
	toTtp           TTP                  OPTIONAL,
	autoSNC         NULL                 OPTIONAL,
	managedVSNInfo  ManagedVSNInfo       OPTIONAL,
	routeTPFrom     TP                   OPTIONAL,
	routeTPTo       TP                   OPTIONAL,
	astnState       ASTNOperationalState OPTIONAL,
	ipAddress       IPaddress            OPTIONAL,
	cardPortChannel CardPortChannel      OPTIONAL,
        associated      BOOLEAN              OPTIONAL
}

Fault ::= SEQUENCE {
	orderId OrderId OPTIONAL,
	fault FaultType,
	startTime Time OPTIONAL,
	endTime Time OPTIONAL,
	addInfo AddInfo OPTIONAL,
	orderIds SetOfOrderIds OPTIONAL
}

FaultType ::= ENUMERATED {
	circuitNotExtended(0),
	unknownOrderId(1),
	unknownCustomer(2),
	unsupportedDirectionality(3),
	directionalityIsNotConsistentWithTPs(4),
	unsupportedCapacity(5),
	capacityIsNotConsistentWithTPs(6),
	invalidPriorityValue(7),
	originTPIsNotAvailableForCustomer(8),
	originTPIsAlreadyUsed(9),
	notExistentOriginTP(10),
	destinationTPsAreNotAvailableForCustomer(11),
	destinationTPsAreAlreadyUsed(12),
	destinationTPDoNotExists(13),
	destinationTPsNotConsistentWithDirectionality(14),
	notAvailableStartTime(15),
	notAvailableEndTime(16),
	circuitAlreadyActivated(17),
	circuitNotYetActivated(18),
	circuitNotCancelled(19),
	circuitNotReroutedOrSwitched(20),
	selectedCircuitsNotReroutedOrSwitched(21),
	selectedCircuitsNotReroutedOrSwitched(21),
	occupied(22),
	protectionNotPossible(23),
	circuitNameAlreadyUsed(24),
	notExistingNE(25),
	genericError(26)
}

FilterTime ::= CHOICE {
	since [1] SchedulingTime,
	before [2] SchedulingTime,
	interval [3] SchedulingInterval
}

Flag ::= BOOLEAN

FourVT15 ::= SET OF ConnectionInfo

Fraction ::= INTEGER

FREQ ::= CHOICE {
	endPointsFreq EndPointsFREQ,
	freq Wavelengths
}

FromNE ::= BOOLEAN

GenTroubleTicket ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	userName AttrName,
	nmAlarm AlarmId,
	emAlarm EMAlarmId OPTIONAL,
	pathOrLink PathOrLinkId OPTIONAL
}

GetAggregatedNEState ::= SEQUENCE {
	reqId SmartReqIdtype,
	dummy NULL OPTIONAL
}

GetAggregatedNMStatus ::= SEQUENCE {
	reqId SmartReqIdtype,
	dummy NULL OPTIONAL
}

-- LS Provisioning Enhancement
MultipleCapacityRequest ::= SEQUENCE {
    numOfCapacityRequest   INTEGER,
	directionality         Directionality,
	snRole                 SNRole
}
-- LS Provisioning Enhancement

GetAGList ::= SEQUENCE {
	reqId                  SmartReqIdtype,
	userId                 AttrId,
	snId                   SNId           OPTIONAL,
	signalType             SignalType     OPTIONAL,
	sgLnType               SgLnType       OPTIONAL,
	uSNId                  SNId           OPTIONAL,
	pattern                AGName         OPTIONAL,
	sdhToo                 Flag           OPTIONAL,
	sonetToo               Flag           OPTIONAL,
	assignInfo             TPAssignInfo   OPTIONAL,
	restrictiveRoutingInfo Routing        OPTIONAL,
	vcgOnly                BOOLEAN        OPTIONAL,
	pathCmdType            PathCmdType    OPTIONAL,
	managementType         ManagementType OPTIONAL,
	multipleCapacityRequest MultipleCapacityRequest  OPTIONAL  -- LS Provisioning Enhancement
}

GetAnchorRoute ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	fromCtp CTPId OPTIONAL,
	lastCtps SetOfCTPId OPTIONAL,
	routing Routing
}

GetAutoLink ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	assignInfo LnAssignInfo,
	fromUSNId SNId,
	fromIsFirst BOOLEAN OPTIONAL,
	toUSNId SNId,
	toIsLast BOOLEAN OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	restorationType RestorationType OPTIONAL,
	pathStructFlag PathStructFlag OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	pathId PathId OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	bshrType BSHRType OPTIONAL,
	serverSDHProt BOOLEAN OPTIONAL,
	numOfCapacityRequest   INTEGER OPTIONAL       -- LS Provisioning Enhancement
}

GetAutoLinkConn ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	directionality Directionality,
	signalType SignalType,
	lnLinkId SmartResIdtype,
	fromUSNId SNId,
	fromIsFirst BOOLEAN OPTIONAL,
	toUSNId SNId,
	toIsLast BOOLEAN OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	restorationType RestorationType OPTIONAL,
	pathStructFlag PathStructFlag OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	pathId PathId OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	bshrType BSHRType OPTIONAL,
	serverSDHProt BOOLEAN OPTIONAL
}

GetAutoRingInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	msspringType MSSPRingType,
	signalType SignalType,
	ring Ring,
	extraTrfSupport BOOLEAN OPTIONAL
}

GetAutoRingLink ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	westSN       SNId,
	eastSN       SNId,
	msspringType MSSPRingType,
	dummy        NULL OPTIONAL
}

GetAutoRoute ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathId PathId OPTIONAL,
	signalType SignalType,
	pathType PathType,
	protType ProtType,
	pathStructFlag PathStructFlag OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	addProt AddProt OPTIONAL,
	routing Routing,
	restorationType RestorationType OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	pathGroup PathGroup OPTIONAL
}

GetBearerLinkConnList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	usnId SNId,
	cmdType CmdType OPTIONAL,
        signalType SignalType OPTIONAL
}

GetCardList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	userSNId SNId,
	linkIdentifier LinkIdentifier OPTIONAL
}

GetCircDisplay ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	displayOption DisplayOption,
	dummy         NULL OPTIONAL
}

DisplayLSPathObj ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	displayOption DisplayOption,
	dummy         NULL OPTIONAL
}

GetCircInPathList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathId PathId,
	signalType SignalType OPTIONAL,
	cmdType SwapCmdType OPTIONAL,
	protType ProtType OPTIONAL,
	operState OperState OPTIONAL,
	setOfPathType SetOfPathType OPTIONAL
}



GetCircList ::= SEQUENCE {
	reqId                         SmartReqIdtype,
	userId                        AttrId,
	resDomainId                   AttrId,
	resourcePatternFilter         GraphicString             OPTIONAL,
	pathStructFlagFilter          PathStructFlag            OPTIONAL,
	stateFilter                   SetOfState                OPTIONAL,
	signalTypeFilter              SetOfSignalType           OPTIONAL,
	protectionStateFilter         SetOfProtState            OPTIONAL,
	protectionTypeFilter          SetOfProtType             OPTIONAL,
	astnOperationalStateFilter    SetOfASTNOperationalState OPTIONAL,
	originalProtectionStateFilter SetOfProtState            OPTIONAL,
	astnCircuitTypeFilter         SetOfASTNCircuitType      OPTIONAL
}

GetCompleteTrailRouteInfo ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType OPTIONAL,
	routing    Routing,
	dummy      NULL       OPTIONAL
}

GetDefaultPreferences ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL OPTIONAL
}

GetEMAlarmHistory ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	tp TPId,
	from SchedulingTime OPTIONAL,
	to SchedulingTime OPTIONAL,
	maxNumber INTEGER
}

GetEMAlarmList ::= SEQUENCE {
	reqId     SmartReqIdtype,
	userId    AttrId,
	tps       SetOfTPs,
	maxNumber INTEGER,
	dummy     NULL OPTIONAL
}

GetEMInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	emId  SmartResIdtype,
	dummy NULL OPTIONAL
}

GetEMList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	connectionState EMState OPTIONAL,
	setOfUSNId SetOfSNId OPTIONAL,
	pattern Pattern OPTIONAL
}

RouteIdentifier ::= SEQUENCE {
	signalType SignalType,
	pathId PathId
}

SetOfRouteIdentifier ::= SET OF RouteIdentifier

GetFastAutoRoute ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	circuitType PathType OPTIONAL,
	routing Routing,
	protType ProtType OPTIONAL,
	routingReq RoutingRequirements OPTIONAL,
	routingPathInfo  RoutingPathInfo OPTIONAL,
	workerColour Colour OPTIONAL,
	protColour Colour OPTIONAL,
	disableSharing NULL OPTIONAL,
	routesToBeAvoided SetOfRouteIdentifier OPTIONAL
}

GetVC4CoreNEList ::= SEQUENCE {
	reqId     SmartReqIdtype,
	nePattern NEName,
	options   GetVC4CoreNEListOptions,
	dummy     NULL   OPTIONAL
}


-- these options tailor the default behaviour of the GetVC4CoreNEList message
GetVC4CoreNEListOptions ::= SEQUENCE {
	onlyRealNEs NULL OPTIONAL
}


GetVC4CoreTPList ::= SEQUENCE {
	reqId       SmartReqIdtype,
	neId        NEId,
	selectedTPs SetOfLRTTPId,
	obsoleteTP  LRTTPId OPTIONAL,	-- only present when requesting the replacement TP
	options     GetVC4CoreTPListOptions,
	dummy       NULL   OPTIONAL
}

-- these options tailor the default behaviour of the GetVC4CoreTPList message
GetVC4CoreTPListOptions ::= SEQUENCE {
	replacementTPMustNotHaveALink NULL OPTIONAL,
	replacementTPMustNotHaveXconns NULL OPTIONAL,
	obsoleteTPMustNotHaveFullyDiverseVC4Path NULL OPTIONAL,
	ignoreRuleAU4ShouldNotTerminateVC4Path NULL OPTIONAL,
	ignoreRuleNoContiguousConcatination NULL OPTIONAL,
	ignoreRuleReplacementTPMustNotHaveStructureVC4Paths NULL OPTIONAL,
	ignoreRuleDisallowNonBidiPathsCircuitsAndCrossConnections NULL OPTIONAL
}





RoutingRequirements ::= SEQUENCE {
	serverSDHProt BOOLEAN OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	srgDiversity BOOLEAN OPTIONAL

}

RoutingPathInfo ::= SEQUENCE {
    pathId PathId,
    isASTNManaged BOOLEAN OPTIONAL,-- used only for circuit audit
    isServerSDHProt BOOLEAN OPTIONAL
}

GetLegList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	path Paths,
	cmdType CmdType OPTIONAL
}

GetLinkConnList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	assignInfo LCAssignInfo OPTIONAL,
	lnLinkId SmartResIdtype,
	restorationType RestorationType OPTIONAL,
	concatenatedType ConcatenatedType OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	pathId PathId OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	cmdType CmdType OPTIONAL,
	springConfMod SpringConfModify OPTIONAL,
	restrictiveRoutingInfo Routing OPTIONAL,
	isForPath BOOLEAN OPTIONAL
}

GetLinkInfo ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	lnType   LnType,
	lnLinkId SmartResIdtype,
	dummy    NULL OPTIONAL
}

GetLnLinkList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	lnType LnType OPTIONAL,
	assignInfo LnAssignInfo OPTIONAL,
	fromUSNId SNId OPTIONAL,
	fromIsFirst BOOLEAN OPTIONAL,
	toUSNId SNId OPTIONAL,
	toIsLast BOOLEAN OPTIONAL,
	lnLinkPattern LinkPattern OPTIONAL,
	custDataPattern CustDataPattern OPTIONAL,
	operState OperState OPTIONAL,
	protType ProtType OPTIONAL,
	restorationType RestorationType OPTIONAL,
	pathStructFlag PathStructFlag OPTIONAL,
	isStructuring BOOLEAN OPTIONAL,
	concatenatedType ConcatenatedType OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	setOfUSNId SetOfSNId OPTIONAL,
	performed BOOLEAN OPTIONAL,
	pathId PathId OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	linkConnGroupType LinkConnGroupType OPTIONAL,
	cmdType PathCmdType OPTIONAL
}

GetLoggedUsersList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL OPTIONAL
}

GetLogicalTTPList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfUSNId SetOfSNId OPTIONAL,
	pattern TTPPattern OPTIONAL,
	maxNumber INTEGER
}

GetLogicalTTPName ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	ttp TTP,
	defaultFlag BOOLEAN OPTIONAL
}

GetM1400Name ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	fromUSNId SNId,
	toUSNId SNId,
	signalType SignalType,
	pathStructFlag PathStructFlag OPTIONAL
}

GetManualRingInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	msspringType MSSPRingType,
	signalType SignalType,
	ring Ring,
	extraTrfSupport BOOLEAN OPTIONAL
}

GetManualRouteInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathType PathType,
	protType ProtType,
	pathStructFlag PathStructFlag OPTIONAL,
	routing Routing,
	restorationType RestorationType OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	pathId PathId OPTIONAL,
	firstXcIsUnidir BOOLEAN OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	preemptFlag PreemptFlag OPTIONAL,
	pathGroup PathGroup OPTIONAL
}

GetSNId ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	setOfUSNId SetOfSNId,
	dummy      NULL OPTIONAL
}

GetMSSPRingInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfMSSPRingId SetOfMSSPRingId,
	cmdType MSSPRingCmdType OPTIONAL
}

GetMSSPRingList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfUSNId SetOfSNId,
	setOfMSSPRingState SetOfMSSPRingState OPTIONAL,
	msspringType MSSPRingType OPTIONAL,
	msspringPattern MSSPRingPattern OPTIONAL,
	custDataPattern CustDataPattern OPTIONAL,
	pathInfoMismatch PathInfoMismatch OPTIONAL,
	cmdType MSSPRingCmdType OPTIONAL
}

GetMSSPRingStatus ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	msspringId SmartResIdtype,
	usnId SNId OPTIONAL,
	isDisplay BOOLEAN OPTIONAL
}

GetMSSPRingSwitchCmd ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	usnId      SNId,
	msspringId SmartResIdtype,
	dummy      NULL OPTIONAL
}

GetNEEventList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userId           AttrId,
	setOfNEEventType SetOfNEEventType OPTIONAL,
	maxNumber        INTEGER,
	navigator        Navigator        OPTIONAL
}

GetNEList ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	neInstInfo  NEInstInfo,
	emId        SmartResIdtype OPTIONAL,
	nePattern   NEPattern      OPTIONAL,
	setOfSNType SetOfSNType    OPTIONAL,
	wantedTypes WantedTypes    OPTIONAL,
	navigator   Navigator      OPTIONAL
}

BatchFileInfo ::= SEQUENCE {
	filename  GraphicString,
	separator GraphicString
}

GetNMAlarmHistory ::= SEQUENCE {
	reqId           SmartReqIdtype,
	userId          AttrId,
	resDomainId     AttrId,
	setOfPathState  SetOfPathState    OPTIONAL,
	pathStructFlag  PathStructFlag    OPTIONAL,
	signalType      SetOfSignalType   OPTIONAL,
	extLnType       SetOfExtLnType    OPTIONAL,
	protType        SetOfProtType     OPTIONAL,
	alState         SetOfAlState      OPTIONAL,
	severity        SetOfSeverity     OPTIONAL,
	setOfNEId       SetOfNEId         OPTIONAL,
	pathPattern     PathPattern       OPTIONAL,
	custDataPattern CustDataPattern   OPTIONAL,
	from            SchedulingTime    OPTIONAL,
	to              SchedulingTime    OPTIONAL,
	serviceState    SetOfServiceState OPTIONAL,
	maxNumber       INTEGER,
	batchMode       NULL              OPTIONAL,
	batchInfo       BatchFileInfo     OPTIONAL
}

GetNMAlarmList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	resDomainId AttrId,
	setOfPathState SetOfPathState OPTIONAL,
	pathStructFlag PathStructFlag OPTIONAL,
	signalType SetOfSignalType OPTIONAL,
	extLnType SetOfExtLnType OPTIONAL,
	protType SetOfProtType OPTIONAL,
	alState SetOfAlState OPTIONAL,
	severity SetOfSeverity OPTIONAL,
	setOfNEId SetOfNEId OPTIONAL,
	pathPattern PathPattern OPTIONAL,
	custDataPattern CustDataPattern OPTIONAL,
	serviceState SetOfServiceState OPTIONAL,
	maxNumber INTEGER,
	netAlarmState NULL OPTIONAL
}

UpdateCircuit ::= SEQUENCE {
   circuitIdentifier CircuitIdentifier,
   inStatus          CircuitStatus,
   egStatus          CircuitStatus,
   netError          NetError OPTIONAL,
   currentLspId      INTEGER OPTIONAL
}

SetOfUpdateCircuits ::= SET OF UpdateCircuit

UpdateCircuits ::= SEQUENCE {
	reqId               SmartReqIdtype,
	setOfUpdateCircuits SetOfUpdateCircuits,
	dummy               NULL OPTIONAL
}

GetNMCorrelate ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	resDomainId    AttrId,
	resourceId PathOrLink,
	maxNumber INTEGER,
	pathStructFlag PathStructFlag OPTIONAL,
	signalType SetOfSignalType OPTIONAL,
	serviceState SetOfServiceState OPTIONAL,
        extLnType SetOfExtLnType OPTIONAL
}

GetAllRootCauseAlarmList ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	resDomainId AttrId,
	path        Paths,
	dummy       NULL OPTIONAL
}

GetNodePortsInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId      AttrId,
	neId  NEId,
	portCoord    PortCoord  OPTIONAL,
	portType     PortType   OPTIONAL,
	tpRole       TPRole     OPTIONAL,
	dummy NULL OPTIONAL
}

GetObjResDomain ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	attrList IdAttrObjResDomain OPTIONAL,
	objFilter ObjResDomain OPTIONAL
}

GetObjSNC ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	attrList IdAttrObjSNC OPTIONAL,
	objFilter ObjSNC OPTIONAL
}

GetObjThreshold ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	attrList IdAttrObjThreshold OPTIONAL,
	objFilter ObjThreshold OPTIONAL
}

GetObjTrail ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	attrList IdAttrObjTrail OPTIONAL,
	objFilter ObjTrail OPTIONAL
}

GetObjTrailTrace ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	attrList IdAttrObjTrailTrace OPTIONAL,
	objFilter ObjTrailTrace OPTIONAL
}

GetObjUsersGroup ::= SEQUENCE {
	reqId SmartReqIdtype,
	attrList IdAttrObjUsersGroup OPTIONAL,
	objFilter ObjUsersGroup OPTIONAL
}

GetPathInfo ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	setOfPaths SetOfPaths,
	dummy      NULL OPTIONAL
}

GetPathList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	-- setOfPathState SetOfPathState OPTIONAL,
	pathStructFlag PathStructFlag OPTIONAL,
	optPathFlag BOOLEAN OPTIONAL,
	signalType SignalType OPTIONAL,
	protType ProtType OPTIONAL,
	operState OperState OPTIONAL,
	pathPattern PathPattern OPTIONAL,
	custDataPattern CustDataPattern OPTIONAL,
	setOfPathType SetOfPathType OPTIONAL,
	swappableOnly SwappableOnly OPTIONAL,
	scheduled BOOLEAN OPTIONAL,
	setOfUSNId SetOfSNId OPTIONAL,
	performed BOOLEAN OPTIONAL,
	cmdType PathCmdType OPTIONAL,
	linkIdentifier LinkIdentifier OPTIONAL,
	pathsToSplit BOOLEAN OPTIONAL,
	serviceState ServiceState OPTIONAL,
	pathGroup PathGroup OPTIONAL
}

PathCmdType ::= ENUMERATED {
	addProt        (1),
	activate       (2),
	activateProt   (3),
	deactivate     (4),
	deactivateProt (5),
	activateLeg    (6),
	deactivateLeg  (7),
	modify         (8),
	modifyProt     (9),
	secure         (10),
	secureProt     (11),
	unsecure       (12),
	unsecureProt   (13),
	remove         (14),
	removeProt     (15),
	disassociate   (16),
	workingSide    (17),
	swap           (18),
	setCTT         (19),
	reset          (20),
	serviceState   (21),
	performanceMgmt(22),
	addScanner     (23),
	details        (24),
	reserved       (25),
	unreserved     (26),
	restore        (27),
	normalize      (28),
	activateWork   (29),
	enableASTN     (30),
	disableASTN    (31),
	add            (32),
	addTandem      (33)
}

--INIT LP Sprint5 TRUS03M1A
LCConstraint ::= ENUMERATED {
        undefined       (0),
        notLCterminated (1)
}
--END LP Sprint5 TRUS03M1A

GetPerfNumbers ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL OPTIONAL
}

GetPerfReport ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	fileName GraphicString OPTIONAL,
	pathLinkList PathLinkList OPTIONAL,
	sgLnType SgLnType OPTIONAL,
	granularity Granularity,
	from SchedulingTime OPTIONAL,
	to SchedulingTime OPTIONAL,
	measures SetOfMeasures,
	fromNE FromNE OPTIONAL
}

GetPhysicalTTPName ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	ttp    TTP,
	dummy  NULL OPTIONAL
}

GetPortList ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	usnId          SNId,
	agId           AGId           OPTIONAL,
	signalType     SignalType     OPTIONAL,
	portType       PortType       OPTIONAL,
	directionality Directionality OPTIONAL,
	snRole         SNRole         OPTIONAL,
	vcgOnly        BOOLEAN        OPTIONAL,
	managementType ManagementType OPTIONAL,
	cmdType        CmdType        OPTIONAL,  -- In the AddTrailTool needs
        vcgBusy        BOOLEAN        OPTIONAL   -- to be set to:
                                                 -- CmdType::addCircuit
}

GetProfiledTrails ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	sgLnType SgLnType,
	granularity Granularity,
	pattern Pattern OPTIONAL,
	measure Measure
}

GetRHTrace ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	neId          NEId,
	offset        Offset,
	numberOfLines NumberOfLines,
	dummy         NULL OPTIONAL
}

GetScannerInfo ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	scanners SetOfScanner,
	dummy    NULL OPTIONAL
}

GetScannerList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	sgLnType SgLnType,
	pathOrLink PathOrLinkId OPTIONAL,
	granularity Granularity OPTIONAL,
	fltCreaD FilterTime OPTIONAL,
	fltStartT FilterTime OPTIONAL,
	fltEndT FilterTime OPTIONAL,
	notePattern StringValuePattern OPTIONAL,
	namePattern StringValuePattern OPTIONAL
}

GetSdhStructure ::= SEQUENCE {
	reqId          SmartReqIdtype,
	connectivityId ConnectivityId,
	dummy          NULL OPTIONAL
}

GetSigLnTypeMeasures ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	sgLnType SgLnType,
	dummy    NULL OPTIONAL
}

GetSNCList ::= SEQUENCE {
	reqId                  SmartReqIdtype,
	userId                 AttrId,
	setOfSignalType        SetOfSignalType,
	assignInfo             SNCAssignInfo     OPTIONAL,
	setOfSNCType           SetOfSNCType      OPTIONAL,
	setOfCardInvolved      SetOfCardInvolved OPTIONAL,
	usnId                  SNId,
	pattern                Pattern           OPTIONAL,
	preemptFlag            PreemptFlag       OPTIONAL,
	restrictiveRoutingInfo Routing           OPTIONAL,
	isForPath              BOOLEAN           OPTIONAL,
	tandemConnection       BOOLEAN           OPTIONAL,
	tandemPathId           PathId            OPTIONAL
}

GetSNContents ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	usnId SNId OPTIONAL,
	pattern Pattern OPTIONAL,
	signalType SignalType OPTIONAL,
	msspringType MSSPRingType OPTIONAL
}

GetSNInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	usnId  SNId,
	userId AttrId,
	dummy  NULL OPTIONAL
}

GetSNInLink ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	lnType LnType,
	assignInfo LnAssignInfo OPTIONAL,
	fromUSNId SNId,
	pattern Pattern OPTIONAL
}

GetSNList ::= SEQUENCE {
	reqId               SmartReqIdtype,
	userId              AttrId,
	layer               Layer         OPTIONAL,
	snPatternName       SNPatternName OPTIONAL,
	setOfSNType         SetOfSNType   OPTIONAL,
	wantedTypes         WantedTypes   OPTIONAL,
	loSupportInfoWanted BOOLEAN       OPTIONAL,
	allLayersWanted     BOOLEAN       OPTIONAL,
	fromSystemAdmin     BOOLEAN       OPTIONAL,
	connectedToSnId     SNId          OPTIONAL
}

GetSonetStructure ::= SEQUENCE {
	reqId          SmartReqIdtype,
	connectivityId ConnectivityId,
	dummy          NULL OPTIONAL
}

GetSupportingTPList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	sgLnType   SgLnType,
	pathOrLink PathOrLinkId,
	dummy      NULL OPTIONAL
}

GetTPRouting ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	tpRouting  Routing,
	routeByTP  BOOLEAN,
	isVc4Path  BOOLEAN,
	signalType SignalType,
	dummy      NULL OPTIONAL
}

GetTrailList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	lnType LnType,
	setOfUSNId SetOfSNId OPTIONAL,
	setOfTPId SetOfTPIds OPTIONAL,
	trailPattern Pattern OPTIONAL,
	performed BOOLEAN OPTIONAL
}

GetTree ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	layer  Layer,
	dummy  NULL OPTIONAL
}

GetTTPList ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	agId AGId,
	assignInfo TPAssignInfo OPTIONAL,
	sgLnType SgLnType OPTIONAL,
	signalType SignalType,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	settingLogName BOOLEAN OPTIONAL,
	misalignedLogName Flag OPTIONAL,
	clientTrType ClientTrType OPTIONAL,
	cmdType CmdType OPTIONAL
}

GetUserInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL   OPTIONAL
}

GetUserLinkDetails ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	userLinkId UserLinkId,
	dummy      NULL   OPTIONAL
}

GetUserList ::= SEQUENCE {
	reqId SmartReqIdtype,
	type UserListType,
	pattern Pattern OPTIONAL,
	defaultFlag BOOLEAN OPTIONAL
}

GetUserProfileInfo ::= SEQUENCE {
	reqId              SmartReqIdtype,
	setOfUserProfileId SetOfUserProfileId,
	dummy              NULL   OPTIONAL
}

GetUserProfileList ::= SEQUENCE {
	reqId SmartReqIdtype,
	defaultFlag BOOLEAN OPTIONAL,
	freeFlag BOOLEAN OPTIONAL,
	pattern Pattern OPTIONAL
}

GetViewList ::= SEQUENCE {
	reqId SmartReqIdtype,
	dummy NULL   OPTIONAL
}

GetWorkingSide ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	pathId     PathId,
	dummy      NULL   OPTIONAL
}

GetLSPathObjWorkingSide ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	pathId     PathId,
	dummy      NULL   OPTIONAL
}

Granularity ::= ENUMERATED {
	g15min(0),
	g24h(1)
}

GTPInfo ::= SEQUENCE {
	snId SNId OPTIONAL,
	gtpId TTPRelId OPTIONAL,
	shelfId INTEGER OPTIONAL,
	cardId INTEGER OPTIONAL,
	portId INTEGER OPTIONAL,
	setOfKlm SetOfKLM OPTIONAL,
	containedTP SetOfTTPId OPTIONAL,
	tpName TPName OPTIONAL
}

VCGInfo ::= SEQUENCE {
	snId    SNId     OPTIONAL,
	vcgId   TTPRelId OPTIONAL,
	shelfId INTEGER  OPTIONAL,
	cardId  INTEGER  OPTIONAL,
	portId  INTEGER  OPTIONAL,
	tpName  TPName   OPTIONAL
}

Hostname ::= GraphicString

Hour ::= INTEGER

Id ::= INTEGER

IdAttrDirectionality ::= NULL

IdAttrId ::= NULL

IdAttrLnType ::= NULL

IdAttrName ::= NULL

IdAttrObjResDomain ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL,
	userName IdAttrName OPTIONAL,
	creationTime IdAttrTime OPTIONAL,
	usersGroup IdAttrRefUsersGroup OPTIONAL,
	tp IdAttrRefTermPoint OPTIONAL,
	path IdAttrRefPath OPTIONAL,
	linkConn IdAttrRefLinkConn OPTIONAL
}

IdAttrObjSNC ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL
}

IdAttrObjThreshold ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL,
	userName IdAttrName OPTIONAL,
	creationTime IdAttrTime OPTIONAL,
	measures IdSetOfMeasures OPTIONAL,
	granularity IdGranularity OPTIONAL,
	values IdSetOfThrName OPTIONAL
}

IdAttrObjTrail ::= SEQUENCE {
	trailName IdAttrName OPTIONAL,
	trailId IdAttrId OPTIONAL,
	trailType IdAttrType OPTIONAL,
	direction IdAttrDirectionality OPTIONAL
}

IdAttrObjTrailTrace ::= SEQUENCE {
	trailName IdAttrName OPTIONAL,
	aEnd IdAttrName OPTIONAL,
	zEnd IdAttrName OPTIONAL,
	aEndSend IdAttrName OPTIONAL,
	aEndExpected IdAttrName OPTIONAL,
	zEndSend IdAttrName OPTIONAL,
	zEndExpected IdAttrName OPTIONAL,
	aEndTrailTrace IdAttrName OPTIONAL,
	zEndTrailTrace IdAttrName OPTIONAL,
	aEndReceived IdAttrName OPTIONAL,
	zEndReceived IdAttrName OPTIONAL,
	state IdAttrState OPTIONAL
}

IdAttrObjUsersGroup ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL,
	userName IdAttrName OPTIONAL,
	creationTime IdAttrTime OPTIONAL,
	funcProfile IdAttrRefUserProfile OPTIONAL,
	resDomain IdAttrRefResDomain OPTIONAL,
	view IdAttrRefView OPTIONAL,
	contResDomains IdAttrRefResDomain OPTIONAL
}

IdAttrRefLinkConn ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	lnType IdAttrLnType OPTIONAL,
	linkid IdAttrId OPTIONAL,
	linkconnid IdAttrId OPTIONAL
}

IdAttrRefPath ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	lnType IdAttrLnType OPTIONAL,
	id IdAttrId OPTIONAL
}

IdAttrRefResDomain ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL
}

IdAttrRefTermPoint ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	lnType IdAttrLnType OPTIONAL,
	snid IdAttrId OPTIONAL,
	tpid IdAttrId OPTIONAL
}

IdAttrRefUserProfile ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL
}

IdAttrRefUsersGroup ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL
}

IdAttrRefView ::= SEQUENCE {
	name IdAttrName OPTIONAL,
	id IdAttrId OPTIONAL
}

IdAttrState ::= NULL

IdAttrTime ::= NULL

IdAttrType ::= NULL

Identifier ::= INTEGER

IdGranularity ::= NULL

IdObjResDomain ::= NULL

IdRefLinkConn ::= NULL

IdRefPath ::= NULL

IdRefTermPoint ::= NULL

IdSetOfMeasures ::= NULL

IdSetOfThrName ::= NULL

IncludeSN ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	usnParentId SNId,
	setOfUSNIdtoBeIncluded SetOfSNId,
	allLayers BOOLEAN OPTIONAL
}

InfoReplay ::= CHOICE {
	acknowledge Acknowledge,
	fault Fault
}

InsertSNInLink ::= SEQUENCE {
	reqId              SmartReqIdtype,
	userId             AttrId,
	snId               SNId,
	linkIdentifier     LinkIdentifier,
	ttpIdA             TTPId,
	ttpIdB             TTPId,
	vc4PathsToBeSplit  SetOfPathId,
	sts1PathsToBeSplit SetOfPathId,
	dummy              NULL   OPTIONAL
}

FlushAsyncPolicy ::= ENUMERATED {
	send    (1),
	cache   (2),
	disable (3)
}



InstallNE ::= SEQUENCE {
	reqId            SmartReqIdtype,
	nes              SetOfNE_SN,
	userId           AttrId,
	usnParentId      SNId,
	flushAsyncPolicy FlushAsyncPolicy OPTIONAL,
	getPhysicalData  NULL             OPTIONAL
}

AbortNEmanagement ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userIdToAbort    AttrId,
	dummy            NULL   OPTIONAL
}

IntegrTime ::= INTEGER

IntValue ::= INTEGER

IntValuePattern ::= IntValue

IPaddress ::= GraphicString

IsArea ::= BOOLEAN

JobProf ::= SEQUENCE {
	schedule PerfTypeProf OPTIONAL,
	details PerfTypeProf OPTIONAL,
	modify PerfTypeProf OPTIONAL,
	abort PerfTypeProf OPTIONAL,
	del PerfTypeProf OPTIONAL
}

ODUTimeSlot ::= SEQUENCE {
	odu    ODU,
	sdhKLM SDHKLM OPTIONAL,
	timeSlotId TimeSlotId OPTIONAL
}

KLM ::= CHOICE {
	sdhKLM   SDHKLM,
	sonetKLM SONETKLM
}

PortCoord ::= SEQUENCE {
	shelfId INTEGER,
	cardId  INTEGER,
	portId  INTEGER,
        tpRole  TPRole OPTIONAL
}

Label ::= GraphicString

LabelPortCoord ::= SEQUENCE {
	portCoord PortCoord,
	label     Label
}

--NUOVA VERSIONE DI LABELTP
--LabelTP ::= SEQUENCE {
--	neId           INTEGER,
--	labelPortCoord LabelPortCoord
--}

LabelTP ::= SEQUENCE {
	neId    INTEGER,
	shelfId INTEGER,
	cardId  INTEGER,
	portId  INTEGER,
	label   Label
}

LabelTPs ::= SET OF LabelTP

Layer ::= ENUMERATED {
	ph      (1),
	rs      (2),
	msMsp   (3),
	hop     (4),
	lop     (5),
	ots     (6),
	omsOmsp (7),
	och     (8),
	otu     (9),
	odu1    (10),
	odu2    (11),
	odu3    (12),
	odu0    (13)
}

LayerInfo ::= SEQUENCE {
	usnId SNId,
	parent SNId,
	snCoord SNCoord,
	snState SNState
}

LCAssignInfo ::= SEQUENCE {
	directionality Directionality,
	fromUSNId SNId,
	toUSNId SNId
}

LCAssignState ::= SEQUENCE {
	txAssignState AssignState,
	rxAssignState AssignState
}

Leg ::= SEQUENCE {
	tp TP,
	snName SNName
}

LegProf ::= SEQUENCE {
	add Flag,
	deactivate Flag,
	remove Flag
}

LegXCProf ::= SEQUENCE {
	add Flag,
	remove Flag
}

Link ::= SEQUENCE {
	linkName LinkName,
	linkId SmartResIdtype
}

LinkClientType ::= ENUMERATED {
	unprotected(1),
	worker(2),
	protection(3),
	workAndProt(4)
}

LinkConn ::= SEQUENCE {
	linkConnName   LinkConnName,
	linkConnId     LinkConnId,
	operState      OperState,
	lcAssignState  LCAssignState,
	pathId         PathId          OPTIONAL,
	bshrType       BSHRType        OPTIONAL,
	linkName       LinkName        OPTIONAL,
	aEndPoint      AccessPoint     OPTIONAL,
	zEndPoint      AccessPoint     OPTIONAL,
	structuredFlag StructuredFlag  OPTIONAL,
	reverseTPs     NULL            OPTIONAL
}

LinkConnCounters ::= SEQUENCE {
	freeLinkConn AttrId,
	freeTxLinkConn AttrId,
	freeRxLinkConn AttrId,
	normalLinkConn AttrId,
	warnedLinkConn AttrId,
	alarmedLinkConn AttrId
}

LinkConnGroupType::= ENUMERATED {
	sts3c   (1),
	sts12c  (2),
	sts21c  (3),
	sts48c  (4),
	sts192c (5),
	sts768c (6)
}

LinkConnId ::= SEQUENCE {
	lnLinkId SmartResIdtype,
	linkConnId LinkConnRelId
}

PathOnLinkInfo ::= SEQUENCE {
	pathName      PathName,
	pathOperState OperState OPTIONAL
}

SetOfPathOnLinkInfo ::= SET OF PathOnLinkInfo

PathsOnLink ::= SEQUENCE {
	setOfCircuits SetOfPathOnLinkInfo OPTIONAL,
	setOfPaths    SetOfPathOnLinkInfo OPTIONAL
}

LinkConnInfo ::= SEQUENCE {
	signalType SignalType,
	linkConnName LinkConnName,
	linkConnOperState OperState,
	pathName PathName OPTIONAL,
	pathOperState OperState OPTIONAL,
	pathStructFlag PathStructFlag OPTIONAL,
	pathsOnLink PathsOnLink OPTIONAL,
	bshrType BSHRType OPTIONAL,
	linkOptData LinkOptData OPTIONAL
}

LinkConnName ::= GraphicString

LinkConnProf ::= SEQUENCE {
	addvc2_5c Flag,
	addvc4_4c Flag,
	addsts3c Flag,
	addsts12c Flag,
	addsts21c Flag,
	addsts48c Flag,
	addsts192c Flag,
	addsts768c Flag,
	remove Flag
}

LinkConnRelId ::= Identifier

LinkCreated ::= SEQUENCE {
	userId AttrId,
	link   Links,
	dummy  NULL   OPTIONAL
}

LinkData ::= SEQUENCE {
	linkName LinkName,
	phTrailId SmartResIdtype,
	weight Weight OPTIONAL,
	hopWeight Weight OPTIONAL, -- TO BE REMOVED
	customerData CustomerData OPTIONAL
}

LinkDefault ::= SEQUENCE {
	weight Weight,
	hopWeight Weight, -- TO BE REMOVED
	sdhStructure AU4Info,
	sonetStructure STS1Info,
	lopWeight Weight, -- TO BE REMOVED
	hopRestSideWeight Weight, -- TO BE REMOVED
	hopNormSideWeight Weight, -- TO BE REMOVED
	occupancyThreshold INTEGER,
	wmFactor INTEGER,
	aCoeff WeightCoeff,    -- TO BE REMOVED
	bCoeff WeightCoeff,    -- TO BE REMOVED
	manageAIS ManageAIS,
	supportTSI SupportTSI,
	ochWeight Weight,
	colour Colour,
	setOfSRG SetOfSRG
}

LinkId ::= Identifier

LinkIdentifier ::= SEQUENCE {
	lnType LnType,
	lnLinkId SmartResIdtype
}

AstnLinkInfo ::= SEQUENCE {
	reservationResources ReservationType   OPTIONAL, -- Not Used any more
	linkClusterInfo      LinkClusterInfo   OPTIONAL,
	linkComponentInfo    LinkComponentInfo OPTIONAL
}

LinkInfo ::= SEQUENCE {
	linkName             LinkName          OPTIONAL,
	userName             AttrName          OPTIONAL,
	creationDate         UnixTime          OPTIONAL,
	operState            OperState         OPTIONAL,
	linkType             LinkType          OPTIONAL,
	snNameFrom           SNName            OPTIONAL,
	snNameTo             SNName            OPTIONAL,
	phTTPNameFrom        TTPName           OPTIONAL,
	phTTPNameTo          TTPName           OPTIONAL,
	channelNumber        ChannelNumber     OPTIONAL,
	setOfLinkConnInfo    SetOfLinkConnInfo OPTIONAL,
	weight               Weight            OPTIONAL,
	customerData         CustomerData      OPTIONAL,
	fraction             Fraction          OPTIONAL,
	adminState           AdminState        OPTIONAL,
	manageAIS            ManageAIS         OPTIONAL,
	supportTSI           SupportTSI        OPTIONAL,
	trailTrace           ObjTrailTrace     OPTIONAL,
	msspringName         MSSPRingName      OPTIONAL,
	wdm                  Wdm               OPTIONAL,
	channels             INTEGER           OPTIONAL,
	linkOptData          LinkOptData       OPTIONAL,
	colour               Colour            OPTIONAL,
	setOfSRG             SetOfSRG          OPTIONAL,
	associatedLinks      SetOfLinkName     OPTIONAL,
	associatedNEs        SetOfSNName       OPTIONAL,
	astnInfo             AstnLinkInfo      OPTIONAL,
        maxChNumber          ChannelNumber     OPTIONAL,
	cardModeInfo	     CardModeInfo      OPTIONAL
}

CardModeInfo ::= SEQUENCE {
	cardModeFrom	CardMode   OPTIONAL,
	cardModeTo	CardMode   OPTIONAL
}

CardMode ::= ENUMERATED {
	ptp	     (1),
	sfp	     (2)
}

LinkList ::= SEQUENCE {
	lnType LnType,
	links SetOfLink,
	restorationType RestorationType OPTIONAL
}

LinkName ::= GraphicString

SetOfLinkName ::= SET OF LinkName

LinkOptData ::= SEQUENCE {
	clientTrType CTT OPTIONAL,
	digWrapper DW OPTIONAL,
	freq FREQ OPTIONAL
}

LinkOrLinkConnId ::= SEQUENCE {
	linkIdentifier LinkIdentifier,
	linkConnRelId LinkConnRelId OPTIONAL
}

LinkPattern ::= GraphicString

LinkProf ::= SEQUENCE {
	add Flag,
	def Flag,
	modify Flag,
	insertSN Flag,
	remove Flag
}

LinkRestored ::= SEQUENCE {
	resource PathOrLinkToRest,
	circuits SetOfCircInfo
}

Links ::= SEQUENCE {
	linkName LinkName,
	linkId SmartResIdtype,
	lnType LnType
}

LinkType ::= ENUMERATED {
	stm1              (1),
	stm4              (2),
	stm16             (3),
	stm64             (4),
	stm256            (5),
	opt               (6),
	subStm1           (7),
	partiallyUpgraded (8),
	intraDomain       (9),
	interDomain       (10),
	wdm               (11),
	otm               (12),
	pdh               (13),
	radio             (14),
	pdhBackplane      (15),
        cbr               (16)
}

ListOfCircuits ::= CHOICE {
	circuits SetOfCircuits,
	fault Fault
}

ListOfTPs ::= CHOICE {
	tps SetOfTPs,
	fault Fault
}

LnAssignInfo ::= SEQUENCE {
	directionality Directionality,
	signalType SignalType OPTIONAL
}

LnLink ::= SEQUENCE {
	linkName LinkName,
	linkId SmartResIdtype,
	operState OperState
}

LnLinkCouple ::= SEQUENCE {
	worker LnLink,
	protection LnLink OPTIONAL,
	failed Failed OPTIONAL
}

LnLinkId ::= Identifier

LnLinkName ::= GraphicString

LnType ::= ENUMERATED {
	lnPh   (1),
	lnRs   (2),
	lnMs   (3),
	lnMsp  (4),
	lnHop  (5),
	lnLop  (6),
	lnOts  (7),
	lnOms  (8),
	lnOmsp (9),
	lnOch  (10),
	lnOtu  (11),
	lnOdu1 (12),
	lnOdu2 (13),
	lnOdu3 (14),
	lnCbr  (15),
    lnOdu0 (16)
}

Location ::= GraphicString

LockedIcons ::= BOOLEAN

LoggedUser ::= SEQUENCE {
	userId AttrId,
	userName AttrName,
	host Hostname,
	userGroupName AttrName,
	loginTime UnixTime
}

LoggedUsersModif ::= SEQUENCE {
	user     LoggedUser,
	logState LogState,
	dummy    NULL   OPTIONAL
}

LogicalSnc ::= SEQUENCE {
	userId AttrId,
	sncId SNCId,
	signalType SignalType
}

Login ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userName         AttrName,
	password         Password,
	host             Hostname OPTIONAL,
	desktopReconnect BOOLEAN  OPTIONAL,
	desktopPriority  BOOLEAN  OPTIONAL,
	guiOnPC          BOOLEAN  OPTIONAL,
	enableKeepAlive  BOOLEAN  OPTIONAL
}

Logout ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	lockedIcons LockedIcons,
	mapWidth    Dimension,
	mapHeight   Dimension,
	dummy       NULL   OPTIONAL
}

LogProf ::= SEQUENCE {
	browse Flag
}

LogState ::= ENUMERATED {
	login(1),
	logout(2)
}

LogTTP ::= SEQUENCE {
	ttpLogName TTPName,
	ttp TTP
}

LongNEName ::= GraphicString

LongSNName ::= GraphicString

M1400Name ::= GraphicString

ManageAIS ::= BOOLEAN

ManagedVSNInfo ::= SEQUENCE {
	ipAddress IPaddress OPTIONAL,
	managedVSNType ManagedVSNType OPTIONAL
}

ManagedVSNLogin ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	uSNId   SNId,
	display GraphicString,
	dummy   NULL   OPTIONAL
}

ManagedVSNType ::= CHOICE {
	single NULL,
	multiple NULL
}

MapFile ::= GraphicString

MessageDescriptor ::= SEQUENCE {
	mdKind  MessageKind,
	mdReport INTEGER OPTIONAL
}

MessageKind ::= ENUMERATED {
	mdSet (1),
	mdGet (2),
	mdReport (3),
	mdAsynch (4)
}

MeasInfo ::= SEQUENCE {
	neName NEName,
	measures SetOfMeasures
}

Measure ::= ENUMERATED {
	aU4Rx_AUPJ(0),
	rSNearEnd_B1(1),
	mSNearEnd_B2(2),
	mSFarEnd_M1(3),
	vC4FarEnd_HOPF(4),
	vC4NearEnd_B3(5),
	vC3FarEnd_HOPF(6),
	vC3NearEnd_B2(7),
	vC12FarEnd_LOPF(8),
	vC12NearEnd_V5(9),
	aU4Tx_AUPJ(10),
	pDH2MbCRC4NE(11),
	pDH2MbbitEFE(12),
	pDHNearEnd_FAWE(13),
	vC2_5CNearEnd(14),
	vC2FarEnd(15),
	vC2NearEnd(16),
	ochNearEnd(17),
	ochFarEnd(18),
	oduNearEnd(19),
	oduFarEnd(20),
	otuNearEnd(21),
	otuFarEnd(22),
	otuOOBFEC(23)
}

MeasureNote ::= GraphicString

MgmtProf ::= SEQUENCE {
	alarm AlarmProf OPTIONAL,
	emAlarm Flag,
	neState NEStateProf OPTIONAL,
	perform PerformProf OPTIONAL,
	restor RestorProf OPTIONAL,
	trace TraceProf OPTIONAL
}

Minute ::= INTEGER

ModCircList ::= SEQUENCE {
	userId   AttrId,
	circuits SetOfCircInfo,
	dummy    NULL   OPTIONAL
}

ModEMAlarmList ::= SEQUENCE {
	userId           AttrId,
	alarms           SetOfEMAlarm,
	listNotCompleted BOOLEAN,
	dummy            NULL   OPTIONAL
}

ModifiedArea ::= SEQUENCE {
	userId AttrId,
	areaId AreaId,
	label  GraphicString,
	dummy  NULL   OPTIONAL
}

ModifiedNE ::= SEQUENCE {
	userId     AttrId,
	modifiedNE SetOfNEs,
	dummy      NULL   OPTIONAL
}

ModifiedPC ::= SEQUENCE {
	userId  AttrId,
	setOfPC SetOfPC,
	dummy   NULL   OPTIONAL
}

ModifiedSnc ::= SEQUENCE {
	setOfLogicalSnc SetOfLogicalSnc,
	dummy           NULL   OPTIONAL
}

ModifyGroupTP ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	usnId SNId,
	agId AGId,
	name AGName OPTIONAL,
	setOfModifiedName SetOfPort OPTIONAL,
	setOfRemovedPort SetOfPort OPTIONAL,
	setOfAddedPort SetOfPort OPTIONAL
}

ModifyLink ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	lnLinkId SmartResIdtype,
	lnType   LnType,
	linkInfo LinkInfo,
	dummy    NULL   OPTIONAL
}

ModifyMeasure ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	scannerInfo ScannerInfo,
	dummy       NULL   OPTIONAL
}

ModifyMSSPRing ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	msspringId SmartResIdtype,
	msspringName MSSPRingName OPTIONAL,
	customerData CustomerData OPTIONAL,
	bshrType BSHRType OPTIONAL,
	configAck BOOLEAN OPTIONAL
}

ModifyNutChannels ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	springConfMod SpringConfModify,
	setOfLinkConn SetOfLinkConn,
	dummy         NULL   OPTIONAL
}

ModifyPath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathId PathId,
	revertive Revertive OPTIONAL,
	switchType SwitchType OPTIONAL,
	pathName PathName OPTIONAL,
	customerData CustomerData OPTIONAL,
	protType ProtType OPTIONAL,
	priority Priority OPTIONAL,
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL,
	resetNameOnEM BOOLEAN OPTIONAL,
	serviceState ServiceState OPTIONAL,
	colour Colour OPTIONAL,
	srgDiversity BOOLEAN OPTIONAL,
	pathGroup PathGroup OPTIONAL,
        protOperationalMode ProtOperMode OPTIONAL
}

ModifySetOfPaths ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfPaths SetOfPaths,
	serviceState ServiceState OPTIONAL
}

ModifySN ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	usnId SNId,
	snName SNName,
	mapFile MapFile OPTIONAL,
	snType SNType OPTIONAL,
	snCoord SNCoord,
	allLayers BOOLEAN OPTIONAL
}

ModifyUser ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	usersGroup AttrId,
	timeWindow WeeklyTimeWindow,
	dummy      NULL   OPTIONAL
}

ModifyUserProfile ::= SEQUENCE {
	reqId           SmartReqIdtype,
	userProfileName AttrName,
	userProfileId   AttrId,
	accessRights    AccessRights,
	dummy           NULL   OPTIONAL
}

ModNEEventList ::= SEQUENCE {
	userId           AttrId,
	neEvents         SetOfNEEvent,
	listNotCompleted BOOLEAN,
	dummy            NULL   OPTIONAL
}

ModNMAlarmList ::= SEQUENCE {
	userId AttrId,
	alarms SetOfNMAlarm,
	alCount NMAlarmCounters OPTIONAL,
	alCountFiltered NMAlarmCounters OPTIONAL,
	listNotCompleted BOOLEAN
}

ModPerfNumbers ::= SEQUENCE {
	userId      AttrId,
	perfNumbers PerfNumbers,
	dummy       NULL   OPTIONAL
}

Month ::= INTEGER

MonthDay ::= INTEGER

MoreInfo ::= GraphicString


MsgGetCreateGMPLSPathInfo MESSAGE GetCreateGMPLSPathInfo  ::= 528
	FROM UI
	TO ACAH,CH

md_MsgGetCreateGMPLSPathInfo MessageDescriptor ::= {mdKind 2,mdReport 529 }

MsgGetGMPLSDetails MESSAGE GetGMPLSDetails  ::= 526
	FROM UI
	TO GMPLS,CH

md_MsgGetGMPLSDetails MessageDescriptor ::= {mdKind 2,mdReport 527 }

MsgGetObjPath MESSAGE GetObjPath ::= 3214
	FROM	UI
	TO	CH

md_MsgGetObjPath MessageDescriptor ::= { mdKind 2,mdReport 3215 }

MsgSetObjPath MESSAGE SetObjPath ::= 3216
	FROM	UI
	TO	CH

md_MsgSetObjPath MessageDescriptor ::= { mdKind 1,mdReport 3217 }

MsgAbortMeasure MESSAGE AbortMeasure ::= 710
	FROM	UI,INT_NM
	TO	PH

md_MsgAbortMeasure MessageDescriptor ::= { mdKind 1,mdReport 711 }

MsgAbortRestoration MESSAGE AbortRestoration ::= 777
	FROM	UI
	TO	PQH

md_MsgAbortRestoration MessageDescriptor ::= { mdKind 1,mdReport 778 }

MsgAcknowledgeNMAlarm MESSAGE AcknowledgeNMAlarm ::= 757
	FROM	AUI,ADUM,UI
	TO	AQH

md_MsgAcknowledgeNMAlarm MessageDescriptor ::= { mdKind 1,mdReport 758 }

MsgActivateLeg MESSAGE ActivateLeg ::= 1004
	FROM	UI,INT_NM
	TO	CH

md_MsgActivateLeg MessageDescriptor ::= { mdKind 1,mdReport 1005 }

MsgActivateMSSPRing MESSAGE ActivateMSSPRing ::= 2020
	FROM	UI
	TO	CH

md_MsgActivateMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 2021 }

MsgActivatePath MESSAGE ActivatePath ::= 560
	FROM	UI,INT_NM,PSB_CM
	TO	CH

md_MsgActivatePath MessageDescriptor ::= { mdKind 1,mdReport 561 }

MsgActTimerExpired MESSAGE ActTimerExpired ::= 820
	FROM	TH
	TO	CH

md_MsgActTimerExpired MessageDescriptor ::= { mdKind 4 }

MsgAddAG MESSAGE AddAG ::= 496
	FROM	UI,LDR,PSB_CM
	TO	CH

md_MsgAddAG MessageDescriptor ::= { mdKind 1,mdReport 497 }

MsgAddedArea MESSAGE AddedArea ::= 1500
	FROM	CH
	TO	INT_NM

md_MsgAddedArea MessageDescriptor ::= { mdKind 4 }

MsgAddedNE MESSAGE AddedNE ::= 3133
	FROM	CH
	TO	INT_NM

md_MsgAddedNE MessageDescriptor ::= { mdKind 4 }

MsgAddedPC MESSAGE AddedPC ::= 3030
	FROM	CH
	TO	INT_NM

md_MsgAddedPC MessageDescriptor ::= { mdKind 4 }

MsgAddedSnc MESSAGE AddedSnc ::= 1504
	FROM	CH
	TO	INT_NM

md_MsgAddedSnc MessageDescriptor ::= { mdKind 4 }

MsgAddGetEMAlarmList MESSAGE AddGetEMAlarmList ::= 782
	FROM	UI,INT_NM
	TO	AQH

md_MsgAddGetEMAlarmList MessageDescriptor ::= { mdKind 4 }

MsgAddGetNMAlarmList MESSAGE AddGetNMAlarmList ::= 779
	FROM	UI,PSN,INT_NM
	TO	AQH

md_MsgAddGetNMAlarmList MessageDescriptor ::= { mdKind 4 }


MsgUpdateCircuits MESSAGE UpdateCircuits ::= 1185
        FROM     PQH
        TO       CH
md_MsgUpdateCircuits MessageDescriptor ::= { mdKind1, mdReport 1186 }

MsgAddLeg MESSAGE AddLeg ::= 1000
	FROM	UI,LDR,PSB_CM
	TO	CH

md_MsgAddLeg MessageDescriptor ::= { mdKind 1,mdReport 1001 }

MsgAddLegs MESSAGE AddLegs ::= 824
	FROM	TH
	TO	CH

md_MsgAddLegs MessageDescriptor ::= { mdKind 1,mdReport 825 }

MsgAddProtection MESSAGE AddProtection ::= 598
	FROM	UI,PSB_CM,LR
	TO	CH

md_MsgAddProtection MessageDescriptor ::= { mdKind 1,mdReport 599 }

MsgAggregateNEStatus MESSAGE AggregateNEStatus ::= 201
	FROM	EH
	TO	ADUM

md_MsgAggregateNEStatus MessageDescriptor ::= { mdKind 4 }

MsgAggregateNMStatus MESSAGE AggregateNMStatus ::= 202
	FROM	ADUM
	TO	AUI

md_MsgAggregateNMStatus MessageDescriptor ::= { mdKind 4 }

MsgAlarm MESSAGE Alarm ::= 819
	FROM	TH
	TO	PSN

md_MsgAlarm MessageDescriptor ::= { mdKind 4 }

MsgAsnCompilerHack MESSAGE AsnCompilerHack ::= 5415
	FROM	UI,INT_NM,PSB_CM,PSB_FM,CH,LDR,UNLDR,EH,DH,PH,TH,PSN,RS
	TO	UI,INT_NM,PSB_CM,PSB_FM,CH,LDR,UNLDR,EH,DH,PH,TH,PSN,RS

MsgAssignPort MESSAGE AssignPort ::= 830
	FROM	INT_NM
	TO	CH

md_MsgAssignPort MessageDescriptor ::= { mdKind 1,mdReport 831 }

MsgAssociateProtectedPath MESSAGE AssociateProtectedPath ::= 542
	FROM	UI,LDR
	TO	CH

md_MsgAssociateProtectedPath MessageDescriptor ::= { mdKind 1,mdReport 543 }

MsgCancelCircuit MESSAGE CancelCircuit ::= 812
	FROM	PSN,TH
	TO	TH,CH

md_MsgCancelCircuit MessageDescriptor ::= { mdKind 1,mdReport 813 }

MsgCancelOrder MESSAGE CancelOrder ::= 804
	FROM	PSN,TH
	TO	TH,CH

md_MsgCancelOrder MessageDescriptor ::= { mdKind 1,mdReport 805 }

MsgChangedTPs MESSAGE ChangedTPs ::= 1516
	FROM	CH
	TO	INT_NM

md_MsgChangedTPs MessageDescriptor ::= { mdKind 4 }

MsgChangedUserProfile MESSAGE ChangedUserProfile ::= 1190
	FROM	CH
	TO	UI

md_MsgChangedUserProfile MessageDescriptor ::= { mdKind 4 }

MsgChangeOrder MESSAGE ChangeOrder ::= 802
	FROM	PSN,TH
	TO	TH,CH

md_MsgChangeOrder MessageDescriptor ::= { mdKind 1,mdReport 803 }

MsgCircuitBooked MESSAGE CircuitBooked ::= 1034
	FROM	CH
	TO	TH

md_MsgCircuitBooked MessageDescriptor ::= { mdKind 4 }

MsgCircuitBookedModified MESSAGE CircuitBookedModified ::= 1036
	FROM	CH
	TO	TH

md_MsgCircuitBookedModified MessageDescriptor ::= { mdKind 4 }

MsgCircuitBookedRemoved MESSAGE CircuitBookedRemoved ::= 1035
	FROM	CH
	TO	TH

md_MsgCircuitBookedRemoved MessageDescriptor ::= { mdKind 4 }

MsgClearNEEvent MESSAGE ClearNEEvent ::= 3105
	FROM	UI
	TO	AQH

md_MsgClearNEEvent MessageDescriptor ::= { mdKind 1,mdReport 3106 }

MsgClearNMAlarm MESSAGE ClearNMAlarm ::= 759
	FROM	AUI,ADUM,UI
	TO	AQH

md_MsgClearNMAlarm MessageDescriptor ::= { mdKind 1,mdReport 760 }

MsgCreateEM MESSAGE CreateEM ::= 10
	FROM	UI,UNLDR
	TO	CH

md_MsgCreateEM MessageDescriptor ::= { mdKind 1,mdReport 11 }

MsgCreateLink MESSAGE CreateLink ::= 450
	FROM	UI,LDR,PSB_CM
	TO	CH

md_MsgCreateLink MessageDescriptor ::= { mdKind 1,mdReport 451 }

MsgCreateLinkConnGroup MESSAGE CreateLinkConnGroup ::= 1520
	FROM	UI,INT_NM,PSB_CM
	TO	CH

md_MsgCreateLinkConnGroup MessageDescriptor ::= { mdKind 1,mdReport 1521 }

MsgCreateMSSPRing MESSAGE CreateMSSPRing ::= 2010
	FROM	UI
	TO	CH

md_MsgCreateMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 2011 }

MsgCreateObjResDomain MESSAGE CreateObjResDomain ::= 3002
	FROM	UI
	TO	CH

md_MsgCreateObjResDomain MessageDescriptor ::= { mdKind 1,mdReport 3003 }

MsgCreateObjSNC MESSAGE CreateObjSNC ::= 903
	FROM	UI,LDR
	TO	CH

md_MsgCreateObjSNC MessageDescriptor ::= { mdKind 1,mdReport 904 }

MsgCreateObjUsersGroup MESSAGE CreateObjUsersGroup ::= 3022
	FROM	UI
	TO	CH

md_MsgCreateObjUsersGroup MessageDescriptor ::= { mdKind 1,mdReport 3023 }

MsgCreatePath MESSAGE CreatePath ::= 540
	FROM	UI,DH,LDR,PSB_CM,LR
	TO	CH

md_MsgCreatePath MessageDescriptor ::= { mdKind 1,mdReport 541 }

MsgCreateSN MESSAGE CreateSN ::= 230
	FROM	UI,LDR,PSB_CM
	TO	CH

md_MsgCreateSN MessageDescriptor ::= { mdKind 1,mdReport 231 }

MsgCreateUser MESSAGE CreateUser ::= 1140
	FROM	UI
	TO	CH

md_MsgCreateUser MessageDescriptor ::= { mdKind 1,mdReport 1141 }

MsgCreateUserProfile MESSAGE CreateUserProfile ::= 1040
	FROM	UI
	TO	CH

md_MsgCreateUserProfile MessageDescriptor ::= { mdKind 1,mdReport 1041 }

MsgDeactivateLeg MESSAGE DeactivateLeg ::= 1006
	FROM	UI,INT_NM,PSB_CM
	TO	CH

md_MsgDeactivateLeg MessageDescriptor ::= { mdKind 1,mdReport 1007 }

MsgDeactivateMSSPRing MESSAGE DeactivateMSSPRing ::= 2030
	FROM	UI
	TO	CH

md_MsgDeactivateMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 2031 }

MsgDeactivatePath MESSAGE DeactivatePath ::= 580
	FROM	UI,INT_NM,PSB_CM,PQH
	TO	CH

md_MsgDeactivatePath MessageDescriptor ::= { mdKind 1,mdReport 581 }

MsgDeactTimerExpired MESSAGE DeactTimerExpired ::= 821
	FROM	TH
	TO	CH

md_MsgDeactTimerExpired MessageDescriptor ::= { mdKind 4 }

MsgDeAssignPort MESSAGE DeAssignPort ::= 832
	FROM	INT_NM
	TO	CH

md_MsgDeAssignPort MessageDescriptor ::= { mdKind 1,mdReport 833 }

MsgDeletedArea MESSAGE DeletedArea ::= 1501
	FROM	CH
	TO	INT_NM

md_MsgDeletedArea MessageDescriptor ::= { mdKind 4 }

MsgDeletedNE MESSAGE DeletedNE ::= 3134
	FROM	CH
	TO	INT_NM

md_MsgDeletedNE MessageDescriptor ::= { mdKind 4 }

MsgDeletedSnc MESSAGE DeletedSnc ::= 1505
	FROM	CH
	TO	INT_NM

md_MsgDeletedSnc MessageDescriptor ::= { mdKind 4 }

MsgDeleteObjAG MESSAGE DeleteObjAG ::= 1202
	FROM	UI,UNLDR,PSB_CM
	TO	CH

md_MsgDeleteObjAG MessageDescriptor ::= { mdKind 1,mdReport 1203 }

MsgDeleteObjResDomain MESSAGE DeleteObjResDomain ::= 3006
	FROM	UI
	TO	CH

md_MsgDeleteObjResDomain MessageDescriptor ::= { mdKind 1,mdReport 3007 }

MsgDeleteObjSNC MESSAGE DeleteObjSNC ::= 907
	FROM	UI
	TO	CH

md_MsgDeleteObjSNC MessageDescriptor ::= { mdKind 1,mdReport 908 }

MsgDeleteObjUsersGroup MESSAGE DeleteObjUsersGroup ::= 3026
	FROM	UI
	TO	CH

md_MsgDeleteObjUsersGroup MessageDescriptor ::= { mdKind 1,mdReport 3027 }

MsgDeleteScanners MESSAGE DeleteScanners ::= 712
	FROM	UI
	TO	PH

md_MsgDeleteScanners MessageDescriptor ::= { mdKind 1,mdReport 713 }

MsgDisassociateMSSPRing MESSAGE DisassociateMSSPRing ::= 2080
	FROM	UI
	TO	CH

md_MsgDisassociateMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 2081 }

MsgDisassociatePath MESSAGE DisassociatePath ::= 596
	FROM	UI,UNLDR,PSB_CM
	TO	CH

md_MsgDisassociatePath MessageDescriptor ::= { mdKind 1,mdReport 597 }

MsgEMLogin MESSAGE EMLogin ::= 82
	FROM	CH
	TO	UI

md_MsgEMLogin MessageDescriptor ::= { mdKind 4 }

MsgEMLogout MESSAGE EMLogout ::= 83
	FROM	CH
	TO	UI

md_MsgEMLogout MessageDescriptor ::= { mdKind 4 }

MsgEMLostConnection MESSAGE EMLostConnection ::= 80
	FROM	CH
	TO	UI

md_MsgEMLostConnection MessageDescriptor ::= { mdKind 4 }

MsgEMReconnection MESSAGE EMReconnection ::= 81
	FROM	CH
	TO	UI

md_MsgEMReconnection MessageDescriptor ::= { mdKind 4 }

MsgEvent MESSAGE Event ::= 818
	FROM	TH
	TO	PSN

md_MsgEvent MessageDescriptor ::= { mdKind 4 }

MsgExtendCircuit MESSAGE ExtendCircuit ::= 806
	FROM	PSN
	TO	TH

md_MsgExtendCircuit MessageDescriptor ::= { mdKind 1,mdReport 807 }

MsgExtendTime MESSAGE ExtendTime ::= 822
	FROM	TH
	TO	CH

md_MsgExtendTime MessageDescriptor ::= { mdKind 1,mdReport 823 }

MsgGenTroubleTicket MESSAGE GenTroubleTicket ::= 785
	FROM	AUI,ADUM,UI
	TO	AQH

md_MsgGenTroubleTicket MessageDescriptor ::= { mdKind 4 }

MsgGetAggregatedNEState MESSAGE GetAggregatedNEState ::= 205
	FROM	ADUM
	TO	EH

md_MsgGetAggregatedNEState MessageDescriptor ::= { mdKind 2,mdReport 206 }

MsgGetAggregatedNMStatus MESSAGE GetAggregatedNMStatus ::= 203
	FROM	AUI
	TO	ADUM

md_MsgGetAggregatedNMStatus MessageDescriptor ::= { mdKind 2,mdReport 204 }

MsgGetAGList MESSAGE GetAGList ::= 424
	FROM	UI,PSB_CM
	TO	CH,MR

md_MsgGetAGList MessageDescriptor ::= { mdKind 2,mdReport 425 }

MsgGetAnchorRoute MESSAGE GetAnchorRoute ::= 1008
	FROM	UI
	TO	CH

md_MsgGetAnchorRoute MessageDescriptor ::= { mdKind 2,mdReport 1009 }

MsgGetAutoLink MESSAGE GetAutoLink ::= 514
	FROM	UI
	TO	CH

md_MsgGetAutoLink MessageDescriptor ::= { mdKind 2,mdReport 515 }

MsgGetAutoLinkConn MESSAGE GetAutoLinkConn ::= 516
	FROM	UI
	TO	CH

md_MsgGetAutoLinkConn MessageDescriptor ::= { mdKind 2,mdReport 517 }

MsgGetAutoRingInfo MESSAGE GetAutoRingInfo ::= 2004
	FROM	UI
	TO	CH

md_MsgGetAutoRingInfo MessageDescriptor ::= { mdKind 2,mdReport 2005 }

MsgGetAutoRingLink MESSAGE GetAutoRingLink ::= 2006
	FROM	UI
	TO	CH

md_MsgGetAutoRingLink MessageDescriptor ::= { mdKind 2,mdReport 2007 }

MsgGetAutoRoute MESSAGE GetAutoRoute ::= 512
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetAutoRoute MessageDescriptor ::= { mdKind 2,mdReport 513 }

MsgGetBearerLinkConnList MESSAGE GetBearerLinkConnList ::= 415
	FROM	UI
	TO	CH

md_MsgGetBearerLinkConnList MessageDescriptor ::= { mdKind 2,mdReport 416 }

MsgGetCardList MESSAGE GetCardList ::= 420
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetCardList MessageDescriptor ::= { mdKind 2,mdReport 421 }

MsgGetCircDisplay MESSAGE GetCircDisplay ::= 594
	FROM	UI
	TO	CH

md_MsgGetCircDisplay MessageDescriptor ::= { mdKind 2,mdReport 595 }

MsgDisplayLSPathObj MESSAGE DisplayLSPathObj ::= 5028
	FROM	UI
	TO	CPM

md_MsgDisplayLSPathObj MessageDescriptor ::= { mdKind 2,mdReport 5029 }

MsgGetCircInPathList MESSAGE GetCircInPathList ::= 1032
	FROM	UI
	TO	CH

md_MsgGetCircInPathList MessageDescriptor ::= { mdKind 2,mdReport 1033 }

MsgGetCircList MESSAGE GetCircList ::= 770
	FROM	UI
	TO	PQH

md_MsgGetCircList MessageDescriptor ::= { mdKind 2,mdReport 771 }


MsgGetCompleteTrailRouteInfo MESSAGE GetCompleteTrailRouteInfo ::= 518
	FROM	UI
	TO	RS

md_MsgGetCompleteTrailRouteInfo MessageDescriptor ::= { mdKind 2,mdReport 519 }

MsgGetDefaultPreferences MESSAGE GetDefaultPreferences ::= 3212
	FROM	UI
	TO	CH

md_MsgGetDefaultPreferences MessageDescriptor ::= { mdKind 2,mdReport 3213 }

MsgGetEMAlarmHistory MESSAGE GetEMAlarmHistory ::= 763
	FROM	UI
	TO	AQH

md_MsgGetEMAlarmHistory MessageDescriptor ::= { mdKind 2,mdReport 764 }

MsgGetEMAlarmList MESSAGE GetEMAlarmList ::= 755
	FROM	UI,AUI,ADUM,INT_NM,PSB_FM
	TO	AQH

md_MsgGetEMAlarmList MessageDescriptor ::= { mdKind 2,mdReport 756 }

MsgGetEMInfo MESSAGE GetEMInfo ::= 30
	FROM	UI
	TO	CH

md_MsgGetEMInfo MessageDescriptor ::= { mdKind 2,mdReport 31 }

MsgGetEMList MESSAGE GetEMList ::= 20
	FROM	UI,LDR,UNLDR,PSB_CM
	TO	CH

md_MsgGetEMList MessageDescriptor ::= { mdKind 2,mdReport 21 }

MsgGetFastAutoRoute MESSAGE GetFastAutoRoute ::= 520
	FROM	UI,CH,LR
	TO	FARH

md_MsgGetFastAutoRoute MessageDescriptor ::= { mdKind 2,mdReport 521 }

MsgGetLegList MESSAGE GetLegList ::= 17
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetLegList MessageDescriptor ::= { mdKind 2,mdReport 18 }

MsgGetLinkConnList MESSAGE GetLinkConnList ::= 408
	FROM	UI,PSB_CM
	TO	CH,MR

md_MsgGetLinkConnList MessageDescriptor ::= { mdKind 2,mdReport 409 }

MsgGetLinkInfo MESSAGE GetLinkInfo ::= 410
	FROM	UI
	TO	CH

md_MsgGetLinkInfo MessageDescriptor ::= { mdKind 2,mdReport 411 }

MsgGetLnLinkList MESSAGE GetLnLinkList ::= 402
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetLnLinkList MessageDescriptor ::= { mdKind 2,mdReport 403 }

MsgGetLoggedUsersList MESSAGE GetLoggedUsersList ::= 1191
	FROM	UI
	TO	CH

md_MsgGetLoggedUsersList MessageDescriptor ::= { mdKind 2,mdReport 1192 }

MsgGetLogicalTTPList MESSAGE GetLogicalTTPList ::= 490
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetLogicalTTPList MessageDescriptor ::= { mdKind 2,mdReport 491 }

MsgGetLogicalTTPName MESSAGE GetLogicalTTPName ::= 428
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetLogicalTTPName MessageDescriptor ::= { mdKind 2,mdReport 429 }

MsgGetM1400Name MESSAGE GetM1400Name ::= 413
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetM1400Name MessageDescriptor ::= { mdKind 2,mdReport 414 }

MsgGetManualRingInfo MESSAGE GetManualRingInfo ::= 2002
	FROM	UI
	TO	CH

md_MsgGetManualRingInfo MessageDescriptor ::= { mdKind 2,mdReport 2003 }

MsgGetManualRouteInfo MESSAGE GetManualRouteInfo ::= 510
	FROM	UI,DH,PSB_CM
	TO	CH

md_MsgGetManualRouteInfo MessageDescriptor ::= { mdKind 2,mdReport 511 }

MsgGetSNId MESSAGE GetSNId ::= 2052
	FROM	UI
	TO	CH

md_MsgGetSNId MessageDescriptor ::= { mdKind 2,mdReport 2053 }

MsgGetMSSPRingInfo MESSAGE GetMSSPRingInfo ::= 2050
	FROM	UI
	TO	CH

md_MsgGetMSSPRingInfo MessageDescriptor ::= { mdKind 2,mdReport 2051 }

MsgGetMSSPRingList MESSAGE GetMSSPRingList ::= 2000
	FROM	UI
	TO	CH

md_MsgGetMSSPRingList MessageDescriptor ::= { mdKind 2,mdReport 2001 }

MsgGetMSSPRingStatus MESSAGE GetMSSPRingStatus ::= 2070
	FROM	UI
	TO	CH

md_MsgGetMSSPRingStatus MessageDescriptor ::= { mdKind 2,mdReport 2071 }

MsgGetMSSPRingSwitchCmd MESSAGE GetMSSPRingSwitchCmd ::= 2094
	FROM	UI
	TO	CH

md_MsgGetMSSPRingSwitchCmd MessageDescriptor ::= { mdKind 2,mdReport 2095 }

MsgGetNEEventList MESSAGE GetNEEventList ::= 301
	FROM	UI,LDR
	TO	AQH

md_MsgGetNEEventList MessageDescriptor ::= { mdKind 2,mdReport 302 }

MsgGetNEList MESSAGE GetNEList ::= 110
	FROM	UI,LDR,UNLDR,PSB_CM
	TO	CH

md_MsgGetNEList MessageDescriptor ::= { mdKind 2,mdReport 111 }

MsgGetNMAlarmHistory MESSAGE GetNMAlarmHistory ::= 761
	FROM	UI,AUI,ADUM,PSB_FM
	TO	AQH

md_MsgGetNMAlarmHistory MessageDescriptor ::= { mdKind 2,mdReport 762 }

MsgGetNMAlarmList MESSAGE GetNMAlarmList ::= 750
	FROM	UI,AUI,ADUM,PSN,INT_NM,PSB_FM
	TO	AQH

md_MsgGetNMAlarmList MessageDescriptor ::= { mdKind 2,mdReport 751 }

MsgGetNMCorrelate MESSAGE GetNMCorrelate ::= 19
	FROM	AUI,UI,ADUM,PSB_FM
	TO	DBQH

md_MsgGetNMCorrelate MessageDescriptor ::= { mdKind 2,mdReport 12 }

MsgGetAllRootCauseAlarmList MESSAGE GetAllRootCauseAlarmList ::= 23
	FROM    UI
	TO      DBQH

md_MsgGetAllRootCauseAlarmList MessageDescriptor ::= { mdKind 2,mdReport 24 }

MsgGetNodePortsInfo MESSAGE GetNodePortsInfo ::= 834
	FROM	INT_NM
	TO	CH

md_MsgGetNodePortsInfo MessageDescriptor ::= { mdKind 2,mdReport 835 }

MsgGetObjResDomain MESSAGE GetObjResDomain ::= 3000
	FROM	UI
	TO	CH

md_MsgGetObjResDomain MessageDescriptor ::= { mdKind 2,mdReport 3001 }

MsgGetObjSNC MESSAGE GetObjSNC ::= 905
	FROM	UI
	TO	CH

md_MsgGetObjSNC MessageDescriptor ::= { mdKind 2,mdReport 906 }

MsgGetObjThreshold MESSAGE GetObjThreshold ::= 731
	FROM	UI
	TO	PH

md_MsgGetObjThreshold MessageDescriptor ::= { mdKind 2,mdReport 732 }

MsgGetObjTrail MESSAGE GetObjTrail ::= 3200
	FROM	UI
	TO	CH

md_MsgGetObjTrail MessageDescriptor ::= { mdKind 2,mdReport 3201 }

MsgGetObjTrailTrace MESSAGE GetObjTrailTrace ::= 3202
	FROM	UI
	TO	CH

md_MsgGetObjTrailTrace MessageDescriptor ::= { mdKind 2,mdReport 3203 }

MsgGetObjUsersGroup MESSAGE GetObjUsersGroup ::= 3020
	FROM	UI
	TO	CH

md_MsgGetObjUsersGroup MessageDescriptor ::= { mdKind 2,mdReport 3021 }

MsgGetPathInfo MESSAGE GetPathInfo ::= 587
	FROM	UI,INT_NM,PSB_CM,LR
	TO	CH

md_MsgGetPathInfo MessageDescriptor ::= { mdKind 2,mdReport 588 }

MsgGetPathList MESSAGE GetPathList ::= 508
	FROM	UI,PSB_CM,LR
	TO	CH

md_MsgGetPathList MessageDescriptor ::= { mdKind 2,mdReport 509 }

MsgGetPerfNumbers MESSAGE GetPerfNumbers ::= 720
	FROM	UI
	TO	PH

md_MsgGetPerfNumbers MessageDescriptor ::= { mdKind 2,mdReport 721 }

MsgGetPerfReport MESSAGE GetPerfReport ::= 726
	FROM	UI
	TO	PH

md_MsgGetPerfReport MessageDescriptor ::= { mdKind 2,mdReport 727 }

MsgGetPhysicalTTPName MESSAGE GetPhysicalTTPName ::= 492
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetPhysicalTTPName MessageDescriptor ::= { mdKind 2,mdReport 493 }

MsgGetPortList MESSAGE GetPortList ::= 1200
	FROM	UI
	TO	CH

md_MsgGetPortList MessageDescriptor ::= { mdKind 2,mdReport 1201 }

MsgGetProfiledTrails MESSAGE GetProfiledTrails ::= 718
	FROM	UI
	TO	PH

md_MsgGetProfiledTrails MessageDescriptor ::= { mdKind 2,mdReport 719 }

MsgGetRHTrace MESSAGE GetRHTrace ::= 150
	FROM	UI
	TO	CH

md_MsgGetRHTrace MessageDescriptor ::= { mdKind 2,mdReport 151 }

MsgGetScannerInfo MESSAGE GetScannerInfo ::= 724
	FROM	UI
	TO	PH

md_MsgGetScannerInfo MessageDescriptor ::= { mdKind 2,mdReport 725 }

MsgGetScannerList MESSAGE GetScannerList ::= 702
	FROM	UI
	TO	PH

md_MsgGetScannerList MessageDescriptor ::= { mdKind 2,mdReport 703 }

MsgGetSdhStructure MESSAGE GetSdhStructure ::= 404
	FROM	UI,DH,LDR
	TO	CH

md_MsgGetSdhStructure MessageDescriptor ::= { mdKind 2,mdReport 405 }

MsgGetSigLnTypeMeasures MESSAGE GetSigLnTypeMeasures ::= 700
	FROM	UI,INT_NM
	TO	PH

md_MsgGetSigLnTypeMeasures MessageDescriptor ::= { mdKind 2,mdReport 701 }

MsgGetSNCList MESSAGE GetSNCList ::= 900
	FROM	UI
	TO	CH,MR

md_MsgGetSNCList MessageDescriptor ::= { mdKind 2,mdReport 901 }

MsgGetSNContents MESSAGE GetSNContents ::= 309
	FROM	UI
	TO	CH

md_MsgGetSNContents MessageDescriptor ::= { mdKind 2,mdReport 305 }

MsgGetSNInfo MESSAGE GetSNInfo ::= 220
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetSNInfo MessageDescriptor ::= { mdKind 2,mdReport 221 }

MsgGetSNInLink MESSAGE GetSNInLink ::= 212
	FROM	UI
	TO	CH

md_MsgGetSNInLink MessageDescriptor ::= { mdKind 2,mdReport 213 }

MsgGetSNList MESSAGE GetSNList ::= 210
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetSNList MessageDescriptor ::= { mdKind 2,mdReport 211 }

MsgGetSonetStructure MESSAGE GetSonetStructure ::= 440
	FROM	UI,DH,LDR
	TO	CH

md_MsgGetSonetStructure MessageDescriptor ::= { mdKind 2,mdReport 441 }

MsgGetSupportingTPList MESSAGE GetSupportingTPList ::= 753
	FROM	AUI,ADUM,UI,PSB_CM,PSB_FM
	TO	CH,DBQH

md_MsgGetSupportingTPList MessageDescriptor ::= { mdKind 2,mdReport 754 }

MsgGetTPRouting MESSAGE GetTPRouting ::= 840
	FROM	PSB_CM
	TO	CH

md_MsgGetTPRouting MessageDescriptor ::= { mdKind 2,mdReport 841 }

MsgGetTrailList MESSAGE GetTrailList ::= 4000
	FROM	UI
	TO	CH

md_MsgGetTrailList MessageDescriptor ::= { mdKind 2,mdReport 4001 }

MsgGetTree MESSAGE GetTree ::= 610
	FROM	UI
	TO	CH

md_MsgGetTree MessageDescriptor ::= { mdKind 2,mdReport 611 }

MsgGetTTPList MESSAGE GetTTPList ::= 422
	FROM	UI,PSB_CM
	TO	CH

md_MsgGetTTPList MessageDescriptor ::= { mdKind 2,mdReport 423 }

MsgGetUserInfo MESSAGE GetUserInfo ::= 1130
	FROM	UI
	TO	CH

md_MsgGetUserInfo MessageDescriptor ::= { mdKind 2,mdReport 1131 }

MsgGetUserLinkDetails MESSAGE GetUserLinkDetails ::= 250
	FROM	UI
	TO	CH

md_MsgGetUserLinkDetails MessageDescriptor ::= { mdKind 2,mdReport 251 }

MsgGetUserList MESSAGE GetUserList ::= 1120
	FROM	UI
	TO	CH

md_MsgGetUserList MessageDescriptor ::= { mdKind 2,mdReport 1121 }

MsgGetUserProfileInfo MESSAGE GetUserProfileInfo ::= 1020
	FROM	UI
	TO	CH

md_MsgGetUserProfileInfo MessageDescriptor ::= { mdKind 2,mdReport 1021 }

MsgGetUserProfileList MESSAGE GetUserProfileList ::= 1010
	FROM	UI
	TO	CH

md_MsgGetUserProfileList MessageDescriptor ::= { mdKind 2,mdReport 1011 }

MsgGetViewList MESSAGE GetViewList ::= 1030
	FROM	UI
	TO	CH

md_MsgGetViewList MessageDescriptor ::= { mdKind 2,mdReport 1031 }

MsgGetWorkingSide MESSAGE GetWorkingSide ::= 592
	FROM	UI,INT_NM
	TO	CH

md_MsgGetWorkingSide MessageDescriptor ::= { mdKind 2,mdReport 593 }

MsgGetLSPathObjWorkingSide MESSAGE GetLSPathObjWorkingSide ::= 5030
	FROM	UI
	TO	CPM

md_MsgGetLSPathObjWorkingSide MessageDescriptor ::= { mdKind 2,mdReport 5031 }

MsgIncludeSN MESSAGE IncludeSN ::= 270
	FROM	UI
	TO	CH

md_MsgIncludeSN MessageDescriptor ::= { mdKind 1,mdReport 271 }

MsgInsertSNInLink MESSAGE InsertSNInLink ::= 3206
	FROM	UI
	TO	CH

md_MsgInsertSNInLink MessageDescriptor ::= { mdKind 1,mdReport 3207 }

MsgInstallNE MESSAGE InstallNE ::= 120
	FROM	UI,LDR,PSB_CM
	TO	CH

md_MsgInstallNE MessageDescriptor ::= { mdKind 1,mdReport 121 }

MsgAbortNEmanagement MESSAGE AbortNEmanagement ::= 6510
	FROM    UI
	TO      WCH

md_MsgAbortNEmanagement MessageDescriptor ::= { mdKind 4 }

MsgLinkCreated MESSAGE LinkCreated ::= 1517
	FROM	CH
	TO	INT_NM

md_MsgLinkCreated MessageDescriptor ::= { mdKind 4 }

MsgLoggedUsersModif MESSAGE LoggedUsersModif ::= 1193
	FROM	CH
	TO	UI

md_MsgLoggedUsersModif MessageDescriptor ::= { mdKind 4 }

MsgLogin MESSAGE Login ::= 1170
	FROM	UI,PSN,TH,INT_NM,PSB_CM,PSB_FM
	TO	CH

md_MsgLogin MessageDescriptor ::= { mdKind 1,mdReport 1171 }

MsgLogout MESSAGE Logout ::= 1180
	FROM	UI,INT_NM,PSB_CM,PSB_FM
	TO	CH

md_MsgLogout MessageDescriptor ::= { mdKind 1,mdReport 1181 }

MsgManagedVSNLogin MESSAGE ManagedVSNLogin ::= 3210
	FROM	UI
	TO	CH

md_MsgManagedVSNLogin MessageDescriptor ::= { mdKind 1,mdReport 3211 }

MsgModCircList MESSAGE ModCircList ::= 772
	FROM	PQH
	TO	UI

md_MsgModCircList MessageDescriptor ::= { mdKind 4 }

MsgModEMAlarmList MESSAGE ModEMAlarmList ::= 769
	FROM	AQH
	TO	AUI,ADUM,UI,INT_NM,PSB_FM

md_MsgModEMAlarmList MessageDescriptor ::= { mdKind 4 }

MsgModifiedArea MESSAGE ModifiedArea ::= 1502
	FROM	CH
	TO	INT_NM

md_MsgModifiedArea MessageDescriptor ::= { mdKind 4 }

MsgModifiedNE MESSAGE ModifiedNE ::= 3135
	FROM	CH
	TO	INT_NM

md_MsgModifiedNE MessageDescriptor ::= { mdKind 4 }

MsgModifiedPC MESSAGE ModifiedPC ::= 3031
	FROM	CH
	TO	INT_NM

md_MsgModifiedPC MessageDescriptor ::= { mdKind 4 }

MsgModifiedSnc MESSAGE ModifiedSnc ::= 1508
	FROM	CH
	TO	INT_NM

md_MsgModifiedSnc MessageDescriptor ::= { mdKind 4 }

MsgModifyGroupTP MESSAGE ModifyGroupTP ::= 498
	FROM	UI
	TO	CH

md_MsgModifyGroupTP MessageDescriptor ::= { mdKind 1,mdReport 499 }

MsgModifyLink MESSAGE ModifyLink ::= 430
	FROM	UI
	TO	CH

md_MsgModifyLink MessageDescriptor ::= { mdKind 1,mdReport 431 }

MsgModifyMeasure MESSAGE ModifyMeasure ::= 708
	FROM	UI
	TO	PH

md_MsgModifyMeasure MessageDescriptor ::= { mdKind 1,mdReport 709 }

MsgModifyMSSPRing MESSAGE ModifyMSSPRing ::= 2060
	FROM	UI
	TO	CH

md_MsgModifyMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 2061 }

MsgModifyNutChannels MESSAGE ModifyNutChannels ::= 3040
	FROM	UI
	TO	CH

md_MsgModifyNutChannels MessageDescriptor ::= { mdKind 1,mdReport 3041 }

MsgModifyPath MESSAGE ModifyPath ::= 590
	FROM	UI,INT_NM,PSB_CM,FXR
	TO	CH

md_MsgModifyPath MessageDescriptor ::= { mdKind 1,mdReport 591 }

MsgModifySetOfPaths MESSAGE ModifySetOfPaths ::= 1320
	FROM	UI
	TO	CH

md_MsgModifySetOfPaths MessageDescriptor ::= { mdKind 1,mdReport 1321 }

MsgModifySN MESSAGE ModifySN ::= 290
	FROM	UI,INT_NM
	TO	CH

md_MsgModifySN MessageDescriptor ::= { mdKind 1,mdReport 291 }

MsgModifyUser MESSAGE ModifyUser ::= 1150
	FROM	UI
	TO	CH

md_MsgModifyUser MessageDescriptor ::= { mdKind 1,mdReport 1151 }

MsgModifyUserProfile MESSAGE ModifyUserProfile ::= 1050
	FROM	UI
	TO	CH

md_MsgModifyUserProfile MessageDescriptor ::= { mdKind 1,mdReport 1051 }

MsgModNEEventList MESSAGE ModNEEventList ::= 401
	FROM	AQH
	TO	UI

md_MsgModNEEventList MessageDescriptor ::= { mdKind 4 }

MsgModNMAlarmList MESSAGE ModNMAlarmList ::= 752
	FROM	AQH
	TO	ADUM,AUI,UI,PSN,INT_NM,PSB_FM

md_MsgModNMAlarmList MessageDescriptor ::= { mdKind 4 }

MsgModPerfNumbers MESSAGE ModPerfNumbers ::= 722
	FROM	PH
	TO	UI

md_MsgModPerfNumbers MessageDescriptor ::= { mdKind 4 }

MsgNewOrder MESSAGE NewOrder ::= 800
	FROM	PSN,TH
	TO	TH,CH

md_MsgNewOrder MessageDescriptor ::= { mdKind 1,mdReport 801 }

MsgOpenSN MESSAGE OpenSN ::= 240
	FROM	UI,PSB_CM
	TO	CH

md_MsgOpenSN MessageDescriptor ::= { mdKind 2,mdReport 241 }

MsgOpenSNParent MESSAGE OpenSNParent ::= 306
	FROM	UI
	TO	CH

md_MsgOpenSNParent MessageDescriptor ::= { mdKind 2,mdReport 307 }

MsgOptPassthrough MESSAGE OptPassthrough ::= 15
	FROM	CH
	TO	UI

md_MsgOptPassthrough MessageDescriptor ::= { mdKind 1,mdReport 16 }

MsgPassthrough MESSAGE Passthrough ::= 13
	FROM	CH
	TO	UI

md_MsgPassthrough MessageDescriptor ::= { mdKind 1,mdReport 14 }

MsgPerfReportCompleted MESSAGE PerfReportCompleted ::= 728
	FROM	PH
	TO	UI

md_MsgPerfReportCompleted MessageDescriptor ::= { mdKind 4 }

MsgReadCircuits MESSAGE ReadCircuits ::= 814
	FROM	PSN,TH
	TO	TH,CH

md_MsgReadCircuits MessageDescriptor ::= { mdKind 1,mdReport 815 }

MsgReadConfiguration MESSAGE ReadConfiguration ::= 828
	FROM	TH
	TO	CH

md_MsgReadConfiguration MessageDescriptor ::= { mdKind 1,mdReport 829 }

MsgReadTPs MESSAGE ReadTPs ::= 816
	FROM	PSN,TH,PSB_CM
	TO	TH,CH

md_MsgReadTPs MessageDescriptor ::= { mdKind 1,mdReport 817 }

MsgRealignEM MESSAGE RealignEM ::= 60
	FROM	UI,LDR,UNLDR,PSB_CM
	TO	CH

md_MsgRealignEM MessageDescriptor ::= { mdKind 1,mdReport 61 }

MsgRealignNE MESSAGE RealignNE ::= 140
	FROM	UI,PSB_CM,LDR
	TO	CH

md_MsgRealignNE MessageDescriptor ::= { mdKind 1,mdReport 141 }

MsgReconnectEM MESSAGE ReconnectEM ::= 70
	FROM	UI
	TO	CH

md_MsgReconnectEM MessageDescriptor ::= { mdKind 1,mdReport 71 }

MsgReloadThrProfiles MESSAGE ReloadThrProfiles ::= 729
	FROM	UI
	TO	PH

md_MsgReloadThrProfiles MessageDescriptor ::= { mdKind 1,mdReport 730 }

MsgRemovedMsLink MESSAGE RemovedMsLink ::= 1519
	FROM	CH
	TO	INT_NM

md_MsgRemovedMsLink MessageDescriptor ::= { mdKind 4 }

MsgRemovedPC MESSAGE RemovedPC ::= 3032
	FROM	CH
	TO	INT_NM

md_MsgRemovedPC MessageDescriptor ::= { mdKind 4 }

MsgRemoveEM MESSAGE RemoveEM ::= 40
	FROM	UI
	TO	CH

md_MsgRemoveEM MessageDescriptor ::= { mdKind 1,mdReport 41 }

MsgRemoveGetEMAlarmList MESSAGE RemoveGetEMAlarmList ::= 783
	FROM	UI,INT_NM
	TO	AQH

md_MsgRemoveGetEMAlarmList MessageDescriptor ::= { mdKind 1,mdReport 784 }

MsgRemoveGetNMAlarmList MESSAGE RemoveGetNMAlarmList ::= 780
	FROM	UI,PSN,INT_NM
	TO	AQH

md_MsgRemoveGetNMAlarmList MessageDescriptor ::= { mdKind 1,mdReport 781 }

MsgRemoveLeg MESSAGE RemoveLeg ::= 1002
	FROM	UI,PSB_CM
	TO	CH

md_MsgRemoveLeg MessageDescriptor ::= { mdKind 1,mdReport 1003 }

MsgRemoveLegs MESSAGE RemoveLegs ::= 826
	FROM	TH,PSB_CM
	TO	CH

md_MsgRemoveLegs MessageDescriptor ::= { mdKind 1,mdReport 827 }

MsgGetGMPLSNodes MESSAGE GetGMPLSNodes ::= 522
	FROM UI
	TO GMPLS,CH

md_MsgGetGMPLSNodes MessageDescriptor ::= { mdKind 2,mdReport 523 }

MsgGetGMPLSDiscrepancies MESSAGE GetGMPLSDiscrepancies ::= 524
	FROM UI
	TO GMPLS,CH

md_MsgGetGMPLSDiscrepancies MessageDescriptor ::= { mdKind 2,mdReport 525 }


MsgRemoveLink MESSAGE RemoveLink ::= 470
	FROM	UI,INT_NM,UNLDR,PSB_CM
	TO	CH

md_MsgRemoveLink MessageDescriptor ::= { mdKind 1,mdReport 471 }

MsgRemoveLinkConnGroup MESSAGE RemoveLinkConnGroup ::= 1522
	FROM	UI,INT_NM,PSB_CM
	TO	CH

md_MsgRemoveLinkConnGroup MessageDescriptor ::= { mdKind 1,mdReport 1523 }

MsgRemoveMSSPRing MESSAGE RemoveMSSPRing ::= 2040
	FROM	UI
	TO	CH

md_MsgRemoveMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 2041 }

MsgRemovePath MESSAGE RemovePath ::= 585
	FROM	UI,INT_NM,PSB_CM
	TO	CH

md_MsgRemovePath MessageDescriptor ::= { mdKind 1,mdReport 586 }

MsgRemoveSN MESSAGE RemoveSN ::= 300
	FROM	UI,UNLDR,PSB_CM
	TO	CH

md_MsgRemoveSN MessageDescriptor ::= { mdKind 1,mdReport 308 }

MsgRemoveUser MESSAGE RemoveUser ::= 1160
	FROM	UI
	TO	CH

md_MsgRemoveUser MessageDescriptor ::= { mdKind 1,mdReport 1161 }

MsgRemoveUserProfile MESSAGE RemoveUserProfile ::= 1060
	FROM	UI
	TO	CH

md_MsgRemoveUserProfile MessageDescriptor ::= { mdKind 1,mdReport 1061 }

MsgReplaceCircuit MESSAGE ReplaceCircuit ::= 808
	FROM	PSN
	TO	TH

md_MsgReplaceCircuit MessageDescriptor ::= { mdKind 1,mdReport 809 }

MsgReportGetCreateGMPLSPathInfo MESSAGE ReportGetCreateGMPLSPathInfo ::= 529
	FROM	ACAH,CH
	TO	UI

md_MsgReportAbortMeasure MessageDescriptor ::= { mdKind 3 }

MsgReportAbortMeasure MESSAGE ReportAbortMeasure ::= 711
	FROM	PH
	TO	UI,INT_NM

md_MsgReportAbortMeasure MessageDescriptor ::= { mdKind 3 }

MsgReportGetGMPLSDetails MESSAGE ReportGetGMPLSDetails ::= 527
	FROM GMPLS,CH
	TO UI

md_MsgReportGetGMPLSDetails MessageDescriptor ::= { mdKind 3 }

MsgReportGetGMPLSNodes MESSAGE ReportGetGMPLSNodes ::= 523
	FROM GMPLS,CH
	TO UI

md_MsgReportGetGMPLSNodes MessageDescriptor ::= { mdKind 3 }

MsgReportGetGMPLSDiscrepancies MESSAGE ReportGetGMPLSDiscrepancies ::= 525
	FROM GMPLS,CH
	TO UI

md_MsgReportGetGMPLSDiscrepancies MessageDescriptor ::= { mdKind 3 }


MsgReportAbortRestoration MESSAGE ReportAbortRestoration ::= 778
	FROM	PQH
	TO	UI

md_MsgReportAbortRestoration MessageDescriptor ::= { mdKind 3 }

MsgReportAcknowledgeNMAlarm MESSAGE ReportAcknowledgeNMAlarm ::= 758
	FROM	AQH
	TO	ADUM,AUI,UI

md_MsgReportAcknowledgeNMAlarm MessageDescriptor ::= { mdKind 3 }


MsgReportActivateLeg MESSAGE ReportActivateLeg ::= 1005
	FROM	CH
	TO	UI,TH,INT_NM

md_MsgReportActivateLeg MessageDescriptor ::= { mdKind 3 }

MsgReportActivateMSSPRing MESSAGE ReportActivateMSSPRing ::= 2021
	FROM	CH
	TO	UI

md_MsgReportActivateMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportEndAction MESSAGE ReportEndAction ::= 2022
	FROM	PQH
	TO	CH

md_MsgReportEndAction MessageDescriptor ::= { mdKind 4 }

MsgReportActivatePath MESSAGE ReportActivatePath ::= 561
	FROM	CH
	TO	UI,INT_NM,TH,PSB_CM

md_MsgReportActivatePath MessageDescriptor ::= { mdKind 3 }

MsgReportAddAG MESSAGE ReportAddAG ::= 497
	FROM	CH
	TO	UI,LDR,PSB_CM

md_MsgReportAddAG MessageDescriptor ::= { mdKind 3 }

MsgReportAddLeg MESSAGE ReportAddLeg ::= 1001
	FROM	CH
	TO	UI,LDR,PSB_CM

md_MsgReportAddLeg MessageDescriptor ::= { mdKind 3 }

MsgReportAddLegs MESSAGE ReportAddLegs ::= 825
	FROM	CH
	TO	TH

md_MsgReportAddLegs MessageDescriptor ::= { mdKind 3 }

MsgReportAddProtection MESSAGE ReportAddProtection ::= 599
	FROM	CH
	TO	UI,PSB_CM,LR

md_MsgReportAddProtection MessageDescriptor ::= { mdKind 3 }

MsgReportAssignPort MESSAGE ReportAssignPort ::= 831
	FROM	CH
	TO	INT_NM

md_MsgReportAssignPort MessageDescriptor ::= { mdKind 3 }

MsgReportAssociateProtectedPath MESSAGE ReportAssociateProtectedPath ::= 543
	FROM	CH
	TO	UI,LDR

md_MsgReportAssociateProtectedPath MessageDescriptor ::= { mdKind 3 }

MsgReportCancelCircuit MESSAGE ReportCancelCircuit ::= 813
	FROM	TH,CH
	TO	PSN,TH

md_MsgReportCancelCircuit MessageDescriptor ::= { mdKind 3 }

MsgReportCancelOrder MESSAGE ReportCancelOrder ::= 805
	FROM	TH,CH
	TO	PSN,TH

md_MsgReportCancelOrder MessageDescriptor ::= { mdKind 3 }

MsgReportChangeOrder MESSAGE ReportChangeOrder ::= 803
	FROM	TH,CH
	TO	PSN,TH

md_MsgReportChangeOrder MessageDescriptor ::= { mdKind 3 }

MsgReportClearNEEvent MESSAGE ReportClearNEEvent ::= 3106
	FROM	AQH
	TO	UI

md_MsgReportClearNEEvent MessageDescriptor ::= { mdKind 3 }

MsgReportClearNMAlarm MESSAGE ReportClearNMAlarm ::= 760
	FROM	AQH
	TO	AUI,ADUM,UI

md_MsgReportClearNMAlarm MessageDescriptor ::= { mdKind 3 }

MsgReportCreateEM MESSAGE ReportCreateEM ::= 11
	FROM	CH
	TO	UI,UNLDR

md_MsgReportCreateEM MessageDescriptor ::= { mdKind 3 }

MsgReportCreateLink MESSAGE ReportCreateLink ::= 451
	FROM	CH
	TO	UI,LDR,PSB_CM

md_MsgReportCreateLink MessageDescriptor ::= { mdKind 3 }

MsgReportCreateLinkConnGroup MESSAGE ReportCreateLinkConnGroup ::= 1521
	FROM	CH
	TO	UI,INT_NM,PSB_CM

md_MsgReportCreateLinkConnGroup MessageDescriptor ::= { mdKind 3 }

MsgReportCreateMSSPRing MESSAGE ReportCreateMSSPRing ::= 2011
	FROM	CH
	TO	UI

md_MsgReportCreateMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportCreateObjResDomain MESSAGE ReportCreateObjResDomain ::= 3003
	FROM	CH
	TO	UI

md_MsgReportCreateObjResDomain MessageDescriptor ::= { mdKind 3 }

MsgReportCreateObjSNC MESSAGE ReportCreateObjSNC ::= 904
	FROM	CH
	TO	UI,LDR

md_MsgReportCreateObjSNC MessageDescriptor ::= { mdKind 3 }

MsgReportCreateObjUsersGroup MESSAGE ReportCreateObjUsersGroup ::= 3023
	FROM	CH
	TO	UI

md_MsgReportCreateObjUsersGroup MessageDescriptor ::= { mdKind 3 }

MsgReportCreatePath MESSAGE ReportCreatePath ::= 541
	FROM	CH
	TO	UI,DH,LDR,PSB_CM,LR

md_MsgReportCreatePath MessageDescriptor ::= { mdKind 3 }

MsgReportCreateSN MESSAGE ReportCreateSN ::= 231
	FROM	CH
	TO	UI,LDR,PSB_CM

md_MsgReportCreateSN MessageDescriptor ::= { mdKind 3 }

MsgReportCreateUser MESSAGE ReportCreateUser ::= 1141
	FROM	CH
	TO	UI

md_MsgReportCreateUser MessageDescriptor ::= { mdKind 3 }

MsgReportCreateUserProfile MESSAGE ReportCreateUserProfile ::= 1041
	FROM	CH
	TO	UI

md_MsgReportCreateUserProfile MessageDescriptor ::= { mdKind 3 }

MsgReportDeactivateLeg MESSAGE ReportDeactivateLeg ::= 1007
	FROM	CH
	TO	UI,TH,INT_NM,PSB_CM

md_MsgReportDeactivateLeg MessageDescriptor ::= { mdKind 3 }

MsgReportDeactivateMSSPRing MESSAGE ReportDeactivateMSSPRing ::= 2031
	FROM	CH
	TO	UI

md_MsgReportDeactivateMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportDeactivatePath MESSAGE ReportDeactivatePath ::= 581
	FROM	CH
	TO	UI,INT_NM,TH,PSB_CM,PQH

md_MsgReportDeactivatePath MessageDescriptor ::= { mdKind 3 }

MsgReportDeAssignPort MESSAGE ReportDeAssignPort ::= 833
	FROM	CH
	TO	INT_NM

md_MsgReportDeAssignPort MessageDescriptor ::= { mdKind 3 }

MsgReportDeleteObjAG MESSAGE ReportDeleteObjAG ::= 1203
	FROM	CH
	TO	UI,UNLDR,PSB_CM

md_MsgReportDeleteObjAG MessageDescriptor ::= { mdKind 3 }

MsgReportDeleteObjResDomain MESSAGE ReportDeleteObjResDomain ::= 3007
	FROM	CH
	TO	UI

md_MsgReportDeleteObjResDomain MessageDescriptor ::= { mdKind 3 }

MsgReportDeleteObjSNC MESSAGE ReportDeleteObjSNC ::= 908
	FROM	CH
	TO	UI

md_MsgReportDeleteObjSNC MessageDescriptor ::= { mdKind 3 }

MsgReportDeleteObjUsersGroup MESSAGE ReportDeleteObjUsersGroup ::= 3027
	FROM	CH
	TO	UI

md_MsgReportDeleteObjUsersGroup MessageDescriptor ::= { mdKind 3 }

MsgReportDeleteScanners MESSAGE ReportDeleteScanners ::= 713
	FROM	PH
	TO	UI

md_MsgReportDeleteScanners MessageDescriptor ::= { mdKind 3 }

MsgReportDisassociateMSSPRing MESSAGE ReportDisassociateMSSPRing ::= 2081
	FROM	CH
	TO	UI

md_MsgReportDisassociateMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportDisassociatePath MESSAGE ReportDisassociatePath ::= 597
	FROM	CH
	TO	UI,UNLDR,PSB_CM

md_MsgReportDisassociatePath MessageDescriptor ::= { mdKind 3 }

MsgReportExtendCircuit MESSAGE ReportExtendCircuit ::= 807
	FROM	TH
	TO	PSN

md_MsgReportExtendCircuit MessageDescriptor ::= { mdKind 3 }

MsgReportExtendTime MESSAGE ReportExtendTime ::= 823
	FROM	CH
	TO	TH

md_MsgReportExtendTime MessageDescriptor ::= { mdKind 3 }

MsgReportGetAggregatedNEState MESSAGE ReportGetAggregatedNEState ::= 206
	FROM	EH
	TO	ADUM

md_MsgReportGetAggregatedNEState MessageDescriptor ::= { mdKind 3 }

MsgReportGetAggregatedNMStatus MESSAGE ReportGetAggregatedNMStatus ::= 204
	FROM	ADUM
	TO	AUI

md_MsgReportGetAggregatedNMStatus MessageDescriptor ::= { mdKind 3 }

MsgReportGetAGList MESSAGE ReportGetAGList ::= 425
	FROM	CH,MR
	TO	UI,PSB_CM

md_MsgReportGetAGList MessageDescriptor ::= { mdKind 3 }

MsgReportGetAnchorRoute MESSAGE ReportGetAnchorRoute ::= 1009
	FROM	CH
	TO	UI

md_MsgReportGetAnchorRoute MessageDescriptor ::= { mdKind 3 }

MsgReportGetAutoLink MESSAGE ReportGetAutoLink ::= 515
	FROM	CH
	TO	UI

md_MsgReportGetAutoLink MessageDescriptor ::= { mdKind 3 }

MsgReportGetAutoLinkConn MESSAGE ReportGetAutoLinkConn ::= 517
	FROM	CH
	TO	UI

md_MsgReportGetAutoLinkConn MessageDescriptor ::= { mdKind 3 }

MsgReportGetAutoRingInfo MESSAGE ReportGetAutoRingInfo ::= 2005
	FROM	CH
	TO	UI

md_MsgReportGetAutoRingInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetAutoRingLink MESSAGE ReportGetAutoRingLink ::= 2007
	FROM	CH
	TO	UI

md_MsgReportGetAutoRingLink MessageDescriptor ::= { mdKind 3 }

MsgReportGetAutoRoute MESSAGE ReportGetAutoRoute ::= 513
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetAutoRoute MessageDescriptor ::= { mdKind 3 }

MsgReportGetBearerLinkConnList MESSAGE ReportGetBearerLinkConnList ::= 416
	FROM	CH
	TO	UI

md_MsgReportGetBearerLinkConnList MessageDescriptor ::= { mdKind 3 }

MsgReportGetCardList MESSAGE ReportGetCardList ::= 421
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetCardList MessageDescriptor ::= { mdKind 3 }

MsgReportGetCircDisplay MESSAGE ReportGetCircDisplay ::= 595
	FROM	CH
	TO	UI

md_MsgReportGetCircDisplay MessageDescriptor ::= { mdKind 3 }

MsgReportDisplayLSPathObj MESSAGE ReportDisplayLSPathObj ::= 5029
	FROM	CPM
	TO	UI

md_MsgReportDisplayLSPathObj MessageDescriptor ::= { mdKind 3 }

MsgReportGetCircInPathList MESSAGE ReportGetCircInPathList ::= 1033
	FROM	CH
	TO	UI

md_MsgReportGetCircInPathList MessageDescriptor ::= { mdKind 3 }

MsgReportGetCircList MESSAGE ReportGetCircList ::= 771
	FROM	PQH
	TO	UI

md_MsgReportGetCircList MessageDescriptor ::= { mdKind 3 }

MsgReportGetCompleteTrailRouteInfo MESSAGE ReportGetCompleteTrailRouteInfo ::= 519
	FROM	RS
	TO	UI

md_MsgReportGetCompleteTrailRouteInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetDefaultPreferences MESSAGE ReportGetDefaultPreferences ::= 3213
	FROM	CH
	TO	UI

md_MsgReportGetDefaultPreferences MessageDescriptor ::= { mdKind 3 }

MsgReportGetEMAlarmHistory MESSAGE ReportGetEMAlarmHistory ::= 764
	FROM	AQH
	TO	UI

md_MsgReportGetEMAlarmHistory MessageDescriptor ::= { mdKind 3 }

MsgReportGetEMAlarmList MESSAGE ReportGetEMAlarmList ::= 756
	FROM	AQH
	TO	UI,AUI,INT_NM,PSB_FM

md_MsgReportGetEMAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportGetEMInfo MESSAGE ReportGetEMInfo ::= 31
	FROM	CH
	TO	UI

md_MsgReportGetEMInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetEMList MESSAGE ReportGetEMList ::= 21
	FROM	CH
	TO	UI,LDR,UNLDR,PSB_CM

md_MsgReportGetEMList MessageDescriptor ::= { mdKind 3 }

MsgReportGetFastAutoRoute MESSAGE ReportGetFastAutoRoute ::= 521
	FROM	FARH
	TO	UI,CH,LR

md_MsgReportGetFastAutoRoute MessageDescriptor ::= { mdKind 3 }

MsgReportGetLegList MESSAGE ReportGetLegList ::= 18
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetLegList MessageDescriptor ::= { mdKind 3 }

MsgReportGetLinkConnList MESSAGE ReportGetLinkConnList ::= 409
	FROM	CH,MR
	TO	UI,PSB_CM

md_MsgReportGetLinkConnList MessageDescriptor ::= { mdKind 3 }

MsgReportGetLinkInfo MESSAGE ReportGetLinkInfo ::= 411
	FROM	CH
	TO	UI

md_MsgReportGetLinkInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetLnLinkList MESSAGE ReportGetLnLinkList ::= 403
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetLnLinkList MessageDescriptor ::= { mdKind 3 }

MsgReportGetLoggedUsersList MESSAGE ReportGetLoggedUsersList ::= 1192
	FROM	CH
	TO	UI

md_MsgReportGetLoggedUsersList MessageDescriptor ::= { mdKind 3 }

MsgReportGetLogicalTTPList MESSAGE ReportGetLogicalTTPList ::= 491
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetLogicalTTPList MessageDescriptor ::= { mdKind 3 }

MsgReportGetLogicalTTPName MESSAGE ReportGetLogicalTTPName ::= 429
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetLogicalTTPName MessageDescriptor ::= { mdKind 3 }

MsgReportGetM1400Name MESSAGE ReportGetM1400Name ::= 414
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetM1400Name MessageDescriptor ::= { mdKind 3 }

MsgReportGetManualRingInfo MESSAGE ReportGetManualRingInfo ::= 2003
	FROM	CH
	TO	UI

md_MsgReportGetManualRingInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetSNId MESSAGE ReportGetSNId ::= 2053
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetSNId MessageDescriptor ::= { mdKind 3 }

MsgReportGetManualRouteInfo MESSAGE ReportGetManualRouteInfo ::= 511
	FROM	CH
	TO	UI,DH,PSB_CM

md_MsgReportGetManualRouteInfo MessageDescriptor ::= { mdKind 3 }


MsgReportGetMSSPRingInfo MESSAGE ReportGetMSSPRingInfo ::= 2051
	FROM	CH
	TO	UI

md_MsgReportGetMSSPRingInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetMSSPRingList MESSAGE ReportGetMSSPRingList ::= 2001
	FROM	CH
	TO	UI

md_MsgReportGetMSSPRingList MessageDescriptor ::= { mdKind 3 }

MsgReportGetMSSPRingStatus MESSAGE ReportGetMSSPRingStatus ::= 2071
	FROM	CH
	TO	UI

md_MsgReportGetMSSPRingStatus MessageDescriptor ::= { mdKind 3 }

MsgReportGetMSSPRingSwitchCmd MESSAGE ReportGetMSSPRingSwitchCmd ::= 2095
	FROM	CH
	TO	UI

md_MsgReportGetMSSPRingSwitchCmd MessageDescriptor ::= { mdKind 3 }

MsgReportGetNEEventList MESSAGE ReportGetNEEventList ::= 302
	FROM	AQH
	TO	UI,LDR

md_MsgReportGetNEEventList MessageDescriptor ::= { mdKind 3 }

MsgReportGetNEList MESSAGE ReportGetNEList ::= 111
	FROM	CH
	TO	UI,LDR,UNLDR,PSB_CM

md_MsgReportGetNEList MessageDescriptor ::= { mdKind 3 }

MsgReportGetNMAlarmHistory MESSAGE ReportGetNMAlarmHistory ::= 762
	FROM	AQH
	TO	ADUM,AUI,UI

md_MsgReportGetNMAlarmHistory MessageDescriptor ::= { mdKind 3 }

MsgReportUpdateCircuits MESSAGE ReportUpdateCircuits ::= 1186
        FROM    CH
        TO      PQH

md_MsgReportUpdateCircuits MessageDescriptor ::= { mdKind 3 }

MsgReportRestoreMasterProtRoute MESSAGE ReportRestoreMasterProtRoute ::= 788
        FROM CH
        TO   PQH
md_MsgReportRestoreMasterProtRoute MessageDescriptor ::= { mdKind 3 }

MsgReportGetNMAlarmList MESSAGE ReportGetNMAlarmList ::= 751
	FROM	AQH
	TO	UI,AUI,ADUM,PSN,INT_NM,PSB_FM

md_MsgReportGetNMAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportGetNMCorrelate MESSAGE ReportGetNMCorrelate ::= 12
	FROM	DBQH
	TO	AUI,UI,ADUM,PSB_FM

md_MsgReportGetNMCorrelate MessageDescriptor ::= { mdKind 3 }

MsgReportGetAllRootCauseAlarmList MESSAGE ReportGetAllRootCauseAlarmList ::= 24
	FROM    DBQH
	TO      UI

md_MsgReportGetAllRootCauseAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportGetNodePortsInfo MESSAGE ReportGetNodePortsInfo ::= 835
	FROM	CH
	TO	INT_NM

md_MsgReportGetNodePortsInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjResDomain MESSAGE ReportGetObjResDomain ::= 3001
	FROM	CH
	TO	UI

md_MsgReportGetObjResDomain MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjSNC MESSAGE ReportGetObjSNC ::= 906
	FROM	CH
	TO	UI

md_MsgReportGetObjSNC MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjThreshold MESSAGE ReportGetObjThreshold ::= 732
	FROM	PH
	TO	UI

md_MsgReportGetObjThreshold MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjTrail MESSAGE ReportGetObjTrail ::= 3201
	FROM	CH
	TO	UI

md_MsgReportGetObjTrail MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjTrailTrace MESSAGE ReportGetObjTrailTrace ::= 3203
	FROM	CH
	TO	UI

md_MsgReportGetObjTrailTrace MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjUsersGroup MESSAGE ReportGetObjUsersGroup ::= 3021
	FROM	CH
	TO	UI

md_MsgReportGetObjUsersGroup MessageDescriptor ::= { mdKind 3 }

MsgReportGetObjPath MESSAGE ReportGetObjPath ::= 3215
	FROM	CH
	TO	UI

md_MsgReportGetObjPath MessageDescriptor ::= { mdKind 3 }

MsgReportSetObjPath MESSAGE ReportSetObjPath ::= 3217
	FROM	CH
	TO	UI

md_MsgReportSetObjPath MessageDescriptor ::= { mdKind 3 }

MsgReportGetPathInfo MESSAGE ReportGetPathInfo ::= 588
	FROM	CH
	TO	UI,INT_NM,PSB_CM,LR

md_MsgReportGetPathInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetPathList MESSAGE ReportGetPathList ::= 509
	FROM	CH
	TO	UI,PSB_CM,LR

md_MsgReportGetPathList MessageDescriptor ::= { mdKind 3 }

MsgReportGetPerfNumbers MESSAGE ReportGetPerfNumbers ::= 721
	FROM	PH
	TO	UI

md_MsgReportGetPerfNumbers MessageDescriptor ::= { mdKind 3 }

MsgReportGetPerfReport MESSAGE ReportGetPerfReport ::= 727
	FROM	PH
	TO	UI

md_MsgReportGetPerfReport MessageDescriptor ::= { mdKind 3 }

MsgReportGetPhysicalTTPName MESSAGE ReportGetPhysicalTTPName ::= 493
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetPhysicalTTPName MessageDescriptor ::= { mdKind 3 }

MsgReportGetPortList MESSAGE ReportGetPortList ::= 1201
	FROM	CH
	TO	UI

md_MsgReportGetPortList MessageDescriptor ::= { mdKind 3 }

MsgReportGetProfiledTrails MESSAGE ReportGetProfiledTrails ::= 719
	FROM	PH
	TO	UI

md_MsgReportGetProfiledTrails MessageDescriptor ::= { mdKind 3 }

MsgReportGetRHTrace MESSAGE ReportGetRHTrace ::= 151
	FROM	CH
	TO	UI

md_MsgReportGetRHTrace MessageDescriptor ::= { mdKind 3 }

MsgReportGetScannerInfo MESSAGE ReportGetScannerInfo ::= 725
	FROM	PH
	TO	UI

md_MsgReportGetScannerInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetScannerList MESSAGE ReportGetScannerList ::= 703
	FROM	PH
	TO	UI

md_MsgReportGetScannerList MessageDescriptor ::= { mdKind 3 }

MsgReportGetSdhStructure MESSAGE ReportGetSdhStructure ::= 405
	FROM	CH
	TO	UI,DH,LDR

md_MsgReportGetSdhStructure MessageDescriptor ::= { mdKind 3 }

MsgReportGetSigLnTypeMeasures MESSAGE ReportGetSigLnTypeMeasures ::= 701
	FROM	PH
	TO	UI,INT_NM

md_MsgReportGetSigLnTypeMeasures MessageDescriptor ::= { mdKind 3 }

MsgReportGetSNCList MESSAGE ReportGetSNCList ::= 901
	FROM	CH,MR
	TO	UI

md_MsgReportGetSNCList MessageDescriptor ::= { mdKind 3 }

MsgReportGetSNContents MESSAGE ReportGetSNContents ::= 305
	FROM	CH
	TO	UI

md_MsgReportGetSNContents MessageDescriptor ::= { mdKind 3 }

MsgReportGetSNInfo MESSAGE ReportGetSNInfo ::= 221
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetSNInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetSNInLink MESSAGE ReportGetSNInLink ::= 213
	FROM	CH
	TO	UI

md_MsgReportGetSNInLink MessageDescriptor ::= { mdKind 3 }

MsgReportGetSNList MESSAGE ReportGetSNList ::= 211
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetSNList MessageDescriptor ::= { mdKind 3 }

MsgReportGetSonetStructure MESSAGE ReportGetSonetStructure ::= 441
	FROM	CH
	TO	UI,DH,LDR

md_MsgReportGetSonetStructure MessageDescriptor ::= { mdKind 3 }

MsgReportGetSupportingTPList MESSAGE ReportGetSupportingTPList ::= 754
	FROM	CH,DBQH
	TO	AUI,ADUM,UI,PSB_CM,PSB_FM

md_MsgReportGetSupportingTPList MessageDescriptor ::= { mdKind 3 }

MsgReportGetTPRouting MESSAGE ReportGetTPRouting ::= 841
	FROM	CH
	TO	PSB_CM

md_MsgReportGetTPRouting MessageDescriptor ::= { mdKind 3 }

MsgReportGetTrailList MESSAGE ReportGetTrailList ::= 4001
	FROM	CH
	TO	UI

md_MsgReportGetTrailList MessageDescriptor ::= { mdKind 3 }

MsgReportGetTree MESSAGE ReportGetTree ::= 611
	FROM	CH
	TO	UI

md_MsgReportGetTree MessageDescriptor ::= { mdKind 3 }

MsgReportGetTTPList MESSAGE ReportGetTTPList ::= 423
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportGetTTPList MessageDescriptor ::= { mdKind 3 }

MsgReportGetUserInfo MESSAGE ReportGetUserInfo ::= 1131
	FROM	CH
	TO	UI

md_MsgReportGetUserInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetUserLinkDetails MESSAGE ReportGetUserLinkDetails ::= 251
	FROM	CH
	TO	UI

md_MsgReportGetUserLinkDetails MessageDescriptor ::= { mdKind 3 }

MsgReportGetUserList MESSAGE ReportGetUserList ::= 1121
	FROM	CH
	TO	UI

md_MsgReportGetUserList MessageDescriptor ::= { mdKind 3 }

MsgReportGetUserProfileInfo MESSAGE ReportGetUserProfileInfo ::= 1021
	FROM	CH
	TO	UI

md_MsgReportGetUserProfileInfo MessageDescriptor ::= { mdKind 3 }

MsgReportGetUserProfileList MESSAGE ReportGetUserProfileList ::= 1011
	FROM	CH
	TO	UI

md_MsgReportGetUserProfileList MessageDescriptor ::= { mdKind 3 }

MsgReportGetViewList MESSAGE ReportGetViewList ::= 1031
	FROM	CH
	TO	UI

md_MsgReportGetViewList MessageDescriptor ::= { mdKind 3 }

MsgReportGetWorkingSide MESSAGE ReportGetWorkingSide ::= 593
	FROM	CH
	TO	UI,INT_NM

md_MsgReportGetWorkingSide MessageDescriptor ::= { mdKind 3 }

MsgReportGetLSPathObjWorkingSide MESSAGE ReportGetLSPathObjWorkingSide ::= 5031
	FROM	CPM
	TO	UI

md_MsgReportGetLSPathObjWorkingSide MessageDescriptor ::= { mdKind 3 }

MsgReportIncludeSN MESSAGE ReportIncludeSN ::= 271
	FROM	CH
	TO	UI

md_MsgReportIncludeSN MessageDescriptor ::= { mdKind 3 }

MsgReportInsertSNInLink MESSAGE ReportInsertSNInLink ::= 3207
	FROM	CH
	TO	UI

md_MsgReportInsertSNInLink MessageDescriptor ::= { mdKind 3 }

MsgReportInstallNE MESSAGE ReportInstallNE ::= 121
	FROM	CH
	TO	UI,LDR,PSB_CM

md_MsgReportInstallNE MessageDescriptor ::= { mdKind 3 }

MsgReportLogin MESSAGE ReportLogin ::= 1171
	FROM	CH
	TO	UI,PSN,TH,INT_NM,PSB_CM,PSB_FM

md_MsgReportLogin MessageDescriptor ::= { mdKind 3 }

MsgReportLogout MESSAGE ReportLogout ::= 1181
	FROM	CH
	TO	UI,INT_NM,PSB_CM,PSB_FM

md_MsgReportLogout MessageDescriptor ::= { mdKind 3 }

MsgReportManagedVSNLogin MESSAGE ReportManagedVSNLogin ::= 3211
	FROM	CH
	TO	UI

md_MsgReportManagedVSNLogin MessageDescriptor ::= { mdKind 3 }

MsgReportModifyGroupTP MESSAGE ReportModifyGroupTP ::= 499
	FROM	CH
	TO	UI

md_MsgReportModifyGroupTP MessageDescriptor ::= { mdKind 3 }

MsgReportModifyLink MESSAGE ReportModifyLink ::= 431
	FROM	CH
	TO	UI

md_MsgReportModifyLink MessageDescriptor ::= { mdKind 3 }

MsgReportModifyMeasure MESSAGE ReportModifyMeasure ::= 709
	FROM	PH
	TO	UI

md_MsgReportModifyMeasure MessageDescriptor ::= { mdKind 3 }

MsgReportModifyMSSPRing MESSAGE ReportModifyMSSPRing ::= 2061
	FROM	CH
	TO	UI

md_MsgReportModifyMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportModifyNutChannels MESSAGE ReportModifyNutChannels ::= 3041
	FROM	CH
	TO	UI

md_MsgReportModifyNutChannels MessageDescriptor ::= { mdKind 3 }

MsgReportModifyPath MESSAGE ReportModifyPath ::= 591
	FROM	CH
	TO	UI,INT_NM,PSB_CM,FXR

md_MsgReportModifyPath MessageDescriptor ::= { mdKind 3 }

MsgReportModifySetOfPaths MESSAGE ReportModifySetOfPaths ::= 1321
	FROM	CH
	TO	UI

md_MsgReportModifySetOfPaths MessageDescriptor ::= { mdKind 3 }

MsgReportModifySN MESSAGE ReportModifySN ::= 291
	FROM	CH
	TO	UI,INT_NM

md_MsgReportModifySN MessageDescriptor ::= { mdKind 3 }

MsgReportModifyUser MESSAGE ReportModifyUser ::= 1151
	FROM	CH
	TO	UI

md_MsgReportModifyUser MessageDescriptor ::= { mdKind 3 }

MsgReportModifyUserProfile MESSAGE ReportModifyUserProfile ::= 1051
	FROM	CH
	TO	UI

md_MsgReportModifyUserProfile MessageDescriptor ::= { mdKind 3 }

MsgReportNewOrder MESSAGE ReportNewOrder ::= 801
	FROM	TH,CH
	TO	PSN,TH

md_MsgReportNewOrder MessageDescriptor ::= { mdKind 3 }

MsgReportOpenSN MESSAGE ReportOpenSN ::= 241
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportOpenSN MessageDescriptor ::= { mdKind 3 }

MsgReportOpenSNParent MESSAGE ReportOpenSNParent ::= 307
	FROM	CH
	TO	UI

md_MsgReportOpenSNParent MessageDescriptor ::= { mdKind 3 }

MsgReportOptPassthrough MESSAGE ReportOptPassthrough ::= 16
	FROM	UI
	TO	CH

md_MsgReportOptPassthrough MessageDescriptor ::= { mdKind 3 }

MsgReportPassthrough MESSAGE ReportPassthrough ::= 14
	FROM	UI
	TO	CH

md_MsgReportPassthrough MessageDescriptor ::= { mdKind 3 }

MsgReportReadCircuits MESSAGE ReportReadCircuits ::= 815
	FROM	TH,CH
	TO	PSN,TH

md_MsgReportReadCircuits MessageDescriptor ::= { mdKind 3 }

MsgReportReadConfiguration MESSAGE ReportReadConfiguration ::= 829
	FROM	CH
	TO	TH

md_MsgReportReadConfiguration MessageDescriptor ::= { mdKind 3 }

MsgReportReadTPs MESSAGE ReportReadTPs ::= 817
	FROM	TH,CH
	TO	PSN,TH,PSB_CM

md_MsgReportReadTPs MessageDescriptor ::= { mdKind 3 }

MsgReportRealignEM MESSAGE ReportRealignEM ::= 61
	FROM	CH
	TO	UI,LDR,UNLDR,PSB_CM

md_MsgReportRealignEM MessageDescriptor ::= { mdKind 3 }

MsgReportRealignNE MESSAGE ReportRealignNE ::= 141
	FROM	CH
	TO	UI,PSB_CM,LDR

md_MsgReportRealignNE MessageDescriptor ::= { mdKind 3 }

MsgReportReconnectEM MESSAGE ReportReconnectEM ::= 71
	FROM	CH
	TO	UI

md_MsgReportReconnectEM MessageDescriptor ::= { mdKind 3 }

MsgReportReloadThrProfiles MESSAGE ReportReloadThrProfiles ::= 730
	FROM	PH
	TO	UI

md_MsgReportReloadThrProfiles MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveEM MESSAGE ReportRemoveEM ::= 41
	FROM	CH
	TO	UI

md_MsgReportRemoveEM MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveGetEMAlarmList MESSAGE ReportRemoveGetEMAlarmList ::= 784
	FROM	AQH
	TO	UI,INT_NM

md_MsgReportRemoveGetEMAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveGetNMAlarmList MESSAGE ReportRemoveGetNMAlarmList ::= 781
	FROM	AQH
	TO	UI,INT_NM

md_MsgReportRemoveGetNMAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveLeg MESSAGE ReportRemoveLeg ::= 1003
	FROM	CH
	TO	UI,PSB_CM

md_MsgReportRemoveLeg MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveLegs MESSAGE ReportRemoveLegs ::= 827
	FROM	CH
	TO	TH,PSB_CM

md_MsgReportRemoveLegs MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveLink MESSAGE ReportRemoveLink ::= 471
	FROM	CH
	TO	UI,INT_NM,UNLDR,PSB_CM

md_MsgReportRemoveLink MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveLinkConnGroup MESSAGE ReportRemoveLinkConnGroup ::= 1523
	FROM	CH
	TO	UI,INT_NM,PSB_CM

md_MsgReportRemoveLinkConnGroup MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveMSSPRing MESSAGE ReportRemoveMSSPRing ::= 2041
	FROM	CH
	TO	UI

md_MsgReportRemoveMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportRemovePath MESSAGE ReportRemovePath ::= 586
	FROM	CH
	TO	UI,INT_NM,PSB_CM

md_MsgReportRemovePath MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveSN MESSAGE ReportRemoveSN ::= 308
	FROM	CH
	TO	UI,UNLDR,PSB_CM

md_MsgReportRemoveSN MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveUser MESSAGE ReportRemoveUser ::= 1161
	FROM	CH
	TO	UI

md_MsgReportRemoveUser MessageDescriptor ::= { mdKind 3 }

MsgReportRemoveUserProfile MESSAGE ReportRemoveUserProfile ::= 1061
	FROM	CH
	TO	UI

md_MsgReportRemoveUserProfile MessageDescriptor ::= { mdKind 3 }

MsgReportReplaceCircuit MESSAGE ReportReplaceCircuit ::= 809
	FROM	TH
	TO	PSN

md_MsgReportReplaceCircuit MessageDescriptor ::= { mdKind 3 }

MsgReportRerouteCircuit MESSAGE ReportRerouteCircuit ::= 811
	FROM	TH,CH
	TO	PSN,TH

md_MsgReportRerouteCircuit MessageDescriptor ::= { mdKind 3 }

MsgReportReserveAddProt MESSAGE ReportReserveAddProt ::= 1027
	FROM	CH
	TO	TH,INT_NM

md_MsgReportReserveAddProt MessageDescriptor ::= { mdKind 3 }

MsgReportReserveLeg MESSAGE ReportReserveLeg ::= 1025
	FROM	CH
	TO	TH,INT_NM

md_MsgReportReserveLeg MessageDescriptor ::= { mdKind 3 }

MsgReportReserveLink MESSAGE ReportReserveLink ::= 1515
	FROM	CH
	TO	INT_NM

md_MsgReportReserveLink MessageDescriptor ::= { mdKind 3 }

MsgReportReservePath MESSAGE ReportReservePath ::= 1023
	FROM	CH
	TO	TH,INT_NM

md_MsgReportReservePath MessageDescriptor ::= { mdKind 3 }

MsgReportReserveRemoveLeg MESSAGE ReportReserveRemoveLeg ::= 1301
	FROM	CH
	TO	INT_NM

md_MsgReportReserveRemoveLeg MessageDescriptor ::= { mdKind 3 }

MsgReportRestorePathOrLink MESSAGE ReportRestorePathOrLink ::= 776
	FROM	CH
	TO	PQH,UI

md_MsgReportRestorePathOrLink MessageDescriptor ::= { mdKind 3 }

MsgReportSetAlarmOptions MESSAGE ReportSetAlarmOptions ::= 605
	FROM	CH
	TO	UI,AUI

md_MsgReportSetAlarmOptions MessageDescriptor ::= { mdKind 3 }

MsgReportSetClientTrafficType MESSAGE ReportSetClientTrafficType ::= 418
	FROM	CH
	TO	UI

md_MsgReportSetClientTrafficType MessageDescriptor ::= { mdKind 3 }

MsgReportSetConfigMSSPRing MESSAGE ReportSetConfigMSSPRing ::= 3011
	FROM	CH
	TO	UI

md_MsgReportSetConfigMSSPRing MessageDescriptor ::= { mdKind 3 }

MsgReportSetLogicalTTPName MESSAGE ReportSetLogicalTTPName ::= 495
	FROM	CH
	TO	UI,INT_NM

md_MsgReportSetLogicalTTPName MessageDescriptor ::= { mdKind 3 }

MsgReportSetObjResDomain MESSAGE ReportSetObjResDomain ::= 3005
	FROM	CH
	TO	UI

md_MsgReportSetObjResDomain MessageDescriptor ::= { mdKind 3 }

MsgReportSetObjSNC MESSAGE ReportSetObjSNC ::= 910
	FROM	CH
	TO	UI

md_MsgReportSetObjSNC MessageDescriptor ::= { mdKind 3 }

MsgReportSetObjTrail MESSAGE ReportSetObjTrail ::= 3209
	FROM	CH
	TO	UI,LDR,UNLDR,FXR

md_MsgReportSetObjTrail MessageDescriptor ::= { mdKind 3 }

MsgReportSetObjTrailTrace MESSAGE ReportSetObjTrailTrace ::= 3205
	FROM	CH
	TO	UI

md_MsgReportSetObjTrailTrace MessageDescriptor ::= { mdKind 3 }

MsgReportSetObjUsersGroup MESSAGE ReportSetObjUsersGroup ::= 3025
	FROM	CH
	TO	UI

md_MsgReportSetObjUsersGroup MessageDescriptor ::= { mdKind 3 }

MsgReportSetPathInfo MESSAGE ReportSetPathInfo ::= 2091
	FROM	CH
	TO	UI

md_MsgReportSetPathInfo MessageDescriptor ::= { mdKind 3 }

MsgReportSetPreferences MESSAGE ReportSetPreferences ::= 601
	FROM	CH
	TO	UI

md_MsgReportSetPreferences MessageDescriptor ::= { mdKind 3 }

MsgReportSetSdhStructure MESSAGE ReportSetSdhStructure ::= 407
	FROM	CH
	TO	UI,DH,INT_NM,LDR,PSB_CM

md_MsgReportSetSdhStructure MessageDescriptor ::= { mdKind 3 }

MsgReportSetSNsCoord MESSAGE ReportSetSNsCoord ::= 293
	FROM	CH
	TO	UI

md_MsgReportSetSNsCoord MessageDescriptor ::= { mdKind 3 }

MsgReportSetSonetStructure MESSAGE ReportSetSonetStructure ::= 443
	FROM	CH
	TO	UI,DH,INT_NM,LDR

md_MsgReportSetSonetStructure MessageDescriptor ::= { mdKind 3 }

MsgReportSetThrProfile MESSAGE ReportSetThrProfile ::= 715
	FROM	PH
	TO	UI

md_MsgReportSetThrProfile MessageDescriptor ::= { mdKind 3 }

MsgReportStopCircList MESSAGE ReportStopCircList ::= 774
	FROM	PQH
	TO	UI

md_MsgReportStopCircList MessageDescriptor ::= { mdKind 3 }

MsgReportStopEMAlarmList MESSAGE ReportStopEMAlarmList ::= 768
	FROM	AQH
	TO	ADUM,AUI,UI,INT_NM,PSB_FM

md_MsgReportStopEMAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportStopNEEventList MESSAGE ReportStopNEEventList ::= 3104
	FROM	AQH
	TO	UI

md_MsgReportStopNEEventList MessageDescriptor ::= { mdKind 3 }

MsgReportStopNMAlarmList MESSAGE ReportStopNMAlarmList ::= 766
	FROM	AQH
	TO	ADUM,AUI,UI,PSN,INT_NM,PSB_FM

md_MsgReportStopNMAlarmList MessageDescriptor ::= { mdKind 3 }

MsgReportSubmitMeasure MESSAGE ReportSubmitMeasure ::= 707
	FROM	PH
	TO	UI,INT_NM

md_MsgReportSubmitMeasure MessageDescriptor ::= { mdKind 3 }

MsgReportSwapPath MESSAGE ReportSwapPath ::= 1029
	FROM	CH
	TO	UI,INT_NM

md_MsgReportSwapPath MessageDescriptor ::= { mdKind 3 }

MsgReportSwitchMSSPRingNE MESSAGE ReportSwitchMSSPRingNE ::= 2093
	FROM	CH
	TO	UI

md_MsgReportSwitchMSSPRingNE MessageDescriptor ::= { mdKind 3 }

MsgReportUnsetThrProfile MESSAGE ReportUnsetThrProfile ::= 717
	FROM	PH
	TO	UI

md_MsgReportUnsetThrProfile MessageDescriptor ::= { mdKind 3 }

MsgReportUserInterfaceManagement MESSAGE ReportUserInterfaceManagement ::= 1211
	FROM	CH
	TO	UI

md_MsgReportUserInterfaceManagement MessageDescriptor ::= { mdKind 3 }

MsgUserInterfaceManagementEvent MESSAGE UserInterfaceEvent ::= 5169
	FROM	CH
	TO	UI

md_MsgReportUnsetThrProfile MessageDescriptor ::= { mdKind 4 }

MsgRerouteCircuits MESSAGE RerouteCircuits ::= 810
	FROM	PSN
	TO	TH

md_MsgRerouteCircuits MessageDescriptor ::= { mdKind 4 }

MsgReserveAddProt MESSAGE ReserveAddProt ::= 1026
	FROM	TH,INT_NM
	TO	CH

md_MsgReserveAddProt MessageDescriptor ::= { mdKind 1,mdReport 1027 }

MsgReserveLeg MESSAGE ReserveLeg ::= 1024
	FROM	TH,INT_NM
	TO	CH

md_MsgReserveLeg MessageDescriptor ::= { mdKind 1,mdReport 1025 }

MsgReserveLink MESSAGE ReserveLink ::= 1514
	FROM	INT_NM
	TO	CH

md_MsgReserveLink MessageDescriptor ::= { mdKind 1,mdReport 1515 }

MsgReservePath MESSAGE ReservePath ::= 1022
	FROM	TH,INT_NM
	TO	CH

md_MsgReservePath MessageDescriptor ::= { mdKind 1,mdReport 1023 }

MsgReserveRemoveLeg MESSAGE ReserveRemoveLeg ::= 1300
	FROM	INT_NM
	TO	CH

md_MsgReserveRemoveLeg MessageDescriptor ::= { mdKind 1,mdReport 1301 }

MsgResourceList MESSAGE ResourceList ::= 22
	FROM	EH
	TO	INT_NM

md_MsgResourceList MessageDescriptor ::= { mdKind 4 }

MsgRestorePathOrLink MESSAGE RestorePathOrLink ::= 775
	FROM	PQH,UI
	TO	CH

md_MsgRestorePathOrLink MessageDescriptor ::= { mdKind 1,mdReport 776 }

MsgRestoreMasterProtRoute MESSAGE RestoreMasterProtRoute ::= 786
	FROM	PQH
	TO	CH
md_MsgRestoreMasterProtRoute MessageDescriptor ::= { mdKind 1,mdReport 788 }

MsgSetAlarmOptions MESSAGE SetAlarmOptions ::= 604
	FROM	AUI,UI
	TO	CH

md_MsgSetAlarmOptions MessageDescriptor ::= { mdKind 1,mdReport 605 }

MsgSetClientTrafficType MESSAGE SetClientTrafficType ::= 417
	FROM	UI
	TO	CH

md_MsgSetClientTrafficType MessageDescriptor ::= { mdKind 1,mdReport 418 }

MsgSetConfigMSSPRing MESSAGE SetConfigMSSPRing ::= 3010
	FROM	UI
	TO	CH

md_MsgSetConfigMSSPRing MessageDescriptor ::= { mdKind 1,mdReport 3011 }

MsgSetCTTReport MESSAGE SetCTTReport ::= 3033
	FROM	CH
	TO	UI

md_MsgSetCTTReport MessageDescriptor ::= { mdKind 1,mdReport 3011 }

MsgSetLogicalTTPName MESSAGE SetLogicalTTPName ::= 494
	FROM	UI,INT_NM
	TO	CH

md_MsgSetLogicalTTPName MessageDescriptor ::= { mdKind 1,mdReport 495 }

MsgSetObjResDomain MESSAGE SetObjResDomain ::= 3004
	FROM	UI
	TO	CH

md_MsgSetObjResDomain MessageDescriptor ::= { mdKind 1,mdReport 3005 }

MsgSetObjSNC MESSAGE SetObjSNC ::= 909
	FROM	UI
	TO	CH

md_MsgSetObjSNC MessageDescriptor ::= { mdKind 1,mdReport 910 }

MsgSetObjTrail MESSAGE SetObjTrail ::= 3208
	FROM	UI,LDR,UNLDR,FXR
	TO	CH

md_MsgSetObjTrail MessageDescriptor ::= { mdKind 1,mdReport 3209 }

MsgSetObjTrailTrace MESSAGE SetObjTrailTrace ::= 3204
	FROM	UI
	TO	CH

md_MsgSetObjTrailTrace MessageDescriptor ::= { mdKind 1,mdReport 3205 }

MsgSetObjUsersGroup MESSAGE SetObjUsersGroup ::= 3024
	FROM	UI
	TO	CH

md_MsgSetObjUsersGroup MessageDescriptor ::= { mdKind 1,mdReport 3025 }

MsgSetPathInfo MESSAGE SetPathInfo ::= 2090
	FROM	UI
	TO	CH

md_MsgSetPathInfo MessageDescriptor ::= { mdKind 1,mdReport 2091 }

MsgSetPreferences MESSAGE SetPreferences ::= 600
	FROM	UI
	TO	CH

md_MsgSetPreferences MessageDescriptor ::= { mdKind 1,mdReport 601 }

MsgSetSdhStructure MESSAGE SetSdhStructure ::= 406
	FROM	UI,DH,INT_NM,LDR,PSB_CM
	TO	CH

md_MsgSetSdhStructure MessageDescriptor ::= { mdKind 1,mdReport 407 }

MsgSetSNsCoord MESSAGE SetSNsCoord ::= 292
	FROM	UI
	TO	CH

md_MsgSetSNsCoord MessageDescriptor ::= { mdKind 1,mdReport 293 }

MsgSetSonetStructure MESSAGE SetSonetStructure ::= 442
	FROM	UI,DH,INT_NM,LDR
	TO	CH

md_MsgSetSonetStructure MessageDescriptor ::= { mdKind 1,mdReport 443 }

MsgSetThrProfile MESSAGE SetThrProfile ::= 714
	FROM	UI
	TO	PH

md_MsgSetThrProfile MessageDescriptor ::= { mdKind 1,mdReport 715 }

MsgSNChanged MESSAGE SNChanged ::= 330
	FROM	CH,EH
	TO	UI,INT_NM

md_MsgSNChanged MessageDescriptor ::= { mdKind 4 }

MsgSNCModified MESSAGE SNCModified ::= 902
	FROM	CH
	TO	UI

md_MsgSNCModified MessageDescriptor ::= { mdKind 4 }

MsgSNModified MESSAGE SNModified ::= 310
	FROM	CH
	TO	UI

md_MsgSNModified MessageDescriptor ::= { mdKind 4 }

MsgStopCircList MESSAGE StopCircList ::= 773
	FROM	UI
	TO	PQH

md_MsgStopCircList MessageDescriptor ::= { mdKind 1,mdReport 774 }

MsgStopEMAlarmList MESSAGE StopEMAlarmList ::= 767
	FROM	AUI,ADUM,UI,INT_NM,PSB_FM
	TO	AQH

md_MsgStopEMAlarmList MessageDescriptor ::= { mdKind 1,mdReport 768 }

MsgStopNEEventList MESSAGE StopNEEventList ::= 3103
	FROM	UI
	TO	AQH

md_MsgStopNEEventList MessageDescriptor ::= { mdKind 1,mdReport 3104 }

MsgStopNMAlarmList MESSAGE StopNMAlarmList ::= 765
	FROM	AUI,ADUM,UI,PSN,INT_NM,PSB_FM
	TO	AQH

md_MsgStopNMAlarmList MessageDescriptor ::= { mdKind 1,mdReport 766 }

MsgSubmitMeasure MESSAGE SubmitMeasure ::= 706
	FROM	UI,INT_NM
	TO	PH

md_MsgSubmitMeasure MessageDescriptor ::= { mdKind 1,mdReport 707 }

MsgSwapPath MESSAGE SwapPath ::= 1028
	FROM	UI,INT_NM
	TO	CH

md_MsgSwapPath MessageDescriptor ::= { mdKind 1,mdReport 1029 }

MsgSwitchMSSPRingNE MESSAGE SwitchMSSPRingNE ::= 2092
	FROM	UI
	TO	CH

md_MsgSwitchMSSPRingNE MessageDescriptor ::= { mdKind 1,mdReport 2093 }

MsgUnsetThrProfile MESSAGE UnsetThrProfile ::= 716
	FROM	UI
	TO	PH

md_MsgUnsetThrProfile MessageDescriptor ::= { mdKind 1,mdReport 717 }

MsgUserInterfaceManagement MESSAGE UserInterfaceManagement ::= 1210
	FROM	UI
	TO	CH

md_MsgUserInterfaceManagement MessageDescriptor ::= { mdKind 1,mdReport 1211 }

MsgUserLinkChangedState MESSAGE UserLinkChangedState ::= 500
	FROM	EH
	TO	UI

md_MsgUserLinkChangedState MessageDescriptor ::= { mdKind 4 }

MsgUserLoggedOut MESSAGE UserLoggedOut ::= 3029
	FROM	UM
	TO	UI,PSB_CM,PSB_FM

md_MsgUserLoggedOut MessageDescriptor ::= { mdKind 4 }

MsgUserTimeWindowChanged MESSAGE UserTimeWindowChanged ::= 3028
	FROM	CH
	TO	UM

md_MsgUserTimeWindowChanged MessageDescriptor ::= { mdKind 4 }


MsgGetVC4CoreNEList MESSAGE GetVC4CoreNEList ::= 5000
	FROM	UI
	TO	LR

MsgReportGetVC4CoreNEList MESSAGE ReportGetVC4CoreNEList ::= 5001
	FROM	LR
	TO	UI

MsgGetVC4CoreTPList MESSAGE GetVC4CoreTPList ::= 5002
	FROM	UI
	TO	LR

MsgReportGetVC4CoreTPList MESSAGE ReportGetVC4CoreTPList ::= 5003
	FROM	LR
	TO	UI

MsgSwapVC4Core MESSAGE SwapVC4Core ::= 5004
	FROM	UI
	TO	LR

MsgReportSwapVC4Core MESSAGE ReportSwapVC4Core ::= 5005
	FROM	LR
	TO	UI

MsgTraceVC4Core MESSAGE TraceVC4Core ::= 5006
	FROM	UI
	TO	LR

MsgReportTraceVC4Core MESSAGE ReportTraceVC4Core ::= 5007
	FROM	LR
	TO	UI

MsgAutoRouteVC4Core MESSAGE AutoRouteVC4Core ::= 5008
	FROM	UI
	TO	LR

MsgReportAutoRouteVC4Core MESSAGE ReportAutoRouteVC4Core ::= 5009
	FROM	LR
	TO	UI

MsgMoveLink MESSAGE MoveLink ::= 5010
	FROM	UI
	TO	LR

MsgReportMoveLink MESSAGE ReportMoveLink ::= 5011
	FROM	LR
	TO	UI

MoveLink ::= SEQUENCE {
	reqId              SmartReqIdtype,
	tpOptions          GetVC4CoreTPListOptions,-- used to ensure TPs
                                                     -- are still valid
	transformationTTPs LRTransformationTTPs,
	dummy              NULL   OPTIONAL
}

MoveLinkReportDetails ::= SEQUENCE {
	newLinks                    SetOfVC4CoreReportLinkDetails,
	unmodifyableVC4Paths        SetOfMoveLinkReportUnmodifyableVC4Paths,
	replacedVC4TerminatingPaths SetOfReplacedPathNames,
	crossconnectionDetails      SetOfMoveLinkCrossConnectionDetails
}

SetOfReplacedPathNames ::= SET OF MoveLinkReplacedPathNames

MoveLinkReplacedPathNames ::= SEQUENCE {
	dissasociatedVC4Path                PathName,
	dissasociatedVC4PathCustomerDetails GraphicString OPTIONAL,
	replacementVC4Path                  PathName
}

SetOfMoveLinkReportUnmodifyableVC4Paths ::= SET OF MoveLinkReportUnmodifyableVC4Path


MoveLinkReportUnmodifyableVC4Path ::= SEQUENCE {
	reason MoveLinkReportUnmodifyableVC4PathReason,
	path   PathName
}



MoveLinkReportUnmodifyableVC4PathReason ::= ENUMERATED {
	terminationofreservedVC4Path(1)
}

SetOfMoveLinkCrossConnectionDetails  ::= SET OF MoveLinkCrossConnectionDetails


MoveLinkCrossConnectionDetails ::= SEQUENCE {
	au4name GraphicString,
	details GraphicString
}

MSPRingStatus ::= RingSNsStatus

MsProtType ::= ENUMERATED {
	onePlusOne  (1),
	oneColonOne (2),
	oneColonN   (3)
}

MSSPRing ::= SEQUENCE {
	msspringId    SmartResIdtype,
	msspringName  MSSPRingName,
	msspringState MSSPRingState,
	bshrType      BSHRType      OPTIONAL
}

MSSPRingCmdType ::= ENUMERATED {
	nutChConf          (1),
	setConf            (2),
	springSwitch       (3),
	springDetails      (4),
	springDisassociate (5),
	springSetPathInfo  (6)
}

MSSPRingId ::= Identifier

MSSPRingInfo ::= SEQUENCE {
	msspringName      MSSPRingName,
	msspringType      MSSPRingType,
	signalType        SignalType,
	waitToRestoreTime WaitToRestoreTime,
	msspringState     MSSPRingState,
	operState         OperState,
	creationDate      UnixTime,
	userName          AttrName,
	customerData      CustomerData    OPTIONAL,
	ringMapMismatch   RingMapMismatch OPTIONAL,
	ring              Ring,
	extraTrfSupport   BOOLEAN         OPTIONAL,
	bshrType          BSHRType,
	confMod           ConfModify,
	allSpanOnly       BOOLEAN         OPTIONAL
}

MSSPRingName ::= GraphicString

MSSPRingPattern ::= GraphicString

MSSPRingProf ::= SEQUENCE {
	addstm4_2f  Flag,
	addstm4_4f  Flag,
	addstm16_2f Flag,
	addstm16_4f Flag,
	addstm64_2f Flag,
	addstm64_4f Flag,
	activ       Flag,
	setPathInfo Flag,
	state       Flag,
	modify      Flag,
	modChConf   Flag,
	setConf     Flag,
	switchCmd   Flag,
	deactiv     Flag,
	disass      Flag,
	remove      Flag
}

MSSPRingState ::= CycleLifeState

MSSPRingSwitchCmd ::= ENUMERATED {
	ringWestForcedToP (0),
	ringWestManualToP (1),
	ringEastForcedToP (2),
	ringEastManualToP (3),
	lockoutWestWRing  (4),
	lockoutEastWRing  (5),
	clear             (6),
	clearLockoutWest  (7),
	clearLockoutEast  (8)
}

MSSPRingType ::= ENUMERATED {
 	twoFibre  (1),
	fourFibre (2)
}

NE_SN ::= SEQUENCE {
	ne     NEs,
	snName SNName OPTIONAL,
	snCoord SNCoord OPTIONAL
}

NEEvent ::= SEQUENCE {
	neEventId EventId,
	emName    EMName,
	snName    SNName OPTIONAL,
	neEmName  NEName,
	neId      NEId,
	usnId     SNId,
	eventType NEEventType,
	emCommand SetOfEMCommand,
	clrTime   UnixTime,
	clrUser   AttrName,
	timeStamp UnixTime OPTIONAL
}

NEEventType ::= ENUMERATED {
	indeterminated                (0),
	notInstalled                  (1),
	installed                     (2),
	notInstalledNotAligned        (3),
	installedNotAligned           (4),
	notInstalledDeleted           (5),
	notInstalledNotAlignedDeleted (6),
	installedDeleted              (7),
	installedNotAlignedDeleted    (8),
	emdeleted                     (9),
	notAligned                    (10),
	realigned                     (11),
	deleted                       (12)
}

NEId ::= SEQUENCE {
	emId SmartResIdtype,
	neId EMNEId
}

NeId ::= INTEGER

NEInstInfo ::= ENUMERATED {
	installed    (1),
	notInstalled (2),
	both         (3)
}

NEName ::= SEQUENCE {
	longNEName  LongNEName,
	shortNEName ShortNEName,
	neSuffix    NESuffix
}

NEPattern ::= SEQUENCE {
	longNEName  LongNEName  OPTIONAL,
	shortNEName ShortNEName OPTIONAL,
	neSuffix    NESuffix    OPTIONAL
}

NEProf ::= SEQUENCE {
	install Flag,
	realign Flag
}

NEs ::= SEQUENCE {
	neName      NEName,
	emName      EMName         OPTIONAL,
	neId        NEId,
	neIdInEM    INTEGER        OPTIONAL,
	phUSNId     SmartResIdtype OPTIONAL,
	neType      SNType,
	ownerArea   AreaId         OPTIONAL,
	ownedPcList SetOfPC        OPTIONAL
}

NEStateProf ::= SEQUENCE {
	install Flag,
	realign Flag,
	remove  Flag
}

NESuffix ::= GraphicString

NetProf ::= SEQUENCE {
	crossConn     XCProf      OPTIONAL,
	circuit       CircuitProf OPTIONAL,
	details       DetailsProf OPTIONAL,
	management    MgmtProf    OPTIONAL,
	configuration ConfigProf  OPTIONAL,
	options       OptionsProf OPTIONAL,
	emZoomIn      Flag
}

NetworkElement ::= SEQUENCE {
	neId     EMNEId,
	location GraphicString,
	acronym  GraphicString
}

NewOrder ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	pathName       PathName,
	signalType     SignalType,
	pathType       PathType,
	protType       ProtType,
	protectionMode ProtectionMode OPTIONAL,
	priority       Priority       OPTIONAL,
	quality        Quality,
	customer       Customer,
	startTime      Time,
	endTime        Time           OPTIONAL,
	originTP       TPId,
	destTPs        SetOfTPIds
}

NewTTPName ::= SEQUENCE {
	logical TTPName          OPTIONAL,
	physical PhysicalTTPName
}

NMAlarm ::= SEQUENCE {
	alId            AlarmId,
	resourceId      PathOrLink,
	orderId         OrderId            OPTIONAL,
	sgLnType        SgLnType,
	resourceName    TrailName,
	resourceState   ResourceState,
	raisingTime     INTEGER,
	ackTime         INTEGER            OPTIONAL,
	ackUser         AttrName           OPTIONAL,
	clrTime         INTEGER            OPTIONAL,
	clrUser         AttrName           OPTIONAL,
	clrReason       ClrReason          OPTIONAL,
	clrAckTime      INTEGER            OPTIONAL,
	clrAckUser      AttrName           OPTIONAL,
	severity        Severity,
	state           AlState,
	customerData    CustomerDataString OPTIONAL,
	pathGroupName   PathName           OPTIONAL,
	serviceState    ServiceState       OPTIONAL,
	astnCircuitType ASTNCircuitType    OPTIONAL,
	secondaryAlarm  NULL               OPTIONAL
}

NMAlarmCounters ::= SEQUENCE {
	criticalTot NMAlCounter,
	criticalNotAck NMAlCounter,
	warningTot NMAlCounter,
	warningNotAck NMAlCounter,
	minorTot NMAlCounter,
	minorNotAck NMAlCounter
}

NMAlarmProf ::= SEQUENCE {
	ack Flag,
	clear Flag,
	correlate NMCorrelateProf OPTIONAL,
	ticket Flag
}

NMAlCounter ::= SEQUENCE {
	phLinkNmAlCounter    INTEGER OPTIONAL,
	photonicsNmAlCounter PhotonicsNMAlCounter OPTIONAL,
	sdhNmAlCounter       SDHNMAlCounter OPTIONAL,
	sonetNmAlCounter     SONETNMAlCounter OPTIONAL,
	pdhNmAlCounter       PDHNMAlCounter OPTIONAL
}

NMCorrelateProf ::= SEQUENCE {
	ticket Flag
}

NMResAlarmed ::= SEQUENCE {
	resourceId      PathOrLink,
	resourceName    TrailName,
	resourceState   ResourceState,
	severity        Severity,
	serviceState    ServiceState       OPTIONAL,
	sgLnType        SgLnType,
	state           AlState,
	pathGroupName   PathName           OPTIONAL,
	customerData    CustomerDataString OPTIONAL,
	astnCircuitType ASTNCircuitType    OPTIONAL
}

NodeId ::= Identifier

NodePortsInfo ::= SEQUENCE {
	neID NEId,
	neName        NEName    OPTIONAL,
	setOfPortInfo SetOfPortInfo
}

NormAndRem ::= BOOLEAN

NumberOfLines ::= INTEGER

NumberOfLinks ::= INTEGER

NumCustData ::= INTEGER

ObjAG ::= SEQUENCE {
	name AttrName OPTIONAL,
	snId SmartResIdtype OPTIONAL,
	signalType SignalType OPTIONAL,
	id AttrId OPTIONAL,
	portType PortType OPTIONAL
}

ObjResDomain ::= SEQUENCE {
	name AttrName OPTIONAL,
	id AttrId OPTIONAL,
	copyId AttrId OPTIONAL,
	userName AttrName OPTIONAL,
	creationDate UnixTime OPTIONAL,
	usersGroups RefUsersGroupList OPTIONAL,
	termPoint RefTermPointList OPTIONAL,
	path RefPathList OPTIONAL,
	linkConn RefLinkConnList OPTIONAL,
	addTermPoint RefTermPointList OPTIONAL,
	addPath RefPathList OPTIONAL,
	addLinkConn RefLinkConnList OPTIONAL,
	delTermPoint RefTermPointList OPTIONAL,
	delPath RefPathList OPTIONAL,
	delLinkConn RefLinkConnList OPTIONAL,
	pattern ResDomainPattern OPTIONAL,
	freeFlag BOOLEAN OPTIONAL,
	defaultFlag BOOLEAN OPTIONAL
}

ObjResDomainList ::= SET OF ObjResDomain

SetOfTPInfo ::= SET OF TPInfo

ModifyTandemInfo ::= SEQUENCE {
	switchType       SwitchType       OPTIONAL,
	revertive        Revertive        OPTIONAL,
	workingSide      WorkerDirection  OPTIONAL,
	workerStatus     StandByState     OPTIONAL,
	protStatus       StandByState     OPTIONAL,
	workerProtStatus ProtectionStatus OPTIONAL,
	protProtStatus   ProtectionStatus OPTIONAL
}

TandemSNCPconn ::= SEQUENCE {
	tandemList       NULL             OPTIONAL,
	tpInfoTandemNE   SetOfTPInfo      OPTIONAL,
	tpInfoTandemFE   SetOfTPInfo      OPTIONAL,
	modTandemInfoNE  ModifyTandemInfo OPTIONAL,
	modTandemInfoFE  ModifyTandemInfo OPTIONAL
}

ObjSNC ::= SEQUENCE {
	sncName          SNCName          OPTIONAL,
	sncId            SNCId            OPTIONAL,
	sncType          SNCType          OPTIONAL,
	signalType       SignalType       OPTIONAL,
	tpIdFrom         TPId             OPTIONAL,
	setOfTpIdTo      SetOfTPIds       OPTIONAL,
	setOfSNId        SetOfSNId        OPTIONAL,
	protType         ProtType         OPTIONAL,
	revertive        Revertive        OPTIONAL,
	commandType      CommandType      OPTIONAL,
	protectAPoint    Flag             OPTIONAL,
	snName           SNName           OPTIONAL,
	worker           Port             OPTIONAL,
	protection       Port             OPTIONAL,
	switchType       SwitchType       OPTIONAL,
	workingSide      WorkerDirection  OPTIONAL,
	workerProtStatus ProtectionStatus OPTIONAL,
	protProtStatus   ProtectionStatus OPTIONAL,
	linkClientType   LinkClientType   OPTIONAL,
	linkIdentifier   LinkIdentifier   OPTIONAL,
	isProtecting     BOOLEAN          OPTIONAL,
	workerStatus     StandByState     OPTIONAL,
	protStatus       StandByState     OPTIONAL,
	tandemSNCPconn   TandemSNCPconn   OPTIONAL,
	commandOnlyNM    BOOLEAN          OPTIONAL
}

ObjSNCList ::= SET OF ObjSNC

ObjThreshold ::= SEQUENCE {
	name AttrName OPTIONAL,
	id SmartResIdtype OPTIONAL,
	userName AttrName OPTIONAL,
	creationDate UnixTime OPTIONAL,
	measures SetOfMeasures OPTIONAL,
	granularity Granularity OPTIONAL,
	values SetOfThrName OPTIONAL,
	signalType SignalType OPTIONAL
}

ObjThresholdList ::= SET OF ObjThreshold

ObjTrail ::= SEQUENCE {
	trailName TrailName OPTIONAL,
	trailId PathOrLinkId OPTIONAL,
	trailType SgLnType OPTIONAL,
	setOfSNId SetOfSNId OPTIONAL,
	setOfTraceState SetOfTrailTraceState OPTIONAL,
	setOfTrailState SetOfPathState OPTIONAL,
	direction Directionality OPTIONAL,
	cmd TrailTraceCmd OPTIONAL
}

ObjTrailList ::= SET OF ObjTrail

ObjTrailTrace ::= SEQUENCE {
	trailName TrailName OPTIONAL,
	trailId PathOrLinkId OPTIONAL,
	trailType SgLnType OPTIONAL,
	aEnd SetOfSNName OPTIONAL,
	zEnd SetOfSNName OPTIONAL,
	aEndSend SetOfTrailTrace OPTIONAL,
	aEndExpected SetOfTrailTrace OPTIONAL,
	zEndSend SetOfTrailTrace OPTIONAL,
	zEndExpected SetOfTrailTrace OPTIONAL,
	aEndTrailTrace TrailTrace OPTIONAL,
	zEndTrailTrace TrailTrace OPTIONAL,
	aEndReceived SetOfTrailTrace OPTIONAL,
	zEndReceived SetOfTrailTrace OPTIONAL,
	state TrailTraceState OPTIONAL
}

ObjTrailTraceList ::= SET OF ObjTrailTrace

ObjUsersGroup ::= SEQUENCE {
	name                AttrName         OPTIONAL,
	id                  AttrId           OPTIONAL,
	userName            AttrName         OPTIONAL,
	creationDate        UnixTime         OPTIONAL,
	userProfile         RefUserProfile   OPTIONAL,
	resDomain           RefResDomain     OPTIONAL,
	view                RefView          OPTIONAL,
	contResDomains      RefResDomainList OPTIONAL,
	pattern             Pattern          OPTIONAL,
	freeFlag            BOOLEAN          OPTIONAL,
	defaultFlag         BOOLEAN          OPTIONAL,
	userProfileTemplate AttrName         OPTIONAL
}

ObjUsersGroupList ::= SET OF ObjUsersGroup

Offset ::= INTEGER

OpenSN ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	usnId SNId,
	getLayerInfo BOOLEAN OPTIONAL
}

OpenSNParent ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	usnId  SNId,
	dummy  NULL   OPTIONAL
}

Operation ::= ENUMERATED {
	created(1),
	removed(2),
	modified(3),
	activated(4),
	deactivated(5),
	restored(6),
	normalized(7),
	deleted(8),
	legAdded(9),
	legRemoved(10)
}

OperState ::= ENUMERATED {
	enable(1),
	disable(2),
          undefined(3)
}

OptionsProf ::= SEQUENCE {
	restor Flag
}

OptPassthrough ::= SEQUENCE {
	reqId SmartReqIdtype OPTIONAL
}

OptPathDefault ::= SEQUENCE {
	pathState PathState,
	revertive Revertive,
	pathProtDiversity PathProtDiversity,
	serviceState ServiceState,
	srgDiversity BOOLEAN,
	workerColour Colour,
	protColour Colour
}

OptPathProf ::= SEQUENCE {
	add Flag,
	find Flag,
	autoRoute Flag,
	setCTT Flag,
	activ Flag,
	secure Flag,
	modify Flag,
	service Flag,
	unsecure Flag,
	resetName Flag,
	deactiv Flag,
	disass Flag,
	remove Flag,
	addProt Flag,
	activProt Flag,
	secureProt Flag,
	workSide Flag,
	unsecureProt Flag,
	modifyProt Flag,
	swapProt Flag,
	deactivProt Flag,
	removeProt Flag
}

Order ::= SEQUENCE {
	orderId OrderId,
	pathId PathId,
	startTime INTEGER,
	endTime INTEGER,
	pathState PathState,
	userName AttrName
}

OrderId ::= Identifier

OverwriteLogName ::= CHOICE {
	useLogNameOnEM NULL,
	useLogNameOnNM NULL
}

Passthrough ::= SEQUENCE {
	reqId SmartReqIdtype,
	dummy NULL   OPTIONAL
}

Password ::= GraphicString

PathCategory ::= ENUMERATED {
	circuit    (1),
	vc4Path    (2),
	opticalPath(3),
	leg        (4),
	pdhPath    (5)
}

Path ::= SEQUENCE {
	pathId          PathId,
	pathName        PathName,
	pathState       PathState,
	signalType      SignalType,
	linkClientType  LinkClientType  OPTIONAL,
	clientTrType    ClientTrType    OPTIONAL,
	framed          BOOLEAN         OPTIONAL,
	moreInfo        MoreInfo        OPTIONAL,
	pathGroup       PathGroup       OPTIONAL,
	pathCategory    PathCategory    OPTIONAL,
	astnCircuitType ASTNCircuitType OPTIONAL,
	isJobPresent    BOOLEAN,
	restorePhase    RestorePhase    OPTIONAL
}

PathAlarmState ::= ENUMERATED {
	normal(1),
	warning(2),
	alarmed(3)
}

PathDefault ::= SEQUENCE {
	pathState PathState,
	protType ProtType,
	priority Priority,
	sdhStructure AU4Info,
	sonetStructure STS1Info,
	lopWeight Weight,       -- TO BE REMOVED
	revertive Revertive,
	protectionMode ProtectionMode,
	pathProtDiversity PathProtDiversity,
	serviceState ServiceState,
	srgDiversity BOOLEAN,
	workerColour Colour,
	protColour Colour
}

PathGroupCmdType ::= ENUMERATED {
	addPathGroup       (1),
	removePathGroup    (2),
	modifyPathGroup    (3),
	addPathToGroup     (4),
	removePathFromGroup(5),
	addVCGtoGroup      (6),
	removeVCGtoGroup   (7)
}

SetOfAllocation ::= SET OF Allocation

PathGroup ::= SEQUENCE {
	groupId                         SmartResIdtype  OPTIONAL,
	groupName                       PathName        OPTIONAL,
	numOfPathsInGroup               INTEGER,
	isCommissionable                BOOLEAN          OPTIONAL,
	pathGroupCmdType                PathGroupCmdType OPTIONAL,
	firstTP                         SetOfTPIds       OPTIONAL,
	lastTP                          SetOfTPIds       OPTIONAL,
	aEndVCAllocation                SetOfAllocation  OPTIONAL,
	zEndVCAllocation                SetOfAllocation  OPTIONAL,
	setOfPaths                      SetOfPaths       OPTIONAL,
	directionality                  Directionality   OPTIONAL,
	lcasOpState                     LCASOpState      OPTIONAL,
	lcasStateConfigurationSupported NULL             OPTIONAL,
        firstSetOfUSNId                 SetOfSNId        OPTIONAL,
        lastSetOfUSNId                  SetOfSNId        OPTIONAL
}

PathGroupInfo ::= SEQUENCE {
	numOfPathsInGroup INTEGER,
	pathGroup PathGroup OPTIONAL,
	isFirstInGroup NULL OPTIONAL,
        pathGroupData PathGroupData  OPTIONAL
}

PathGroupProf ::= SEQUENCE {
	activate Flag,
	deactivate Flag,
	remove Flag,
	commission Flag
}

PathId ::= SmartResIdtype

LSPId ::= Identifier

SetOfLSPId ::= SET OF LSPId

ASTNCircuitInfo ::= SEQUENCE {
	astnPotentialManagementType ManagementType         OPTIONAL,
	-- used only for circuit audit --
	isASTNManaged               BOOLEAN                OPTIONAL,
	circuitIdentifier           INTEGER                OPTIONAL,
	setOfLSPId                  SetOfLSPId             OPTIONAL,
	astnCircuitOperationalState ASTNOperationalState   OPTIONAL,
	astnCircuitType             ASTNCircuitType        OPTIONAL,
	diversityType               ProtectionDiversity    OPTIONAL,
	routingCriteria             ASTNDD_RoutingCriteria OPTIONAL,
	waitToRestoreTime           INTEGER                OPTIONAL,
	routingOptimizationCriteria RouteOptCriteria       OPTIONAL,
	restorePhase                RestorePhase           OPTIONAL,
	sncpStatus	  	    ASTNSncpStatus	   OPTIONAL,
	tcOperationalState          ASTNTcOperStatus       OPTIONAL
}

ASTNSncpStatus::= ENUMERATED {
	undefinedSncpStatus(1),
	noRequest(2),
	manualSwitch(3),
	autoSwitch(4),
	forcedSwitch(5),
	lockout(6),
	noRequestAutoSwitchPending(7),
	externalFail(8),
	reroutingInProgress(9),
	oneLsp(10),
	wtr(11),
	noLsp(12)
}

ASTNTcOperStatus::= ENUMERATED {
	green(1),
	yellow(2),
	yellowOnProtection(3),
	red(4)
}

PartiallySwapped ::= BOOLEAN

Colours ::= SEQUENCE {
	workerColour Colour OPTIONAL,
	protColour Colour OPTIONAL,
	restColour Colour OPTIONAL
}

MspMSSPRingProtection ::= ENUMERATED {
	none    (1),
	partial (2),
	total   (3)
}

BroadLeg ::= SEQUENCE {
	worker     NULL,
	protection NULL
}

RouteType ::= CHOICE {
	worker     NULL,
	protection NULL,
	broadLeg   BroadLeg
}

MSPMSSPRingProtected ::= SEQUENCE {
	routeType RouteType,
	state     MspMSSPRingProtection
}

SetOfMSPMSSPRingProtected ::= SET OF MSPMSSPRingProtected

-- *****************************************************************************
-- NB: the behaviour for the RouteingConstrains item is as follows:
--      flag not present : constraint not applicable in the current context
--      flag set to false : constraint not satisfied
--      flag set to true : constraint satisfied
-- *****************************************************************************

RoutingConstraints ::= SEQUENCE {
	setOfMspMSPRingProt   SetOfMSPMSSPRingProtected OPTIONAL,
	nodeDiversity         BOOLEAN OPTIONAL,
	srlgDiversity         BOOLEAN OPTIONAL,
	linkDiversity         BOOLEAN OPTIONAL,
	srlgSharedOverbooking BOOLEAN OPTIONAL,
	linkSharedOverbooking BOOLEAN OPTIONAL,
	workLCUnsharing       BOOLEAN OPTIONAL,
	workLinkUnsharing     BOOLEAN OPTIONAL
}

WsonInfo ::= SEQUENCE {
        operationalState   ASTNOperationalState OPTIONAL,
	pathname           PathName             OPTIONAL,
        lspId              INTEGER 		OPTIONAL,
        lspRole            LSPRole              OPTIONAL,
        combinedPathId     PathId               OPTIONAL
}

RoutingInfo ::= SEQUENCE {
      routing             Routing     OPTIONAL,
      routingConstraints  RoutingConstraints OPTIONAL
}

ProtectionInfo ::= SEQUENCE {
      protType            ProtType         OPTIONAL,
      switchType          SwitchType       OPTIONAL,
      revertive           Revertive        OPTIONAL,
      priority            Priority         OPTIONAL,
      restorationType     RestorationType  OPTIONAL,
      preemptFlag         PreemptFlag      OPTIONAL,
      protOperationalMode ProtOperMode     OPTIONAL,
      strProtOperMode     GraphicString    OPTIONAL
}

AstnInfo ::= SEQUENCE {
   	astnCircuitInfo     ASTNCircuitInfo OPTIONAL,
       	gmplsInfo           GMPLSInfo OPTIONAL
}

Constraints ::= SEQUENCE {
        serviceState            ServiceState   OPTIONAL,
        digWrapper             	Wrapper        OPTIONAL,
        isServerSDHProt     	BOOLEAN    OPTIONAL,
        cttInfo                 CTTInfo        OPTIONAL,
        partiallySwapped     	PartiallySwapped   OPTIONAL,
        colours                 Colours        OPTIONAL,
        srgDiversity            BOOLEAN    OPTIONAL,
        pathCategory           	PathCategory OPTIONAL,
        setOfExternalItem 	SetOfExternalItem  OPTIONAL
}

PathInfo ::= SEQUENCE {
      pathName           PathName,
      pathType           PathType,
      signalType         SignalType,
      operState          OperState,
      creationDate       UnixTime,
      userName           AttrName,
      pathState          PathState            OPTIONAL,
      customerData       CustomerData         OPTIONAL,
      routingInfo        RoutingInfo,
      trailTrace         ObjTrailTrace        OPTIONAL,
      protectionInfo     ProtectionInfo,
      pathSchedTime      PathSchedTime        OPTIONAL,
      pathGroupInfo      PathGroupInfo,
      astnInfo           AstnInfo,
      wsonInfo           WsonInfo,
      constraints        Constraints,
      pathId             PathId   OPTIONAL, -- il campo e' opzionale per garantire la compatibilita'. Si togliera' l'opzionale in versione successiva quando non avremo il problema della compatibilita'
      isJobPresent       BOOLEAN  OPTIONAL
}

PathSchedTime::= SEQUENCE {
	startTime SchedTime OPTIONAL,
	endTime SchedTime OPTIONAL
}

SetOfExternalItem ::= SET OF ExternalItem

ExternalItem ::= SEQUENCE {
	sncName          SNCName OPTIONAL,
	linkConnName     LinkConnName,
	tandemTtpName    TTPName,
	tandemTtpLogName TTPName OPTIONAL
}


GMPLSInfo ::= SEQUENCE {
	directionality Directionality OPTIONAL,
	workerProtStatus ProtectionStatus OPTIONAL,
	protProtStatus ProtectionStatus OPTIONAL
}

CTTInfo ::= SEQUENCE {
	clientTrType ClientTrType OPTIONAL,
	framedW BOOLEAN OPTIONAL,
	framedP BOOLEAN OPTIONAL
}

PathInfoMismatch ::= BOOLEAN

AllocationState ::= ENUMERATED {
	idle(0),
	unallocated(1),
	allocated(2)
}

Allocation ::= SEQUENCE {
	source AllocationState OPTIONAL,
	sink   AllocationState OPTIONAL,
	vcName GraphicString   OPTIONAL
}

PathInGroup ::= SEQUENCE {
	pathName          PathName,
	pathState         PathState,
	directionality    Directionality,
	lcasOpState       LCASOpState     OPTIONAL,
	aEndVCAllocation  SetOfAllocation OPTIONAL,
	zEndVCAllocation  SetOfAllocation OPTIONAL
}

VCGName ::= GraphicString

VCG ::= SEQUENCE {
	vcgName                         VCGName,
	vcgId                           VCGId,
	lcasOpState                     LCASOpState OPTIONAL,
	lcasStateConfigurationSupported NULL OPTIONAL
}

PathGroupData  ::= SEQUENCE {
	lcasOpState              LCASOpState      OPTIONAL,
	aEndSinkNumOfActiveTTP   INTEGER          OPTIONAL,-- mantenuti per compatibilita' PSB
	zEndSinkNumOfActiveTTP   INTEGER          OPTIONAL,-- mantenuti per compatibilita' PSB
	aEndSourceNumOfActiveTTP INTEGER          OPTIONAL,-- mantenuti per compatibilita' PSB
	zEndSourceNumOfActiveTTP INTEGER          OPTIONAL,-- mantenuti per compatibilita' PSB
	aEndVCG                  SetOfVCG         OPTIONAL,
	zEndVCG                  SetOfVCG         OPTIONAL,
	setOfPathInGroup         SetOfPathInGroup OPTIONAL
}

PathLink ::= CHOICE {
	path [0] Path,
	link [1] Links
}

PathLinkList ::= CHOICE {
	pathList [0] SetOfPath,
	linkList [1] LinkList
}

PathName ::= GraphicString

SetOfPathNames ::= SET OF PathName


PathOrLink ::= CHOICE {
	path [0] Paths,
	link [1] Links
}

PathOrLinkId ::= CHOICE {
	pathId [0] PathId,
	linkId [1] SmartResIdtype
}

PathOrLinkName ::= GraphicString

PathOrLinkToRest ::= SEQUENCE {
	pathOrLinkName PathOrLinkName,
	resource PathOrLink,
	oldProtState  CycleLifeState OPTIONAL
}

PathPattern ::= GraphicString

PathProtDiversity ::= ENUMERATED {
	total(1),
	partial(2)
}

PathProtProf ::= SEQUENCE {
	add Flag,
	activ Flag,
	secure Flag,
	wSide Flag,
	unsecure Flag,
	modify Flag,
	swap Flag,
	deact Flag,
	remove Flag
}

PathProtXCProf ::= SEQUENCE {
	add Flag,
	wSide Flag,
	modify Flag,
	remove Flag
}

Paths ::= SEQUENCE {
	pathId     PathId,
	signalType SignalType,
	legId      LegId       OPTIONAL
}

PathState ::= SEQUENCE {
	worker              CycleLifeState,
	protection          CycleLifeState OPTIONAL,
        protOperationalMode ProtOperMode    OPTIONAL
}

PathStructFlag ::= BOOLEAN

PathType ::= ENUMERATED {
	uniPath(1),
	bidPath(2),
	broadPath(3)
}

Pattern ::= GraphicString

PCId ::= SEQUENCE {
	id Identifier,
	areaId AreaId
}

PDHPortInformation ::= SEQUENCE {
	signalType SignalType,
	pdhInfo BOOLEAN OPTIONAL
}

PerfCounters ::= SEQUENCE {
	dateTime INTEGER,
	bBE INTEGER OPTIONAL,
	eS INTEGER OPTIONAL,
	sES INTEGER OPTIONAL,
	oFS INTEGER OPTIONAL,
	cSES INTEGER OPTIONAL,
	uAS INTEGER OPTIONAL,
	pSC INTEGER OPTIONAL,
	pSD INTEGER OPTIONAL,
	pJCHigh INTEGER OPTIONAL,
	pJCLow INTEGER OPTIONAL,
	sUEC INTEGER OPTIONAL,
	sEPC INTEGER OPTIONAL,
	compliance ComplianceStr
}

PerfDataDisplay ::= SEQUENCE {
	trailName TrailName,
	tPName TTPName,
	interval SchedulingInterval,
	measure Measure,
	granularity Granularity,
	counters SetOfPerfCounters
}

PerfDataProf ::= SEQUENCE {
	exportData PerfTypeProf OPTIONAL,
	display PerfTypeProf OPTIONAL,
	displayFromNE PerfTypeProf OPTIONAL
}

PerfNumbersSc ::= SEQUENCE {
	vc11PathSc    INTEGER,
	vc12PathSc    INTEGER,
	vc2PathSc     INTEGER,
	vc2_5CPathSc  INTEGER,
	vc3PathSc     INTEGER,
	vc4PathSc     INTEGER,
	vc4_4cPathSc  INTEGER,
	vc4_16cPathSc INTEGER,
	vc4_64cPathSc INTEGER,
	vc4_ncvPathSc INTEGER,
	vc4SPathSc    INTEGER,
	ochPathSc     INTEGER,
	msLinkSc      INTEGER,
	rsLinkSc      INTEGER,
	phLinkSc      INTEGER,
	vt15PathSc    INTEGER,
	vt2PathSc     INTEGER,
	vt3PathSc     INTEGER,
	vt6PathSc     INTEGER,
	sts1PathSc    INTEGER,
	sts1SPathSc   INTEGER,
	odu1PathSc    INTEGER,
	odu2PathSc    INTEGER,
	odu3PathSc    INTEGER,
	cbrPathSc     INTEGER,
	otu1LinkSc    INTEGER,
	otu2LinkSc    INTEGER,
	otu3LinkSc    INTEGER,
	odu0PathSc    INTEGER,
	otu0LinkSc    INTEGER
}

PerfNumbersTh ::= SEQUENCE {
	vc11PathTh    INTEGER,
	vc12PathTh    INTEGER,
	vc2PathTh     INTEGER,
	vc2_5CPathTh  INTEGER,
	vc3PathTh     INTEGER,
	vc4PathTh     INTEGER,
	vc4_4cPathTh  INTEGER,
	vc4_16cPathTh INTEGER,
	vc4_64cPathTh INTEGER,
	vc4_ncvPathTh INTEGER,
	vc4SPathTh    INTEGER,
	msLinkTh      INTEGER,
	rsLinkTh      INTEGER,
	phLinkTh      INTEGER,
	vt15PathTh    INTEGER,
	vt2PathTh     INTEGER,
	vt3PathTh     INTEGER,
	vt6PathTh     INTEGER,
	sts1PathTh    INTEGER,
	sts1SPathTh   INTEGER,
	odu1PathTh    INTEGER,
	odu2PathTh    INTEGER,
	odu3PathTh    INTEGER,
	cbrPathTh     INTEGER,
	otu1LinkTh    INTEGER,
	otu2LinkTh    INTEGER,
	otu3LinkTh    INTEGER,
	odu0PathTh    INTEGER,
	otu0LinkTh    INTEGER
}

PerfNumbers ::= SEQUENCE {
	perfNumbersSc PerfNumbersSc,
	perfNumbersTh PerfNumbersTh
}

performancesArea AreaDescriptor ::= {
	AreaId 3,
	adAreaName "Performances Area",
	adCoreHandler MV38_PH
}

PerformProf ::= SEQUENCE {
	job JobProf OPTIONAL,
	threshold ThresholdProf OPTIONAL,
	data PerfDataProf OPTIONAL
}

PerfReportCompleted ::= SEQUENCE {
	userId   AttrId,
	fileName GraphicString,
	result   Res,
	dummy    NULL   OPTIONAL
}

PerfTypeProf ::= SEQUENCE {
	link Flag,
	optPath Flag OPTIONAL,
	vc4Path Flag,
	sts1Path Flag,
	circuit Flag
}

PhCTPId ::= SEQUENCE {
	emName EMName,
	neName NEName,
	shelfId INTEGER,
	cardId INTEGER,
	portId INTEGER,
	klm KLM
}

PhotonicsNMAlCounter ::= SEQUENCE {
	ochLink INTEGER,
	omsLink INTEGER,
	otsLink INTEGER,
	otuLink INTEGER,
	odu0Link INTEGER,
	odu1Link INTEGER,
	odu2Link INTEGER,
	odu3Link INTEGER,
	ochPath INTEGER,
	odu0Path INTEGER,
	odu1Path INTEGER,
	odu2Path INTEGER,
	odu3Path INTEGER
}

PhTTPId ::= SEQUENCE {
	emName EMName,
	neName NEName,
	shelfId INTEGER,
	cardId INTEGER,
	portId INTEGER,
	timeSlot INTEGER
}

PhysicalSlot ::= INTEGER

PhysicalTTPName ::= SEQUENCE {
	snName SNName,
	agName AGName,
	ttpName TTPName
}

PayLoadType ::= CHOICE {
	synchronous  NULL,
	asynchronous NULL
}

ConnectedPort    ::= SEQUENCE {
	id             TPId           OPTIONAL,
	type           PortType       OPTIONAL,
	labelPortCoord LabelPortCoord OPTIONAL
}

PDHStructure ::= ENUMERATED {
	pE1          (0),
	pE2_4E1      (1),
	pE3_4E2_16E1 (2)
}

RadioStructure ::= ENUMERATED {
	pRegen           (0),
	pE1              (1),
	pE2_4E1          (2),
	pE3_4E2_16E1     (3),
	pE3_4E2_16E1_pE1 (4)
}

ConfRadioPort ::= SEQUENCE {
	radioStructure RadioStructure,
	numberOfItems  INTEGER        OPTIONAL
}

ConfPDHPort ::= SEQUENCE {
	pdhStructure PDHStructure
}

ConfPDHEth ::= CHOICE {
	onePDHEthInE1_16v NULL,
	onePDHEthInE1_48v NULL
}

*SetOfODUInfo ::= SET OF ODUInfo  -- the extension * marks a recursive type

ODUInfo ::= SEQUENCE {
    kLevel          INTEGER,
    oduStructure    ODUStructure OPTIONAL,
    numOfTPtoCreate INTEGER OPTIONAL
}

ODUStructure ::= CHOICE {
    structured     NULL, --* used for fixed frame structure
    setOfOduInfo   SetOfODUInfo,
    notTerminated  NULL,
    terminated     NULL
}

Port ::= SEQUENCE {
	id                TPId              OPTIONAL,
	type              PortType          OPTIONAL,
	labelPortCoord    LabelPortCoord    OPTIONAL,
	wLengthInfo       WLengthInfo       OPTIONAL,
	name              TPName            OPTIONAL,
	numberOfPorts     INTEGER           OPTIONAL,
	clientTrType      ClientTrType      OPTIONAL,
	setOfClient       SetOfClient       OPTIONAL,
	confEth           ConfEth           OPTIONAL,
	confEthPort       ConfEthPort       OPTIONAL,
	confLOBpPort      ConfLOBpPort      OPTIONAL,
	kLevel            KLevel            OPTIONAL, --* k-level of the OTU Server
	payLoadType       PayLoadType       OPTIONAL,
	oduStructured     ODUStructure      OPTIONAL,
	--new optional fields for Add Circuit Wizard
	bshrType          BSHRType          OPTIONAL,
	wrapper           Wrapper           OPTIONAL,
	connectedPort     ConnectedPort     OPTIONAL,
	assignState       TPAssignState     OPTIONAL,
	--PDH Layer
	radioSTM1         BOOLEAN           OPTIONAL,
	confPDHPort       ConfPDHPort       OPTIONAL,
	confRadioPort     ConfRadioPort     OPTIONAL,
	confPDHEth        ConfPDHEth        OPTIONAL,
	--OTM port
	terminated        BOOLEAN           OPTIONAL

}

SetOfLabelPortCoord ::= SET OF LabelPortCoord

EthPortInfo  ::= SEQUENCE {
	associatedVCs    SetOfLabelPortCoord     OPTIONAL,
	lcasOpState      LCASOpState       OPTIONAL
}

DwdmPortInfo  ::= SEQUENCE {
        wavelengths      Wavelengths       OPTIONAL,
        channelsInfo     ChannelsInfo      OPTIONAL
}

PortProtection ::= SEQUENCE {
      type              PortProtectionType,
      portRole          BoundTo,
      dummy       	NULL     OPTIONAL
}

PortProtectionType ::= CHOICE {
      msp               MsProtType,
      mspRing           MSSPRingName,
      interPort         ConnectedPort,
      interCard         NULL,
      intraCard         NULL
}

PortInfo ::= SEQUENCE {
	shelfId INTEGER,
	cardId INTEGER,
	portId INTEGER,
	logicalTTPName TTPName,
	portProtection	PortProtection	OPTIONAL,
	connectedPort	ConnectedPort   OPTIONAL,
	portType        PortType	OPTIONAL,
	asonState       ASTNOperationalState	OPTIONAL,
	operState       OperState	OPTIONAL,
	bandwidth       Bandwith        OPTIONAL,
	regen           BOOLEAN         OPTIONAL,
	ethPortInfo     EthPortInfo     OPTIONAL,
	dwdmPortInfo    DwdmPortInfo    OPTIONAL,
	structuringMode StructuringMode OPTIONAL,
	scanners        SetOfScanner    OPTIONAL,
	trailsTrace     ObjTrailTraceList	OPTIONAL
}

PortInformation ::= CHOICE {
	sdh SDHPortInformation,
	pdh PDHPortInformation,
	tmux TMUXPortInformation
}

PortType ::= ENUMERATED {
	pStm1     (1),
	pStm4     (2),
	pStm16    (3),
	p1_5mb    (4),
	p2mb      (5),
	p6mb      (6),
	p8mb      (7),
	p5x8mb    (8),
	p34mb     (9),
	p45mb     (10),
	p140mb    (11),
	p4x140mb  (12),
	pStm64    (13),
	pStm256   (14),
	pVCTS4    (15),
	pVCTS8    (16),
	pVCTS14   (17),
	pStm16Col (18),
	pStm64Col (19),
	pStm256Col(20),
	pWDM      (21),
	pNullTr   (22),
	pFixedTr  (23),
	pStm16cv  (28),
	pStm4cv   (29),
	pStm164cv (30),
	pLmTr     (31),
	pMuxTr    (32),
	pGbEth    (33),
	p16x140mb (34),
	p64x140mb (35),
	pEth      (36),
	pLOSbp    (37),
	pOtm_n    (38),
	pFixTrG709(39),
	pLmTrG709 (40),
	pMuxTrG709(41),
	pDataMuxTr(42),
	pPdh      (43),
	pRadio    (44),
	pRStm1    (45),
	pRadioPdh (46),
	pSTM1s    (47),
	pEoP      (48),
	pRmTrG709 (49),
	pEtn      (50),
        pBackPlane(51),
        pMux      (52),
	pCbrPort  (53),
	pInternalPort (54),
	pBpTr         (55),
	pStm1_InternalPort (56),
        pRSBackPlane(57),
        pODUBackPlane(58),
        pOCHBackPlane(59)
}

PosX ::= INTEGER

PosY ::= INTEGER

PreemptFlag ::= BOOLEAN

Priority ::= INTEGER

ProbableCause ::= IntValue

ProgNumber ::= GraphicString

Protecting ::= BOOLEAN

ProtectionMode ::= ENUMERATED {
	sncp(1),
	upsr(2)
}

ProtectionState ::= SEQUENCE {
	standByState StandByState,
	protectionStatus ProtectionStatus,
	locked BOOLEAN OPTIONAL
}

SetOfProtectionState ::= SET OF ProtectionState

ProtectionStatus ::= ENUMERATED {
	noRequest(0),
	lockout(1),
	waitToRestore(2),
	manualSwitchToProtectionCompleted(3),
	autoSwitchSFToProtectionCompleted(4),
	autoSwitchSFToWorkerCompleted(5),
	autoSwitchSDToProtectionCompleted(6),
	autoSwitchSDToWorkerCompleted(7),
	forcedSwitchToProtectionCompleted(8),
	protecUnavAutoSwitchSFPending(9),
	protecUnavAutoSwitchSDPending(10),
	protecUnavForcedSwitchPending(11),
	protecUnavManualSwitchPending(12),
	doNotRevert(13),
	exerciseCompleted(14),
	reverseRequest(15),
	manualSwitchToWorkerCompleted(16),
	forcedSwitchToWorkerCompleted(17),
	autoSwitchDF(18),
	dFOnProtection(19),
	protecUnavAutoSwitchDFPending(20)
}

ProtocolTechnology ::= SEQUENCE {
	ptTechID INTEGER,
	ptTechDescription GraphicString
}

ProtocolVersion ::= SEQUENCE {
	pvMajor INTEGER,
	pvMinor INTEGER,
	pvMaint INTEGER,
	pvPLevel GraphicString
}

protocolVersion ProtocolVersion ::= {
	pvMajor 10,
	pvMinor 3,
	pvMaint 1,
	pvPLevel "B"
}

ProtOnlyFlag ::= BOOLEAN

ProtRouting ::= SEQUENCE {
	worker SetOfRouteItem,
	protection SetOfRouteItem,              -- current protection
	origProtection SetOfRouteItem OPTIONAL, -- original planned protection
	mode ProtectionMode
}

ProtType ::= ENUMERATED {
	indeterminate       (0),
	noProtection        (1),
	pathProtection      (2),
	osRestoration       (3),
	preplanRestoration  (4),
	nonRevOsRestoration (5),
	strongProtection    (6),
	safeProtection      (7),
        transponderSharing  (8)
}

Quality ::= ENUMERATED {
	pathLowest(1),
	path2ndLowest(2),
	path3rdHighest(3),
	path2ndHighest(4),
	pathHighest(5)
}

QualityOfConnService ::= ENUMERATED {
	fullPrtWithRelMedia(1),
	fullPrtWithUnrelMedia(2),
	partPrtWithRelMedia(3),
	partPrtWithUnrelMedia(4),
	noPrtWithRelMedia(5),
	noPrtWithUnrelMedia(6)
}

ReadCircuits ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	status PathState OPTIONAL,
	orderId OrderId OPTIONAL
}

ReadConfiguration ::= SEQUENCE {
	reqId SmartReqIdtype,
	dummy NULL   OPTIONAL
}

ReadTPs ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	snName SNName,
	dummy  NULL   OPTIONAL
}

RealignEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	emId   SmartResIdtype,
	userId AttrId,
	dummy  NULL   OPTIONAL
}

RealignNE ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	nes SetOfNE_SN OPTIONAL,
	usnId SNId OPTIONAL,
	getPhysicalData  NULL OPTIONAL
}

ReconnectEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	emId   SmartResIdtype,
	dummy  NULL   OPTIONAL
}

RefLinkConn ::= SEQUENCE {
	name AttrName OPTIONAL,
	lnType LnType OPTIONAL,
	linkid AttrId OPTIONAL,
	linkconnid AttrId OPTIONAL
}

RefLinkConnList ::= SET OF RefLinkConn

RefPath ::= SEQUENCE {
	name AttrName OPTIONAL,
	lnType LnType OPTIONAL,
	id AttrId OPTIONAL
}

RefPathList ::= SET OF RefPath

RefResDomain ::= SEQUENCE {
	name AttrName OPTIONAL,
	id AttrId OPTIONAL
}

RefResDomainList ::= SET OF RefResDomain

RefTermPoint ::= SEQUENCE {
	name AttrName OPTIONAL,
	lnType LnType OPTIONAL,
	snid AttrId OPTIONAL,
	tpid AttrId OPTIONAL
}

RefTermPointList ::= SET OF RefTermPoint

RefUserProfile ::= SEQUENCE {
	name AttrName OPTIONAL,
	id AttrId OPTIONAL
}

RefUsersGroup ::= SEQUENCE {
	name AttrName OPTIONAL,
	id AttrId OPTIONAL
}

RefUsersGroupList ::= SET OF RefUsersGroup

RefView ::= SEQUENCE {
	name AttrName OPTIONAL,
	id AttrId OPTIONAL
}

ReloadThrProfiles ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL   OPTIONAL
}

RemovedMsLink ::= SEQUENCE {
	ttpId      TTPId,
	signalType SignalType,
	userId     AttrId,
	label      GraphicString,
	dummy      NULL   OPTIONAL
}

RemovedPC ::= SEQUENCE {
	userId AttrId,
	setOfPC SetOfPC,
	removedtps SetOfTPs OPTIONAL
}

RemoveEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	emId   SmartResIdtype,
	userId AttrId,
	dummy  NULL   OPTIONAL
}

RemoveGetEMAlarmList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	removedtps SetOfTPs,
	dummy      NULL OPTIONAL
}

RemoveGetNMAlarmList ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	resDomainId AttrId,
	removedNe   SetOfNEId,
	dummy       NULL OPTIONAL
}

RemoveLeg ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	signalType     SignalType,
	pathId         PathId,
	tp             TPId     OPTIONAL,
	protectionOnly NULL     OPTIONAL
}

RemoveLegs ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	orderId OrderId,
	remTPs  SetOfTPIds,
	dummy   NULL   OPTIONAL
}

RemoveLink ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userId           AttrId,
	linkId           SmartResIdtype,
	lnType           LnType,
	flushAsyncPolicy FlushAsyncPolicy OPTIONAL,
	dummy            NULL             OPTIONAL
}

RemoveLinkConnGroup ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	lnType     LnType,
	linkConnId LinkConnId,
	dummy      NULL   OPTIONAL
}

RemoveMSSPRing ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	msspringId SmartResIdtype,
	dummy      NULL   OPTIONAL
}

RemovePath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathId PathId,
	protOnlyFlag ProtOnlyFlag OPTIONAL,
	isASTNManaged BOOLEAN OPTIONAL
}

RemoveSN ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	usnId  SNId,
	dummy  NULL   OPTIONAL
}

RemoveUser ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL   OPTIONAL
}

RemoveUserProfile ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userProfileId AttrId,
	dummy         NULL   OPTIONAL
}

ReplaceCircuit ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	orderId OrderId,
	disable DisableResources,
	dummy   NULL   OPTIONAL
}

SetOfGMPLSPath ::= SET OF GMPLSPath

GMPLSProtState ::= SEQUENCE {
	dbProtType GMPLSProtType,
	networkProtType GMPLSProtType
}

GMPLSProtType ::= ENUMERATED {
	noProt (1),
	sncpProt (2),
	preplannedRestoration (3),
	fullProt(4)
}

GMPLSPath ::= SEQUENCE {
	pathId PathId,-- set to zero if the cct is not present on MV38 database.
	gmplsCircuitIdentifier PathId,
	snId SNId,
	pathName PathName OPTIONAL,
	reason Reason OPTIONAL,
	signalType SignalType OPTIONAL,
	preplannedRestoration BOOLEAN OPTIONAL,
	sncpProtection BOOLEAN OPTIONAL,
	gmplsProtState GMPLSProtState
}

Reason ::= GraphicString

GMPLSPathInfo ::= SEQUENCE {
	pathType PathType,
	state PathState,
	gmplsInfo GMPLSInfo,
	routingInfo Routing
}

SetOfCreateGMPLSInfo ::= SET OF CreateGMPLSInfo

CreateGMPLSInfo ::= SEQUENCE {
     pathName PathName OPTIONAL,
     pathState PathState,
     signalType SignalType,
     pathType PathType OPTIONAL,
     protType ProtType,
     pathId PathId,
     pathStructFlag PathStructFlag OPTIONAL,
     revertive Revertive OPTIONAL,
     priority Priority OPTIONAL,
     customerData CustomerData OPTIONAL,
     routing Routing OPTIONAL,
     firstXcIsUnidir BOOLEAN OPTIONAL,
     serviceState ServiceState OPTIONAL,
     clientTrType ClientTrType OPTIONAL,
     encapsulationMode EncapsulationMode OPTIONAL,
     astnCircuitInfo ASTNCircuitInfo,
     emId EMId OPTIONAL
}

ReportGetCreateGMPLSPathInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	setOfCreateGMPLSInfo SetOfCreateGMPLSInfo OPTIONAL
}

SetOfGMPLSPathInfo ::= SET OF GMPLSPathInfo

ReportGetGMPLSDetails ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	setOfGMPLSPathInfo SetOfGMPLSPathInfo OPTIONAL
}

ReportGetGMPLSDiscrepancies ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	setOfMV38Path SetOfGMPLSPath OPTIONAL,
	setOfNetworkPath SetOfGMPLSPath OPTIONAL,
	setOfDiscrepantPath SetOfGMPLSPath OPTIONAL
}

ReportGetGMPLSNodes ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	setOfSNs SetOfSNs OPTIONAL
}

ReportAbortMeasure ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportAbortRestoration ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportAcknowledgeNMAlarm ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportActivateLeg ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportActivateMSSPRing ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

-- This message is specific for Restoration Management
-- and, therefore, shouldn't be used for any other purpose.
ReportEndAction ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	pathCmdType  PathCmdType  OPTIONAL,
	path         Paths        OPTIONAL,
	failureCause FailureCause OPTIONAL
}

ReportActivatePath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportAddAG ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportAddLeg ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	pathId PathId,
	dummy  NULL OPTIONAL
}

ReportAddLegs ::= SEQUENCE {
	reqId SmartReqIdtype,
	res Res,
	notAddTPs SetOfTPIds OPTIONAL,
	infoReplay InfoReplay
}

ReportAddProtection ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	pathId PathId,
	dummy  NULL OPTIONAL
}

ReportAssignPort ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	pCId PCId OPTIONAL
}

ReportAssociateProtectedPath ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	pathId    PathId,
	pathState PathState,
	dummy     NULL OPTIONAL
}

ReportAutoRouteVC4Core ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	report VC4CoreReport,
	dummy  NULL   OPTIONAL
}



ReportCancelCircuit ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	infoReplay InfoReplay,
	dummy      NULL OPTIONAL
}

ReportCancelOrder ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	infoReplay InfoReplay,
	dummy      NULL OPTIONAL
}

ReportChangeOrder ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	infoReplay InfoReplay,
	dummy      NULL OPTIONAL
}

ReportClearNEEvent ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportClearNMAlarm ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreateEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreateLink ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	hopLink SmartResIdtype OPTIONAL
}

ReportCreateLinkConnGroup ::= SEQUENCE {
	reqId SmartReqIdtype,
	res   Res,
	dummy NULL OPTIONAL
}

ReportCreateMSSPRing ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	msspringId SmartResIdtype,
	dummy      NULL OPTIONAL
}

ReportCreateObjResDomain ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreateObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreateObjUsersGroup ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreatePath ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	pathId    PathId,
	pathState PathState,
	dummy     NULL OPTIONAL
}

ReportCreateSN ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreateUser ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportCreateUserProfile ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeactivateLeg ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeactivateMSSPRing ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeactivatePath ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	cmdAlreadyInProgr BOOLEAN OPTIONAL,	-- verra' eliminato !!!!
	path              Paths OPTIONAL,
	failureCause      FailureCause OPTIONAL
}

ReportDeAssignPort ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeleteObjAG ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeleteObjResDomain ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeleteObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeleteObjUsersGroup ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDeleteScanners ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDisassociateMSSPRing ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportDisassociatePath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportExtendCircuit ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	infoReplay InfoReplay,
	dummy      NULL OPTIONAL
}

ReportExtendTime ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	userId     AttrId,
	infoReplay InfoReplay,
	dummy      NULL OPTIONAL
}

ReportGetAggregatedNEState ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	neState SNState,
	dummy   NULL OPTIONAL
}

ReportGetAggregatedNMStatus ::= SEQUENCE {
	reqId          SmartReqIdtype,
	result         Res,
	sdhState       SNState,
	sonetState     SNState,
	photonicsState SNState,
	dummy          NULL OPTIONAL
}

ReportGetAGList ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	setOfAG SetOfAG,
	dummy   NULL OPTIONAL
}

ReportGetAnchorRoute ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	routing Routing,
	dummy   NULL OPTIONAL
}

ReportGetAutoLink ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	connInfo ConnInfo,
	dummy    NULL OPTIONAL
}

ReportGetAutoLinkConn ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	linkConn LinkConn,
	dummy    NULL OPTIONAL
}

ReportGetAutoRingInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	ring   Ring,
	dummy  NULL OPTIONAL
}

ReportGetAutoRingLink ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	worker LnLink,
	protection LnLink OPTIONAL
}

ReportGetAutoRoute ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	routing Routing,
	pathGroupInfo PathGroupInfo OPTIONAL
}

ReportGetBearerLinkConnList ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	setOfLinkConn SetOfLinkConn,
	dummy         NULL OPTIONAL
}

ReportGetCardList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfTTP SetOfTTP,
	dummy    NULL OPTIONAL
}

SetOfDisplayRouting  ::= SET OF DisplayRouting

ReportGetCircDisplay ::= SEQUENCE {
	reqId          SmartReqIdtype,
	result         Res,
	path           Path,
	displayRouting DisplayRouting,
	displayPreplanPaths SetOfDisplayRouting OPTIONAL,
	displayClientRouting DisplayRouting  OPTIONAL
}

ReportDisplayLSPathObj ::= SEQUENCE {
	reqId          SmartReqIdtype,
	result         Res,
	path           Path,
	displayRouting DisplayRouting,
	dummy          NULL OPTIONAL
}

ReportGetCircInPathList ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	setOfPath SetOfPath,
	dummy     NULL OPTIONAL
}

ReportGetCircList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	circuits SetOfCircInfo,
	dummy    NULL OPTIONAL
}


ReportGetCompleteTrailRouteInfo ::= SEQUENCE {
	reqId          SmartReqIdtype,
	result         Res,
	pathType       PathType,
	routing        Routing,
	directionality Directionality,
	pathGroup      PathGroupInfo OPTIONAL,
	signalType     SignalType
}

ReportGetDefaultPreferences ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	linkDefault     LinkDefault,
	pathDefault     PathDefault,
	optPathDefault  OptPathDefault,
	restDefault     RestorationDefault,
	circDefault     CircDefault,
	variedDefault   VariedDefault,
	javaPreferences JavaPreferences,
	dummy           NULL OPTIONAL
}

ReportGetEMAlarmHistory ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	emAlarm          SetOfEMAlarm,
	listNotCompleted BOOLEAN,
	dummy            NULL OPTIONAL
}

ReportGetEMAlarmList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	alarms           SetOfEMAlarm,
	listNotCompleted BOOLEAN,
	dummy            NULL OPTIONAL
}

ReportGetEMInfo ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	userName     AttrName,
	emName       EMName,
	creationDate UnixTime,
	commandPort  EMCommandPort,
	alarmPort    EMAlarmPort,
	state        EMState,
	dummy        NULL OPTIONAL
}

ReportGetEMList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfEMs SetOfEMs,
	dummy    NULL OPTIONAL
}

ReportGetFastAutoRoute ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	routing Routing,
	pathGroupInfo PathGroupInfo OPTIONAL
}

ReportGetLegList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfLeg SetOfLeg,
	dummy    NULL OPTIONAL
}

ReportGetLinkConnList ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	setOfLinkConn SetOfLinkConn,
	dummy         NULL OPTIONAL
}

ReportGetLinkInfo ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	linkInfo LinkInfo,
	dummy    NULL OPTIONAL
}

ReportGetLnLinkList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	setOfLinks SetOfLinks,
	dummy      NULL OPTIONAL
}

ReportGetLoggedUsersList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	setOfUsers SetOfLoggedUser,
	dummy      NULL OPTIONAL
}

ReportGetLogicalTTPList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	setOfTTP         SetOfTTP,
	setOfLogTTP      SetOfLogTTP,
	listNotCompleted BOOLEAN,
	dummy            NULL OPTIONAL
}

ReportGetLogicalTTPName ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	logTTPName TTPName,
	dummy      NULL OPTIONAL
}

ReportGetM1400Name ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	m1400Name M1400Name,
	dummy     NULL OPTIONAL
}

ReportGetManualRingInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	ring   Ring,
	dummy  NULL OPTIONAL
}

ReportGetManualRouteInfo ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	routing Routing,
	pathGroupInfo PathGroupInfo OPTIONAL
}

ReportGetSNId ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	snId   SetOfSNId,
	dummy  NULL OPTIONAL
}

ReportGetObjPath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjPathList,
	dummy  NULL OPTIONAL
}

ReportSetObjPath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportGetMSSPRingInfo ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	setOfMSSPRingInfo SetOfMSSPRingInfo,
	dummy             NULL OPTIONAL
}

ReportGetMSSPRingList ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	setOfMSSPRing SetOfMSSPRing,
	dummy         NULL OPTIONAL
}

ReportGetMSSPRingStatus ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	ringState MSPRingStatus OPTIONAL,
	ringInfo MSSPRingInfo OPTIONAL
}

ReportGetMSSPRingSwitchCmd ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	availableCmd SetOfMSSPRingSwitchCmd,
	dummy        NULL OPTIONAL
}

ReportGetNEEventList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	neEvents         SetOfNEEvent,
	listNotCompleted BOOLEAN,
	navigatorReport  NavigatorReport OPTIONAL,
	dummy            NULL            OPTIONAL
}

ReportGetNEList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	setOfNE_SN       SetOfNE_SN,
	navigatorReport  NavigatorReport OPTIONAL,
	dummy            NULL            OPTIONAL
}

ReportGetNMAlarmHistory ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	nmAlarm          SetOfNMAlarm,
	listNotCompleted BOOLEAN,
	batchMode        BOOLEAN,
	dummy            NULL OPTIONAL
}

ReportGetNMAlarmList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	alarms           SetOfNMAlarm,
	alCount          NMAlarmCounters,
	alCountFiltered  NMAlarmCounters,
	listNotCompleted BOOLEAN,
	dummy            NULL OPTIONAL
}

ReportUpdateCircuits ::= SEQUENCE {
	reqId           SmartReqIdtype,
	circuitsManaged SetOfCircManaged,
	dummy           NULL OPTIONAL
}

ReportRestoreMasterProtRoute ::= SEQUENCE {
	reqId           SmartReqIdtype,
	circuitsManaged SetOfCircManaged,
	dummy           NULL   OPTIONAL
}

ReportGetNMCorrelate ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	setOfNMResAlarmed SetOfNMResAlarmed,
	listNotCompleted  BOOLEAN,
	dummy             NULL OPTIONAL
}

ReportGetAllRootCauseAlarmList ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	alarmInfoList SetOfAlarmInfo,
	dummy         NULL OPTIONAL
}

ReportGetNodePortsInfo ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	nodePortsInfo NodePortsInfo,
	dummy         NULL OPTIONAL
}

ReportGetObjResDomain ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjResDomainList,
	dummy  NULL OPTIONAL
}

ReportGetObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjSNCList,
	dummy  NULL OPTIONAL
}

ReportGetObjThreshold ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjThresholdList,
	dummy  NULL OPTIONAL
}

ReportGetObjTrail ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjTrailList,
	dummy  NULL OPTIONAL
}

ReportGetObjTrailTrace ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjTrailTraceList,
	dummy  NULL OPTIONAL
}

ReportGetObjUsersGroup ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjUsersGroupList,
	dummy  NULL OPTIONAL
}

ReportGetPathInfo ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	setOfPathInfo SetOfPathInfo,
	dummy         NULL OPTIONAL
}

ReportGetPathList ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	setOfPath SetOfPath,
	dummy     NULL OPTIONAL
}

ReportGetPerfNumbers ::= SEQUENCE {
	reqId       SmartReqIdtype,
	result      Res,
	perfNumbers PerfNumbers,
	dummy       NULL OPTIONAL
}

ReportGetPerfReport ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	data SetOfPerfDataDisplay OPTIONAL
}

ReportGetPhysicalTTPName ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	snName SNName,
	agName AGName,
	dummy  NULL OPTIONAL
}

ReportGetPortList ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	setOfPort SetOfPort,
	dummy     NULL OPTIONAL
}

ReportGetProfiledTrails ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	pathLinkList PathLinkList,
	dummy        NULL OPTIONAL
}

ReportGetRHTrace ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	trace  SetOfTraceLines,
	dummy  NULL OPTIONAL
}

ReportGetScannerInfo ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	scanners SetOfScannerInfo,
	dummy    NULL OPTIONAL
}

ReportGetScannerList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	scanners SetOfScanner,
	dummy    NULL OPTIONAL
}

ReportGetSdhStructure ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	structuredFlag StructuredFlag,
	sdhStructure AU4Info,
	lopWeight Weight OPTIONAL -- TO BE REMOVED
}

ReportGetSigLnTypeMeasures ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	primitives SetOfMeasures,
	dummy      NULL OPTIONAL
}

ReportGetSNCList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfSNC SetOfSNC,
	dummy    NULL OPTIONAL
}

ReportGetSNContents ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	setOfSNContents SetOfSNContents,
	dummy           NULL OPTIONAL
}

ASTNCircuitType ::= ENUMERATED {
	indeterminate (0),
	astnCD        (1),
	astnDD        (2),
        wson          (3)
}

SetOfASTNCircuitType ::= SET OF ASTNCircuitType

ASTNOperationalState ::= ENUMERATED {
	locked     (0),--used only for NetworkElements
	enable     (1),
	disable    (2),
	outOfOrder (3) --used only for circuits
}

SetOfASTNOperationalState ::= SET OF ASTNOperationalState

ReportGetSNInfo ::= SEQUENCE {
	reqId          SmartReqIdtype,
	result         Res,
	snName         SNName,
	snType         SNType,
	snState        SNState,
	creationDate   UnixTime,
	userName       AttrName,
	setOfSNSons    SetOfSNName          OPTIONAL,
	snParent       SNName,
	emName         EMName               OPTIONAL,
	neName         NEName               OPTIONAL,
	mapFile        MapFile              OPTIONAL,
	setOfPort      SetOfPort            OPTIONAL,
	setOfSNC       SetOfSNC             OPTIONAL,
	isArea         BOOLEAN              OPTIONAL,
	managedVSNInfo ManagedVSNInfo       OPTIONAL,
	snCoord        SNCoord              OPTIONAL,
	astnState      ASTNOperationalState OPTIONAL,
	gmplsIpAddress GraphicString        OPTIONAL,
	restorePhase   RestorePhase         OPTIONAL,
        gmplsLayerRates  SetOfSignalType    OPTIONAL
}

ReportGetSNInLink ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfUSN SetOfSNs,
	dummy    NULL OPTIONAL
}

ReportGetSNList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfSNs SetOfSNs,
	dummy    NULL OPTIONAL
}

ReportGetSonetStructure ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	structuredFlag StructuredFlag,
	structureFixed BOOLEAN,
	sonetStructure STS1Info,
	lopWeight Weight OPTIONAL
}

ReportGetSupportingTPList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	tps    SetOfTPs,
	dummy  NULL OPTIONAL
}

ReportGetTPRouting ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	routing Routing,
	dummy   NULL OPTIONAL
}

ReportGetTrailList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	list   ObjTrailList,
	dummy  NULL OPTIONAL
}

ReportGetTree ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	hierarchy TreeHierarchy,
	dummy     NULL OPTIONAL
}

ReportGetTTPList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfTTP SetOfTTP,
	dummy    NULL OPTIONAL
}

ReportGetUserInfo ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	userInfo UserInfo,
	dummy    NULL OPTIONAL
}

ReportGetUserLinkDetails ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	userLink UserLink,
	dummy    NULL   OPTIONAL
}

ReportGetUserList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	setOfUsers SetOfUsers,
	dummy      NULL   OPTIONAL
}

ReportGetUserProfileInfo ::= SEQUENCE {
	reqId                SmartReqIdtype,
	result               Res,
	setOfUserProfileInfo SetOfUserProfileInfo,
	dummy                NULL   OPTIONAL
}

ReportGetUserProfileList ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	setOfUserProfiles SetOfUserProfiles,
	dummy             NULL   OPTIONAL
}

ReportGetViewList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	setOfViews SetOfViews,
	dummy      NULL   OPTIONAL
}

SetOfWorkingSideInfo ::= SET OF WorkingSideInfo

WorkingSideInfo ::= SEQUENCE {
	snName			SNName,
	workPort		TPName			OPTIONAL,
	protPort		TPName			OPTIONAL,
	workPortLogName		TPName			OPTIONAL,
	protPortLogName		TPName			OPTIONAL,
	workerDir		WorkerDirection,
	sncProtGroup		SncProtGroup,
	workerProtStatus	ProtectionStatus	OPTIONAL,
	protProtStatus		ProtectionStatus	OPTIONAL
}

SncProtGroup ::= ENUMERATED { --NEW
	isFromSncInfo    (0),
	isToSncInfo      (1),
	isTandemInfoNE   (2),
	isTandemInfoFE   (3),
	isIsolatedSncInfo(4)
}

SetOfWorkingSideSegment ::= SET OF WorkingSideSegment

WorkingSideSegment ::= SEQUENCE {
	displaySegment	Segment,
	fromPort	TPName	OPTIONAL,
	toPort		TPName	OPTIONAL,
	isWorkingSideTx	BOOLEAN	OPTIONAL,
	isWorkingSideRx	BOOLEAN	OPTIONAL
}

ReportGetWorkingSide ::= SEQUENCE {
	reqId			SmartReqIdtype,
	result			Res,
	pathId			PathId			OPTIONAL,
	signalType		SignalType		OPTIONAL,
	setOfWorkingSideInfo	SetOfWorkingSideInfo	OPTIONAL,
	inStatus		CircuitStatus		OPTIONAL,
	egStatus		CircuitStatus		OPTIONAL,
	setOfWorkingSideSegment	SetOfWorkingSideSegment	OPTIONAL
}

ReportGetLSPathObjWorkingSide ::= SEQUENCE {
	reqId			SmartReqIdtype,
	result			Res,
	pathId			PathId			OPTIONAL,
	signalType		SignalType		OPTIONAL,
	fromSNName		SNName,
	fromWorkPort		TPName			OPTIONAL,
	fromProtPort		TPName			OPTIONAL,
	fromWorkPortLogName	TPName			OPTIONAL,
	fromProtPortLogName	TPName			OPTIONAL,
	fromWorkerDir		WorkerDirection,
	fromWorkerProtStatus	ProtectionStatus	OPTIONAL,
	fromProtProtStatus	ProtectionStatus	OPTIONAL,
	toSNName		SNName			OPTIONAL,
	toWorkPort		TPName			OPTIONAL,
	toProtPort		TPName			OPTIONAL,
	toWorkPortLogName	TPName			OPTIONAL,
	toProtPortLogName	TPName			OPTIONAL,
	toWorkerDir		WorkerDirection		OPTIONAL,
	toWorkerProtStatus	ProtectionStatus	OPTIONAL,
	toProtProtStatus	ProtectionStatus	OPTIONAL,
	inStatus		CircuitStatus		OPTIONAL,
	egStatus		CircuitStatus		OPTIONAL,
	setOfWorkingSideSegment	SetOfWorkingSideSegment	OPTIONAL
}

ReportGetVC4CoreNEList ::= SEQUENCE {
	reqId    SmartReqIdtype,
	result   Res,
	setOfNEs SetOfNEs,
	dummy    NULL   OPTIONAL
}

ReportGetVC4CoreTPList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	selectableTPs    SetOfTTP,
	nonSelectableTPs SetOfNonSelectableTTP,
	dummy            NULL   OPTIONAL
}

ReportIncludeSN ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportInsertSNInLink ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ResNeBased ::=  SEQUENCE {
	neId	NEId,
	result	Res,
	dummy  NULL   OPTIONAL
}

SetOfNeRes ::= SET OF ResNeBased

ReportInstallNE ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result SetOfNeRes,
	dummy  NULL   OPTIONAL
}

AstnAdvOptions ::= SEQUENCE {
	astnAdvEnable	BOOLEAN,
	wsonAdvEnable	BOOLEAN
}

IniOptions ::= SET OF IniOption

IniOption ::= SEQUENCE {
	optionName  GraphicString,
	optionValue GraphicString
}

--- LP 26-03-2012 IPT NMS Circuit License Management
LicenseStatus ::= SEQUENCE {
    astnAdvEnable	BOOLEAN,
	wsonAdvEnable	BOOLEAN,
	toBeUpdated  NULL OPTIONAL,        -- first option
    gracePeriod NULL OPTIONAL,         -- second option
	licenseFileMissing NULL OPTIONAL   --  third option
}
--- END LP 26-03-2012 IPT NMS Circuit License Management

ReportLogin ::= SEQUENCE {
	reqId               SmartReqIdtype,
	result              Res,
	userId              AttrId,
	timeWindow          WeeklyTimeWindow,
	userGroupId         AttrId,
	resDomainId         AttrId,
	userGroupName       AttrName,
	userViewId          AttrId,
	userViewName        AttrName,
	accessRights        AccessRights,
	rootSNIds           SetOfSNId,
	linkDefault         LinkDefault,
	optPathDefault      OptPathDefault,
	pathDefault         PathDefault,
	circDefault         CircDefault,
	variedDefault       VariedDefault,
	javaPreferences     JavaPreferences,
	custDataLink        CustDataLink,
	custDataPath        CustDataPath,
	custDataMSSPRing    CustDataMSSPRing,
	alarmOptionsNET     AlarmOptions,
	alarmOptionsEM      AlarmOptions,
	alarmOptionsRS      AlarmOptions,
	alarmOptionsNEState AlarmOptions,
	rootSNName          SNName,
	restorationDefault  RestorationDefault,
	lockedIcons         LockedIcons,
	mapWidth            Dimension,
	mapHeight           Dimension,
	host                Hostname,
--- LP 26-03-2012 IPT NMS Circuit License Management
        licenseStatus       LicenseStatus,
--- END LP 26-03-2012 IPT NMS Circuit License Management
	mv38IniOptions      IniOptions,
          dummy               NULL   OPTIONAL
}

ReportLogout ::= SEQUENCE {
	reqId SmartReqIdtype,
	dummy NULL   OPTIONAL
}

ReportManagedVSNLogin ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyGroupTP ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyLink ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyMeasure ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyMSSPRing ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyNutChannels ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	setOfLinkConn SetOfLinkConn,
	dummy         NULL   OPTIONAL
}

ReportModifyPath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifySetOfPaths ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifySN ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyUser ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportModifyUserProfile ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportMoveLink ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	report VC4CoreReport,
	dummy  NULL   OPTIONAL
}


ReportNewOrder ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	infoReplay InfoReplay,
	dummy      NULL   OPTIONAL
}

ReportOpenSN ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	setOfSNInfo SetOfSNInfo,
	setOfUserLink SetOfUserLink,
	mapFile MapFile OPTIONAL,
	setOfLayerInfo SetOfLayerInfo
}

ReportOpenSNParent ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	setOfSNInfo SetOfSNInfo,
	setOfUserLink SetOfUserLink,
	mapFile MapFile OPTIONAL,
	setOfLayerInfo SetOfLayerInfo,
	snName SNName
}

ReportOptPassthrough ::= SEQUENCE {
	reqId SmartReqIdtype OPTIONAL,
	result Res
}

ReportPassthrough ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportReadCircuits ::= SEQUENCE {
	reqId SmartReqIdtype,
	res   Res,
	list  ListOfCircuits,
	dummy NULL   OPTIONAL
}

ReportReadConfiguration ::= SEQUENCE {
	reqId  SmartReqIdtype,
	res    Res,
	orders SetOfOrders,
	dummy  NULL   OPTIONAL
}

ReportReadTPs ::= SEQUENCE {
	reqId SmartReqIdtype,
	res   Res,
	list  ListOfTPs,
	dummy NULL   OPTIONAL
}

ReportRealignEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRealignNE ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result SetOfNeRes,
	dummy  NULL   OPTIONAL
}

ReportReconnectEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportReloadThrProfiles ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRemoveEM ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRemoveGetEMAlarmList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportRemoveGetNMAlarmList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportRemoveLeg ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRemoveLegs ::= SEQUENCE {
	reqId SmartReqIdtype,
	res Res,
	notRemTPs SetOfTPIds OPTIONAL,
	infoReplay InfoReplay
}

ReportRemoveLink ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRemoveLinkConnGroup ::= SEQUENCE {
	reqId SmartReqIdtype,
	res   Res,
	dummy NULL   OPTIONAL
}

ReportRemoveMSSPRing ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	msspringId SmartResIdtype OPTIONAL
}

ReportRemovePath ::= SEQUENCE {
	reqId SmartReqIdtype,
	result Res,
	pathId PathId OPTIONAL
}

ReportRemoveSN ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRemoveUser ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRemoveUserProfile ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportReplaceCircuit ::= SEQUENCE {
	reqId      SmartReqIdtype,
	res        Res,
	infoReplay InfoReplay,
	dummy      NULL   OPTIONAL
}

ReportRerouteCircuit ::= SEQUENCE {
	reqId SmartReqIdtype,
	res Res,
	infoReplay InfoReplay
}

ReportReserveAddProt ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	routing Routing,
	pathId  PathId,
	dummy   NULL   OPTIONAL
}

ReportReserveLeg ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	pathId  PathId,
	routing Routing,
	dummy   NULL   OPTIONAL
}

ReportReserveLink ::= SEQUENCE {
	reqId SmartReqIdtype,
	res   Res,
	dummy NULL   OPTIONAL
}

ReportReservePath ::= SEQUENCE {
	reqId   SmartReqIdtype,
	result  Res,
	routing Routing,
	pathId  PathId,
	dummy   NULL   OPTIONAL
}

ReportReserveRemoveLeg ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportRestorePathOrLink ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	circuitsToRestore SetOfCircToRest,
	dummy             NULL   OPTIONAL
}

ReportSetAlarmOptions ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetClientTrafficType ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetConfigMSSPRing ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetLogicalTTPName ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetObjResDomain ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetObjTrail ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetObjTrailTrace ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetObjUsersGroup ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetPathInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetPreferences ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetSdhStructure ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetSNsCoord ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetSonetStructure ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSetThrProfile ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportStopCircList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportStopEMAlarmList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportStopNEEventList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

ReportStopNMAlarmList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSubmitMeasure ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSwapPath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportSwapVC4Core ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	report VC4CoreReport,
	dummy  NULL   OPTIONAL
}


ReportSwitchMSSPRingNE ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

ReportTraceVC4Core ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	report VC4CoreReport,
	dummy  NULL   OPTIONAL
}


ReportUnsetThrProfile ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

UIParameters ::= SEQUENCE {
	dummy   NULL OPTIONAL,
	action  UIAction,
	urlType URLType,
	address GraphicString
}

URLType ::= ENUMERATED {
	webStart(0),
	browser (1)
}


ReportUserInterfaceManagement ::= SEQUENCE {
	reqId                SmartReqIdtype,
	compliance           Compliance,
	cause                GraphicString,
	additionalParameters UIParameters OPTIONAL

}

UserInterfaceEvent ::= SEQUENCE {
	dummy                NULL OPTIONAL,
	userId               AttrId,
	neId                 NeId,
	additionalParameters UIParameters OPTIONAL
}


ReqId ::= Identifier

RerouteCircuits ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	status PathState OPTIONAL
}

WarningCode ::= INTEGER

-- *****************************************************************************
-- Warning code table
-- *****************************************************************************
--
-- *******************************************************
-- Warning given during Circuit AutoRouteing/Creation:   *
-- *******************************************************
--
--  0  Optical path unframed
--  1  Original protection reinstalled
--  2  Logical link of the prot route has a PH NE in common with the worker
--     route
--  3  Logical link of the prot route has a PH link in common with the worker
--     route
--  4  Logical link of the prot route has a SRLG in common with the worker route
--  5  Logical link does not contain a compatible colour with that specified for
--     current route-way (unprotected,sdhprotected,worker or protection)
--  6  LinkConn level :- if current LinkConn is part of MSSPRING but NUT/eNUT
--     channels are present elsewhere on Link
--  7  LinkConn level :- if current LinkConn is NUT/eNUT which excludes it from
--     MSSPRING elsewhere on Link
--  8  LinkConn level :- if request is for SDHProtected routing,then should
--     avoid using LinkConnections not reserved for restoration if possible
--  9  LinkConn level :- if request is for Unprotected/SDHProtected/AddSNCProtn/
--     SNCProtn[single-step] routing,then should avoid using LinkConnections
--     reserved for restoration if possible)
-- 10  LinkConn level :- worker route (w1) to protect cannot share this link
--     connection which is assigned for PPRestn with another worker route (w2),
--     if w1 & w2 share common physical links)
-- 11  LinkConn level :- worker route (w1) to protect cannot share this link
--     connection which is assigned for PPRestn with another worker route (w2),
--     if w1 & w2 share common SRLGs)
-- 12  Link level :- logical link is used by worker route n.b. for further
--     details on usage see the extra information provided where the priority
--     value is defined  for each routing request type
-- 13  Link level :- i.e. the greater  the basic link weight [i.e. after
--     LinkCapacity adjustment] the more it should be avoided)
--
-- *******************************************************
-- Warning codes used for PSB client                     *
-- *******************************************************
--
-- 14  LCAS setting failure due to problems on the NE
--     PSB reports a specific error code + the error msg incoming from the NE
-- 15  LCAS setting failure due to not applicable request
-- 16  not possible to deactivate a path or path protection because performances
--     are started on it
--
-- *******************************************************
-- Warning codes used by NRQH server                     *
-- They are only present when Res.ResCode == resWarning  *
-- *******************************************************
--
-- 102 - queue full
-- 106 - nodes not known
-- 107 - transient object error
--
-- *******************************************************
-- Error/Warning codes used for licencsing:              *
-- *******************************************************
--
-- 200  Error on licensing: invalid license
-- 201  Error on licensing: exceed max number of NEs allowed by license
-- 202  Error on licensing: time license is expired
-- 203  Error on licensing: exceed max number of users allowed by license
--
-- 250  Warning on licensing: generic warning
-- 251  Warning on licensing: the number of nodes installed is approaching the
--                            maximum specified by license
-- 252  Warning on licensing: the expiration time is approaching
--
-- *******************************************************
-- Warning codes used at logIn time:                     *
-- *******************************************************
--
-- 300  Warning on logIn: user already logged
-- 301  Warning on logIn: processes not yet available
-- 302  Warning on logIn: login in progress
--
-- *****************************************************************************

SetOfWarningCodes ::= SET OF WarningCode

Res ::= SEQUENCE {
	resCode      ResCode,
	resMsg       ResMsg,
	warningCodes SetOfWarningCodes
}

ResCode ::= ENUMERATED {
	resNotOK(1),
	resOK(2),
	resWarning(3)
}

ResDomainPattern ::= SEQUENCE {
	name Pattern OPTIONAL,
	snList SetOfSNs OPTIONAL
}

ReserveAddProt ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathId PathId,
	signalType SignalType,
	protType ProtType,
	revertive Revertive OPTIONAL,
	priority Priority OPTIONAL,
	pathState PathState,
	pathProtDiversity PathProtDiversity,
	protectionMode ProtectionMode,
	originTP TPId,
	destTPs SetOfTPIds
}

ReserveLeg ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	pathId     PathId,
	destTPs    SetOfTPIds,
	dummy      NULL   OPTIONAL
}

ReserveLink ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	fromTP  TTP,
	endName EndName,
	dummy   NULL   OPTIONAL
}

ReservePath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathName PathName,
	signalType SignalType,
	pathType PathType,
	protType ProtType,
	priority Priority OPTIONAL,
	revertive Revertive OPTIONAL,
	pathProtDiversity PathProtDiversity OPTIONAL,
	protectionMode ProtectionMode OPTIONAL,
	customer Customer,
	originTP TPId,
	originTPs SetOfTPIds,
	destTPs SetOfTPIds
}

ReserveRemoveLeg ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	pathId     PathId,
	destTPs    SetOfTPIds,
	dummy      NULL   OPTIONAL
}

ResMsg ::= GraphicString

ResourceId ::= SEQUENCE {
	resourceInfo ResourceInfo,
	operation Operation OPTIONAL
}

ResourceInfo ::= CHOICE {
	linkOrLinkConnId LinkOrLinkConnId,
	path Paths
}

ResourceList ::= SEQUENCE {
	setOfResourceId SetOfResourceId,
	dummy           NULL   OPTIONAL
}

ResourceState ::= ENUMERATED {
	indeterminate(0),
	enableReserved(1),
	enablePartAct(2),
	enableActivated(3),
	disabledReserved(4),
	disabledPartAct(5),
	disabledActivated(6),
	enableReservedReserved(7),
	enablePartActReserved(8),
	enableActivedReserved(9),
	enableActivedPartAct(10),
	enableActivedActived(11),
	disableReservedReserved(12),
	disablePartActReserved(13),
	disableActivedReserved(14),
	disableActivedPartAct(15),
	disableActivedActived(16),
	degradedReservedReserved(17),
	degradedPartActReserved(18),
	degradedActivedReserved(19),
	degradedActivedPartAct(20),
	degradedActivedActived(21),
	enable(22),
	disable(23),
	locked(24),
	enableReservedActived(25),
	disableReservedActived(26),
	degradedReservedActived(27),
	enableReservedPartAct(28),
	disableReservedPartAct(29),
	degradedReservedPartAct(30),
	enablePartActActived(31),
	disablePartActActived(32),
	degradedPartActActived(33),
	enableBooked(34),
	disableBooked(35),
	degradedBooked(36),
	enableBookedBooked(37),
	disableBookedBooked(38),
	degradedBookedBooked(39),
	enableBookedNotActived(40),
	disableBookedNotActived(41),
	enableBookedNotDeactived(42),
	disableBookedNotDeactived(43),
	enableBookedNotActivedActived(44),
	enableActivedBookedNotActived(45),
	disableBookedNotActivedActived(46),
	disableActivedBookedNotActived(47),
	enableReservedBookedNotDeactived(48),
	enableBookedNotDeactivedReserved(49),
	disableReservedBookedNotDeactived(50),
	disableBookedNotDeactivedReserved(51),
	enableReservedPreplanned(52),
	enablePartActPreplanned(53),
	enableActivedPreplanned(54),
	disableReservedPreplanned(55),
	disablePartActPreplanned(56),
	disableActivedPreplanned(57),
	disableBookedNotActivedNotActived(58),
	enableBookedNotActivedNotActived(59),
	disableBookedNotDeactivedNotDeactived(60),
	enableBookedNotDeactivedNotDeactived(61),
	enableSecured(62),
	disableSecured(63),
	degradedSecured(64),
	enablePartSecured(65),
	disablePartSecured(66),
	degradedPartSecured(67),
	enableSecuredActived(68),
	disableSecuredActived(69),
	degradedSecuredActived(70),
	enableSecuredPartSecured(71),
	disableSecuredPartSecured(72),
	degradedSecuredPartSecured(73),
	enableSecuredSecured(74),
	disableSecuredSecured(75),
	degradedSecuredSecured(76),
	enableSecuredReserved(77),
	disableSecuredReserved(78),
	degradedSecuredReserved(79),
	enableSecuredPartAct(80),
	disableSecuredPartAct(81),
	degradedSecuredPartAct(82),
	enableSecuredPreplanned(83),
	disableSecuredPreplanned(84),
	degradedSecuredPreplanned(85),
	enablePartSecuredReserved(86),
	disablePartSecuredReserved(87),
	degradedPartSecuredReserved(88),
	enablePartSecuredPreplanned(89),
	disablePartSecuredPreplanned(90),
	degradedPartSecuredPreplanned(91),
	disablePartSecuredActived(92),
	enablePartSecuredActived(93),
	degradedPartSecuredActived(94),
	disablePartSecuredPartSecured(95),
	enablePartSecuredPartSecured(96),
	degradedPartSecuredPartSecured(97),
	enablePartSecuredPartAct(98),
	disablePartSecuredPartAct(99),
	degradedPartSecuredPartAct(100),
	degradedActived(101),
	degradedPartAct(102),
	degradedReserved(103),
	degradedBookedNotDeactived(104),
	degradedBookedNotActived(105),
	degradedBookedNotDeactivedReserved(106),
	degradedBookedNotDeactivedNotDeactived(107),
	degradedReservedBookedNotDeactived(108),
	degradedBookedNotActivedNotActived(109),
	degradedBookedNotActivedActived(110),
	degradedActivedBookedNotActived(111),
	enablePartActPartAct (112),
	disabledPartActPartAct(113),
	degradedPartActPartAct(114),
	degradedReservedPreplanned(115),
	degradedPartActPreplanned(116),
	degradedActivedPreplanned(117),
	degraded(118),
	disableActivedReservedOnNe(119),
	degradedActivedReservedOnNe(120),
	enableActivedReservedOnNe(121)
}

Restorable ::= BOOLEAN

RestorationDefault ::= SEQUENCE {
	integrTime IntegrTime,
	seed Seed,
	maxPriority Priority,
        lossOfTrafficFlag LossOfTrafficFlag,
	lossOfResilienceFlag LossOfResilienceFlag
}

RestorationType ::= ENUMERATED {
	preplanned (1),
	otf        (2),
	nonRevOtf  (3)
}

RestorePathOrLink ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	seed Seed OPTIONAL,
	cmdType CmdType OPTIONAL,
	resources SetOfPathOrLinkToRest
}

RestoreMasterProtRoute ::= SEQUENCE {
	reqId     SmartReqIdtype,
	resources SetOfPathOrLink,
	dummy     NULL   OPTIONAL
}

RestorProf ::= SEQUENCE {
	resource RestResProf OPTIONAL
}

RestResProf ::= SEQUENCE {
	add Flag,
	recompute Flag,
	restore Flag,
	norm Flag,
	remove Flag
}

Revertive ::= BOOLEAN

Ring ::= SetOfRingItem

RingItem ::= SEQUENCE {
	type RingItemType OPTIONAL,
	info RingItemInfo
}

RingItemInfo ::= CHOICE {
	firstSN CurrRingSN,
	currSN CurrRingSN,
	currLink CurrLink,
	lastLink CurrLink,
	wrongSN WrongSN,
	wrongLink WrongLink
}

RingItemType ::= ENUMERATED {
	oldsel(1),
	newsel(2)
}

RingMap ::= SET OF NodeId

RingMapMismatch ::= BOOLEAN

RingSNsStatus ::= SET OF RingSNStatus

RingSNStatus ::= SEQUENCE {
	uSN SNs,
	nodeId INTEGER,
	ringGroup BshrGroupsStatus,
	spanGroup BshrGroupsStatus OPTIONAL,
	isVirtualSN NULL OPTIONAL
}

RouteItem ::= SEQUENCE {
	type RouteItemType OPTIONAL,
	info RouteItemInfo
}

RouteItemInfo ::= CHOICE {
	firstSN FarEndSN,
	currSN CurrSN,
	lastSN FarEndSN,
	currConn CurrConn,
	wrongSN WrongSN,
	wrongConn WrongConn
}

RouteItemType ::= ENUMERATED {
	oldsel(1),
	newsel(2)
}

ProtLeg ::= SEQUENCE {
	worker     SetOfRouteItem,
	protection SetOfRouteItem OPTIONAL
}

ProtBroadRouting ::= SET OF ProtLeg

Routing ::= CHOICE {
	simple    SimpleRouting,
	prot      ProtRouting,
	broad     BroadRouting,
	protBroad ProtBroadRouting
}

Scanner ::= SEQUENCE {
	id SmartResIdtype,
	granularity Granularity,
	name ScannerName OPTIONAL,
	sgLnType         SgLnType  OPTIONAL
}

ScannerId ::= Identifier

ScannerInfo ::= SEQUENCE {
	id SmartResIdtype,
	name ScannerName,
	user AttrName,
	sgLnType SgLnType,
	trail TrailName,
	granularity Granularity,
	measInfos SetOfMeasInfo,
	creationDate UnixTime,
	from SchedulingTime,
	to SchedulingTime,
	note MeasureNote
}

ScannerName ::= GraphicString

SchedTime ::= INTEGER

ScheduledConnection ::= CHOICE {
	startTime StartTime,
	stopTime StopTime
}

SchedulingInterval ::= SEQUENCE {
	from SchedulingTime,
	to SchedulingTime
}

SchedulingTime ::= CHOICE {
	time [0] UnixTime,
	nowOrForever [1] NULL
}

SDHKLM ::= SEQUENCE {
	au4 INTEGER,
	tu3 INTEGER (0..255),
	tu2 INTEGER (0..255),
	tu12 INTEGER (0..255)
}

PDHNMAlCounter ::= SEQUENCE {
	e2Path    INTEGER,
	e3Path    INTEGER,
	e1Circ    INTEGER,
	e1_nvCirc INTEGER
}

SDHNMAlCounter ::= SEQUENCE {
	loLink INTEGER,
	hoLink INTEGER,
	rsLink INTEGER,
	msLink INTEGER,
	vc4Path INTEGER,
	tu12vc12Circ INTEGER,
	tu2vc2_5cCirc INTEGER,
	tu2vc2Circ INTEGER,
	tu3vc3Circ INTEGER,
	au4vc4Circ INTEGER,
	au4vc4_4cCirc INTEGER,
	au4vc4_16cCirc INTEGER,
	au4vc4_64cCirc INTEGER,
	au4vc4_nvCirc INTEGER,
	tu12vc12_nvCirc INTEGER,
	tu3vc3_nvCirc INTEGER,
	tu2vc2_nvCirc  INTEGER
}

SDHPortInformation ::= SEQUENCE {
	speed INTEGER,
	link GraphicString OPTIONAL
}

sdhwdmProtocolTechnology ProtocolTechnology ::= {
	TechID 1,
	ptTechDescription "I38 - SDH and Photonix Interface"
}

Second ::= INTEGER

SecurityProf ::= SEQUENCE {
	domain AddModRemProf OPTIONAL,
	userProf AddModRemProf OPTIONAL,
	userType AddModRemProf OPTIONAL,
	user AddModRemProf OPTIONAL
}

Seed ::= INTEGER

Segment ::= SEQUENCE {
	fromSNId SNId,
	outsideFromSNId SNId OPTIONAL,
	toSNId SNId,
	outsideToSNId SNId OPTIONAL,
	cycleLifeState CycleLifeState,
	workerDirection WorkerDirection,
	isPreplanOnNE BOOLEAN OPTIONAL,
	alarmState PathAlarmState
}

SelectorSN ::= SEQUENCE {
	usnId SNId,
	snType SNType,
	name CompleteName
}

ServiceState ::= ENUMERATED {
	inService(0),
	outOfService(1)
}

SetAlarmOptions ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	alarmOptionsNET AlarmOptions OPTIONAL,
	alarmOptionsEM AlarmOptions OPTIONAL,
	alarmOptionsRS AlarmOptions OPTIONAL,
	alarmOptionsNEState AlarmOptions OPTIONAL
}

SetClientTrafficType ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	path         Paths,
	clientTrType ClientTrType,
	dummy        NULL   OPTIONAL
}

SetConfigMSSPRing ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	msspringId SmartResIdtype,
	dummy      NULL   OPTIONAL
}

SetCTTReport ::= SEQUENCE {
	userId AttrId,
	msg    Cause,
	dummy  NULL   OPTIONAL
}

SetLogicalTTPName ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfTTP SetOfTTP,
	logTTPName TTPName OPTIONAL,
	overwriteLogName BOOLEAN OPTIONAL
}

SetObjResDomain ::= SEQUENCE {
	reqId     SmartReqIdtype,
	object    ObjResDomain,
	attrValue ObjResDomain,
	dummy     NULL   OPTIONAL
}

SetObjSNC ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	list   ObjSNCList,
	dummy  NULL   OPTIONAL
}

SetObjTrail ::= SEQUENCE {
	reqId     SmartReqIdtype,
	userId    AttrId,
	object    ObjTrail,
	attrValue ObjTrail,
	dummy     NULL   OPTIONAL
}

SetObjTrailTrace ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	object ObjTrailList,
	trace ObjTrailTrace OPTIONAL
}

SetObjUsersGroup ::= SEQUENCE {
	reqId     SmartReqIdtype,
	object    ObjUsersGroup,
	attrValue ObjUsersGroup,
	dummy     NULL   OPTIONAL
}

SetOfAG ::= SET OF AG

SetOfAlState ::= SET OF AlState

SetOfCardInvolved ::= SET OF CardInvolved

SetOfCircuits ::= SET OF Circuit

SetOfClient ::= SET OF Client

SetOfCTP ::= SET OF CTP

SetOfCTPId ::= SET OF CTPId

SetOfCustDataConfig ::= SET OF CustDataConfig

SetOfEMAlarm ::= SET OF EMAlarm

SetOfEMCommand ::= SET OF EMCommand

SetOfEMs ::= SET OF EMs

SetOfExtLnType ::= SET OF ExtLnType

SetOfKLM ::= SET OF KLM

SetOfLayer ::= SET OF Layer

SetOfLayerInfo ::= SET OF LayerInfo

SetOfLeg ::= SET OF Leg

SetOfLink ::= SET OF Link

SetOfLinkConn ::= SET OF LinkConn

SetOfLinkConnCounters ::= SET OF LinkConnCounters

SetOfLinkConnId ::= SET OF LinkConnId

SetOfLinkConnInfo ::= SET OF LinkConnInfo

SetOfLinkData ::= SET OF LinkData

SetOfLinkRestored ::= SET OF LinkRestored

SetOfLinks ::= SET OF Links

SetOfLnLink ::= SET OF LnLink

SetOfLoggedUser ::= SET OF LoggedUser

SetOfLogicalSnc ::= SET OF LogicalSnc

SetOfLogTTP ::= SET OF LogTTP

SetOfMeasInfo ::= SET OF MeasInfo

SetOfMeasures ::= SET OF Measure

SetOfMSSPRing ::= SET OF MSSPRing

SetOfMSSPRingId ::= SET OF SmartResIdtype

SetOfMSSPRingInfo ::= SET OF MSSPRingInfo

SetOfMSSPRingState ::= SET OF MSSPRingState

SetOfMSSPRingSwitchCmd ::= SET OF MSSPRingSwitchCmd

SetOfNE_SN ::= SET OF NE_SN

SetOfNEEvent ::= SET OF NEEvent

SetOfNEEventType ::= SET OF NEEventType

SetOfNEId ::= SET OF NEId

SetOfNEs ::= SET OF NEs

SetOfNMAlarm ::= SET OF NMAlarm

SetOfNMResAlarmed ::= SET OF NMResAlarmed

SetOfOrderIds ::= SET OF OrderId

SetOfAlarmInfo ::= SET OF AlarmInfo

SetOfOrders ::= SET OF Order

SetOfPath ::= SET OF Path

SetOfPathId ::= SET OF PathId

SetOfPathInfo ::= SET OF PathInfo

SetOfPathInGroup ::= SET OF PathInGroup

SetOfPathOrLinkToRest ::= SET OF PathOrLinkToRest

SetOfPathOrLink ::= SET OF PathOrLink

SetOfPaths ::= SET OF Paths

SetOfPathState ::= SET OF PathState

SetOfPathType ::= SET OF PathType

SetOfPC ::= SET OF PCId

SetOfPerfCounters ::= SET OF PerfCounters

SetOfPerfDataDisplay ::= SET OF PerfDataDisplay

SetOfPhysicalSlots ::= SET OF PhysicalSlot

SetOfPort ::= SET OF Port

SetOfPortInfo ::= SET OF PortInfo

SetOfProtType ::= SET OF ProtType

SetOfResourceId ::= SET OF ResourceId

SetOfResourceState ::= SET OF ResourceState

SetOfRingItem ::= SET OF RingItem

SetOfRouteItem ::= SET OF RouteItem

SetOfScanner ::= SET OF Scanner

SetOfScannerInfo ::= SET OF ScannerInfo

SetOfSegment ::= SET OF Segment

SetOfServiceState ::= SET OF ServiceState

SetOfSeverity ::= SET OF Severity

SetOfSignalType ::= SET OF SignalType

SetOfState ::= SET OF State

SetOfSNC ::= SET OF SNC

SetOfSNChanged ::= SET OF SNChangedEntry

SetOfSNContents ::= SET OF SNContents

SetOfSNCType ::= SET OF SNCType

SetOfSNId ::= SET OF SNId

SetOfSNIdSNCoord ::= SET OF SNIdSNCoord

SetOfSNInfo ::= SET OF SNInfo

SetOfSNName ::= SET OF SNName

SetOfSNs ::= SET OF SNs

SetOfSNType ::= SET OF SNType

SetOfThrName ::= SET OF ThrName

SetOfThrProfile ::= SET OF ThrProfile

SetOfTPIds ::= SET OF TPId

SetOfTPs ::= SET OF TP

SetOfTraceLines ::= SET OF TraceLines

SetOfTrailId ::= SET OF SmartResIdtype

SetOfTrailTrace ::= SET OF TrailTrace

SetOfTrailTraceState ::= SET OF TrailTraceState

SetOfTTP ::= SET OF TTP

SetOfLRTTPId ::= SET OF LRTTPId

SetOfLRTTPs ::= SET OF LRTTP

SetOfNonSelectableTTP ::= SET OF NonSelectableTTP

SetOfTTPId ::= SET OF TTPId

SetOfUserId ::= SET OF AttrId

SetOfUserLink ::= SET OF UserLink

SetOfUserProfileId ::= SET OF AttrId

SetOfUserProfileInfo ::= SET OF UsersProfileInfo

SetOfUserProfiles ::= SET OF UserProfiles

SetOfUsers ::= SET OF Users

SetOfViews ::= SET OF Views

SetOfWrapper ::= SET OF Wrapper

SetPathInfo ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	msspringId SmartResIdtype,
	dummy      NULL   OPTIONAL
}

SetPreferences ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	linkDefault LinkDefault OPTIONAL,
	pathDefault PathDefault OPTIONAL,
	optPathDefault OptPathDefault OPTIONAL,
	restDefault RestorationDefault OPTIONAL,
	circDefault CircDefault OPTIONAL,
	variedDefault VariedDefault OPTIONAL,
	defaultFlag BOOLEAN OPTIONAL,
	javaPreferences JavaPreferences OPTIONAL
}

SetSdhStructure ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	connectivityId ConnectivityId,
	sdhStructure AU4Info,
	lopWeight Weight, -- TO BE REMOVED
	vc4PathName GraphicString OPTIONAL
}

SetSNsCoord ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	setOfUSNIdSNCoord SetOfSNIdSNCoord,
	allLayers BOOLEAN OPTIONAL
}

SetSonetStructure ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	connectivityId ConnectivityId,
	sonetStructure STS1Info,
	lopWeight      Weight,
	dummy          NULL   OPTIONAL
}

SetThrProfile ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathLinkList PathLinkList,
	measures SetOfMeasures,
	granularity Granularity,
	pVC4struct BOOLEAN OPTIONAL,
	pSTS1struct BOOLEAN OPTIONAL
}

SevenTUG2 ::= SET OF TUG2StructureInfo

SevenVTGroups ::= SET OF VTGroupStructureInfo

Severity ::= ENUMERATED {
	indeterminate(0),
	critical(1),
	major(2),
	minor(3),
	warning(4),
	cleared(5),
	deleted(6)
}

SgLnType ::= CHOICE {
	signalType [0] SignalType,
	lnType [1] LnType,
	pVC4struct [2] BOOLEAN,
	pSTS1struct [3] BOOLEAN
}

ShortNEName ::= GraphicString

ShortSNName ::= GraphicString

Side ::= ENUMERATED {
	from(1),
	to(2),
	both(3)
}

SignalType ::= ENUMERATED {
	tu11vc11      (1),
	tu12vc12      (2),
	tu2vc2        (3),
	tu2vc2_5c     (4),
	tu3vc3        (5),
	au4vc4        (6),
	au4vc4_4c     (7),
	mspstm1       (8),
	mspstm4       (9),
	mspstm16      (10),
	msstm1        (11),
	msstm4        (12),
	msstm16       (13),
	rsstm1        (14),
	rsstm4        (15),
	rsstm16       (16),
	phstm1        (17),
	phstm4        (18),
	phstm16       (19),
	mspstm64      (20),
	mspstm256     (21),
	msstm64       (22),
	msstm256      (23),
	rsstm64       (24),
	rsstm256      (25),
	phstm64       (26),
	phstm256      (27),
	ots           (28),
	oms           (29),
	omsp          (30),
	och           (31),
	phwdmport     (32),
	phfixedtr     (33),
	phnulltr      (34),
	rsfixedtr     (35),
	phopt         (36),
	au4vc4_ncv    (37),
	phlmtr        (38),
	phmuxtr       (39),
	au4vc4_16c    (40),
	au4vc4_64c    (41),
	tu12vc12_ncv  (43),
	tu2vc2_ncv    (44),
	tu3vc3_ncv    (45),
	phlosbackplane(46),
	otu1          (47),
	otu2          (48),
	otu3          (49),
	odu1          (50),
	odu2          (51),
	odu3          (52),
	cbr           (53),
	ph2_5Gb       (54),
	ph10Gb        (55),
	ph40Gb        (56),
	vt15          (64),
	vt2           (65),
	vt3           (66),
	vt6           (67),
	sts1          (68),
	sts3c         (69),
	sts12c        (70),
	sts48c        (71),
	sts192c       (72),
	sts768c       (73),
	phoc3         (74),
	phoc12        (75),
	phoc48        (76),
	phoc192       (77),
	phoc768       (78),
	phec1         (79),
	rsoc3         (80),
	rsoc12        (81),
	rsoc48        (82),
	rsoc192       (83),
	rsoc768       (84),
	rsec1         (85),
	msoc3         (86),
	msoc12        (87),
	msoc48        (88),
	msoc192       (89),
	msoc768       (90),
	msec1         (91),
	mspoc3        (92),
	mspoc12       (93),
	mspoc48       (94),
	mspoc192      (95),
	mspoc768      (96),
	mspec1        (97),
	vc4Path       (98),
	phRadio       (99),
	rsRadio       (100),
	msRadio       (101),
	phPDH         (102),
	e1            (103),
	e2            (104),
	e3            (105),
	e1_nv         (106),
	wson	      (107),
    odu0          (108),
    otu0          (109)
}

SimpleRouting ::= SetOfRouteItem

SNC ::= SEQUENCE {
	sncName SNCName,
	sncId SNCId,
	cycleLifeState 	CycleLifeState,
	adminState 	AdminState,
	aEndPortName	GraphicString OPTIONAL,
	zEndPortName	GraphicString OPTIONAL,
	signalType	SignalType OPTIONAL
}

SNCAssignInfo ::= SEQUENCE {
	directionality Directionality,
	fromSNId SNId,
	toSNId SNId
}

ManagementType ::= ENUMERATED {
	legacy (1),
	astnCD (2),
	astnDD (3)
}

SNChange ::= CHOICE {
	snName  SNName,
	snState SNState
}

SNChanged ::= SEQUENCE {
	snChanges SetOfSNChanged,
	dummy     NULL   OPTIONAL
}

SNChangedEntry ::= SEQUENCE {
	userViewId     AttrId,
	usnId          SNId,
	isGeneric      BOOLEAN              OPTIONAL,
	snChange       SNChange             OPTIONAL,
	astnState      ASTNOperationalState OPTIONAL,
	gmplsIpAddress GraphicString        OPTIONAL,
	restorePhase   RestorePhase         OPTIONAL
}

SNCId ::= SEQUENCE {
	snId SNId,
	sncId SNCRelId
}

SNCMessage ::= GraphicString

SNCModified ::= SEQUENCE {
	userId     AttrId,
	sncMessage SNCMessage,
	dummy      NULL   OPTIONAL
}

SNCName ::= SEQUENCE {
	physical GraphicString,
	logical GraphicString OPTIONAL
}

SNConcatName ::= GraphicString

SNContents ::= CHOICE {
	parentSN SelectorSN,
	currentSN SelectorSN,
	sn SelectorSN,
	node SNNameIdType
}

SNCoord ::= SEQUENCE {
	x PosX,
	y PosY
}

SNCRelId ::= Identifier

SNCType ::= ENUMERATED {
	degenerate(1),
	unidirectional(2),
	bidirectional(3),
	broadcast(4),
	unidirectionalProt(5),
	bidirectionalProt(6),
	broadcastProt(7),
	interconnectionProt(8)
}

SNId ::= SEQUENCE {
	id SmartResIdtype,
	layer Layer OPTIONAL
}

SNIdNameState ::= SEQUENCE {
	uSNId SNId,
	snName SNName,
	state SNState
}

SNIdSNCoord ::= SEQUENCE {
	usnId SNId,
	snCoord SNCoord
}

SNInfo ::= SEQUENCE {
	setOfLayerInfo       SetOfLayerInfo,
	snName               SNName,
	snType               SNType,
	mapFile              MapFile              OPTIONAL,
	neInfo               NEs                  OPTIONAL,
	neIdInEM             INTEGER              OPTIONAL,
	isArea               BOOLEAN              OPTIONAL,
	managedVSNInfo       ManagedVSNInfo       OPTIONAL,
	astnState            ASTNOperationalState OPTIONAL,
	gmplsIpAddress       GraphicString        OPTIONAL,
	hasNoChildren        BOOLEAN              OPTIONAL,
	ospfGmplsRoutingArea GraphicString        OPTIONAL
}

SNModified ::= SEQUENCE {
	userViewId AttrId,
	usnId SNId,
	snName SNName,
	setOfSNInfo SetOfSNInfo,
	setOfUserLink SetOfUserLink,
	mapFile MapFile OPTIONAL
}

SNName ::= SEQUENCE {
	longSNName         LongSNName,
	shortSNName        ShortSNName,
	snSuffix           SNSuffix      OPTIONAL,
	terminalIdentifier GraphicString OPTIONAL
}

SNNameIdType ::= SEQUENCE {
	snName SNName,
	snId SNId,
	snType SNType
}

SNPatternName ::= SEQUENCE {
	longSNName LongSNName OPTIONAL,
	shortSNName ShortSNName OPTIONAL,
	snSuffix SNSuffix OPTIONAL
}

SNProf ::= SEQUENCE {
	add Flag,
	modify Flag,
	include Flag,
	remove Flag,
	setTtp Flag,
	getTtp Flag
}

SNRole ::= ENUMERATED {
	from(1),
	to(2)
}

SNs ::= SEQUENCE {
	snName SNName,
	snId SNId,
	snType SNType OPTIONAL,
	loSupport BOOLEAN OPTIONAL,
	neIdInEM INTEGER OPTIONAL,
	emName EMName OPTIONAL,
	neName NEName OPTIONAL,
	logNameLen INTEGER OPTIONAL
}

SNState ::= ENUMERATED {
	normal(1),
	warning(2),
	alarmed(3),
	notConnected(4),
	notAvailable(5),
        alarmMisaligned(6)
}

SNSuffix ::= GraphicString

SNType ::= ENUMERATED {
	generic(1),
	virtualSN(2),
	adm1(3),
	adm4(4),
	tl4(5),
	adm16(6),
	tl16(7),
	reg16(8),
	dxc41(9),
	tl1(10),
	reg1(11),
	reg4(12),
	area(13),
	outside(14),
	otm(15),
	ola(16),
	oadm(17),
	oxc(18),
	adm64(19),
	tl64(20),
	reg64(21),
	adm256(22),
	tl256(23),
	reg256(24),
	rt(25),
	pxc(26),
	radioDxc(27),
	radioReg(28),
	etn(29),
	oduDxc(30)
}

SONETKLM ::= SEQUENCE {
	sts1 INTEGER,
	vtgroup INTEGER (0..255),
	vtId INTEGER (0..255),
	vtType VTType
}

SONETNMAlCounter ::= SEQUENCE {
	loLink INTEGER,
	hoLink INTEGER,
	rsLink INTEGER,
	msLink INTEGER,
	sts1Path INTEGER,
	vt15Circ INTEGER,
	tu2vc2_5cCirc INTEGER,
	vt2Circ INTEGER,
	vt3Circ INTEGER,
	vt6Circ INTEGER,
	sts1Circ INTEGER,
	sts3cCirc INTEGER,
	sts12cCirc INTEGER,
	sts21cCirc INTEGER,
	sts48cCirc INTEGER,
	sts192cCirc INTEGER,
	sts768cCirc INTEGER
}

sonetProtocolTechnology ProtocolTechnology ::= {
	TechID 2,
	ptTechDescription "I38 - SONET Interface"
}

SpringConfModify ::= SEQUENCE {
	allSpanOnly BOOLEAN,
	msspringId SmartResIdtype,
	bshrType BSHRType,
	lnLinkCouple LnLinkCouple
}

StandByState ::= ENUMERATED {
	standBy(1),
	providingService(2)
}

StartTime ::= INTEGER

StopAction ::= ENUMERATED {
	indeterminate(0),
	freeze(1),
	stop(2)
}

StopCircList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	stopAction StopAction,
	dummy      NULL   OPTIONAL
}

StopEMAlarmList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	stopAction StopAction,
	dummy      NULL   OPTIONAL
}

StopNEEventList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	stopAction StopAction,
	dummy      NULL OPTIONAL
}

StopNMAlarmList ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	stopAction StopAction,
	dummy      NULL   OPTIONAL
}

StopTime ::= INTEGER

StringValue ::= GraphicString

StringValuePattern ::= GraphicString

StructuredFlag ::= BOOLEAN

STS1Info ::= CHOICE {
	oneSTS1 ConnectionInfo,
	oneSTS1SPE STS1SPEStructureInfo
}

STS1PathProf ::= SEQUENCE {
	add Flag,
	def Flag,
	activ Flag,
	secure Flag,
	modify Flag,
	unsecure Flag,
	resetName Flag,
	deactiv Flag,
	disass Flag,
	remove Flag,
	addProt Flag,
	activProt Flag,
	secureProt Flag,
	workSide Flag,
	unsecureProt Flag,
	modifyProt Flag,
	deactivProt Flag,
	removeProt Flag
}

STS1SPEStructureInfo ::= CHOICE {
	notSubmultiplexed NULL,
	sevenVTGroups SevenVTGroups
}

SubmitMeasure ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	name ScannerName,
	pathLinkList PathLinkList,
	granularity Granularity,
	measures SetOfMeasures,
	from SchedulingTime,
	to SchedulingTime,
	note MeasureNote,
	labelTPs     LabelTPs OPTIONAL
}

SupportTSI ::= BOOLEAN

SwapCmdType ::= ENUMERATED {
	addProtToRest(1),
	addProtToNorm(2),
	swapToRest(3),
	swapToNorm(4),
	remProtToRest(5),
	remProtToNorm(6)
}

Swappable ::= BOOLEAN

SwappableOnly ::= BOOLEAN

SwapPath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	signalType SignalType,
	pathId PathId,
	endsToSwap EndsToSwap,
	containingPathId SmartResIdtype OPTIONAL,
	cmdType SwapCmdType OPTIONAL,
	undo Undo OPTIONAL,
	usersGroups RefUsersGroupList OPTIONAL
}

SwapVC4Core ::= SEQUENCE {
	reqId              SmartReqIdtype,
	tpOptions          GetVC4CoreTPListOptions,-- used to ensure TPs are still valid
	transformationTTPs SetOfTransformationTTPs,
	dummy              NULL   OPTIONAL
}



SwitchMSSPRingNE ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	usnIdFrom  SNId,
	switchCmd  MSSPRingSwitchCmd,
	msspringId SmartResIdtype,
	dummy      NULL   OPTIONAL
}

SwitchType ::= ENUMERATED {
	clear(1),
	lockoutOC(2),
	forcedSwitchWorker(3),
	forcedSwitchProtection(4),
	manualSwitchWorker(5),
	manualSwitchProtection(6),
	exercise(7)
}

SysInfoProf ::= SEQUENCE {
	domain Flag,
	userProf Flag,
	userType Flag,
	user Flag,
	loggedU Flag
}

SysProf ::= SEQUENCE {
	info SysInfoProf OPTIONAL,
	security SecurityProf OPTIONAL,
	log LogProf OPTIONAL
}

Technology ::= ENUMERATED {
	notSupported(1),
	notSoliton(2),
	soliton(3)
}

ThreeTUG12 ::= SET OF ConnectionInfo

ThreeTUG3 ::= SET OF TUG3StructureInfo

ThreeVT2 ::= SET OF ConnectionInfo

ThresholdProf ::= SEQUENCE {
	set PerfTypeProf OPTIONAL,
	remove PerfTypeProf OPTIONAL,
	update Flag,
	details PerfTypeProf OPTIONAL
}

ThrName ::= AttrName

ThrProfile ::= SEQUENCE {
	id Identifier,
	name GraphicString
}

Time ::= GraphicString

TMUXPortInformation ::= SEQUENCE {
	speed SignalType,
	timeslot INTEGER
}

ConnectedTP ::= SEQUENCE {
        tpName TPName,
        signalType SignalType,
        tpId TPId,
        portLabel GraphicString OPTIONAL,
        tpLogicalName GraphicString OPTIONAL,
        tpInfo TPInfo OPTIONAL,
        assignState AssignState OPTIONAL,
        operState OperState OPTIONAL,
        resourceOID  GraphicString OPTIONAL,
        tpRole TPRole OPTIONAL
}

SNCInformation ::= CHOICE {
    snc          SNC,
    associated   BOOLEAN    -- true means active on IPT-NMS
}

ConnectedRouteInfo ::= SEQUENCE {
    connectedRouteTP    ConnectedTP,
    sncInfo             SNCInformation
}

TP ::= SEQUENCE {
	tpName TPName,
	signalType SignalType,
	tpId TPId,
	portLabel GraphicString OPTIONAL,
	tpLogicalName GraphicString OPTIONAL,
	tpInfo TPInfo OPTIONAL,
	assignState AssignState OPTIONAL,
	operState OperState OPTIONAL,
	resourceOID  GraphicString OPTIONAL,
        tpRole TPRole OPTIONAL,
        connectedRouteInfo ConnectedRouteInfo OPTIONAL
}

TPAssignInfo ::= SEQUENCE {
	directionality Directionality,
	snRole SNRole
}

TPAssignState ::= SEQUENCE {
	txAssignState AssignState,
	rxAssignState AssignState
}

GTPId ::= SEQUENCE {
   snId  SNId,
   gtpId Identifier
}

VCGId ::= SEQUENCE {
	snId  SNId,
	vcgId Identifier,
	lcasOpState  LCASOpState OPTIONAL,
	lcasStateConfigurationSupported NULL OPTIONAL

}

TPId ::= CHOICE {
	ttpId TTPId,
	ctpId CTPId,
	gtpId GTPId,
	phttpId PhTTPId,
	phctpId PhCTPId,
	vcgId VCGId
}

TPInfo ::= CHOICE {
	ttpInfo TTPInfo,
	ctpInfo CTPInfo,
	gtpInfo GTPInfo,
	vcgInfo VCGInfo
}

TPName ::= GraphicString

TraceLines ::= GraphicString

TraceProf ::= SEQUENCE {
	define Flag,
	set Flag,
	clear Flag,
	enableMon Flag,
	disableMon Flag
}

TrailId ::= Identifier

TrailName ::= CHOICE {
	pathName [0] PathName,
	linkName [1] LinkName
}

TrailTrace ::= CHOICE {
	notSupported [0] NULL,
	disabled [1] NULL,
	fixedByte [2] INTEGER (0..255),
	e164 [3] OCTET STRING
}

TrailTraceCmd ::= ENUMERATED {
	cmdDefine(1),
	cmdSet(2),
	cmdClear(3),
	cmdEnMonitoring(4),
	cmdDisMonitoring(5)
}

TrailTraceState ::= ENUMERATED {
	unsupported(1),
	undefined(2),
	defined(3),
	set(4),
	monitored(5)
}

Transp ::= SEQUENCE {
	transpName TTPName,
	clienttrtype ClientTrType OPTIONAL,
	wrapper Wrapper OPTIONAL,
	freq Wavelengths OPTIONAL
}

TraceVC4Core ::= SEQUENCE {
	reqId       SmartReqIdtype,
	tpOptions   GetVC4CoreTPListOptions,-- used to ensure TPs are still valiD
	vc4CoreTTPs SetOfLRTTPs,
	dummy       NULL   OPTIONAL
}



TreeHierarchy ::= SET OF TreeItem

TreeItem ::= SEQUENCE {
	parent SNIdNameState,
	sons SetOfSNId
}

TTP ::= SEQUENCE {
	ttpName        TTPName,
	ttpId          TTPId,
	signalType     SignalType,
	assignState    TPAssignState,
	operState      OperState,
	wLengthInfo    INTEGER        OPTIONAL,
	logName        TTPName        OPTIONAL,
	wdm            Wdm            OPTIONAL,
	transp         Transp         OPTIONAL,
	coloured       Coloured       OPTIONAL,
	defaultLogName TTPName        OPTIONAL,
	logNameSupport BOOLEAN        OPTIONAL,
	timeslot       INTEGER        OPTIONAL
}

NonSelectableTTP ::= SEQUENCE {
	ttpName TTPName,
	reason GraphicString
}



LRTTP ::= SEQUENCE {
	id LRTTPId,
	neName NEName,
	ttpName TTPName
}




LRTransformationTTPs ::= SEQUENCE {
	obsolete LRTTP,
	replacement LRTTP
}

SetOfTransformationTTPs ::= SET OF LRTransformationTTPs


TTPId ::= SEQUENCE {
	snId SNId,
	ttpId TTPRelId
}

LRTTPId ::= SEQUENCE {
	neId NEId,
	ttpId TTPId
}


TTPInfo ::= SEQUENCE {
	snId SNId OPTIONAL,
	ttpId TTPRelId OPTIONAL,
	shelfId INTEGER OPTIONAL,
	cardId INTEGER OPTIONAL,
	portId INTEGER OPTIONAL,
	timeSlot INTEGER OPTIONAL,
	vttpId INTEGER OPTIONAL,
	tpName TPName OPTIONAL
}

TTPName ::= GraphicString

TTPPattern ::= GraphicString

TTPRelId ::= Identifier

TUG2StructureInfo ::= CHOICE {
	oneTU2 ConnectionInfo,
	threeTUG12 ThreeTUG12
}

TUG3StructureInfo ::= CHOICE {
	oneTU3 ConnectionInfo,
	sevenTUG2 SevenTUG2
}

TwoVT3 ::= SET OF ConnectionInfo

UIAction ::= ENUMERATED {
	uiOpen(1),
	uiClose(2)
}

UICommand ::= CHOICE {
	neId NeId,
	rtm NULL
}

Undo ::= BOOLEAN

UnixTime ::= INTEGER

UnselLink ::= NULL

UnselPath ::= NULL

UnsetThrProfile ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	pathLinkList PathLink,
	measures SetOfMeasures,
	granularity Granularity,
	pVC4struct BOOLEAN OPTIONAL,
	pSTS1struct BOOLEAN OPTIONAL
}

UserInfo ::= SEQUENCE {
	userName AttrName,
	creationUser AttrName,
	creationDate UnixTime,
	usersGroup AttrName,
	timeWindow WeeklyTimeWindow
}

UIRequestParameters ::= SEQUENCE {
	puiType   PUIType,
	uiAddress GenericAddress OPTIONAL
}

PUIType ::= ENUMERATED {
	onUX (0),
	onPC (1)
}

UserInterfaceManagement ::= SEQUENCE {
	reqId                SmartReqIdtype,
	emId                 SmartResIdtype,
	additionalText       GraphicString,
	userName             GraphicString,
	password             GraphicString,
	display              GraphicString,
	action               UIAction,
	command              UICommand,
	additionalParameters UIRequestParameters OPTIONAL
}

UserLink ::= SEQUENCE {
	userLinkId UserLinkId,
	userLinkState UserLinkState,
	userLinkType UserLinkType,
	userLinkProtState UserLinkProtState,
	fromUSNId SNId,
	toUSNId SNId,
	numberOfLinks NumberOfLinks,
	counters UserLinkCounters
}

UserLinkChangedState ::= SEQUENCE {
	userViewId        AttrId,
	userLinkId        UserLinkId,
	userLinkState     UserLinkState,
	userLinkProtState UserLinkProtState,
	dummy             NULL   OPTIONAL
}

UserLinkCounters ::= SEQUENCE {
	normalLinks AttrId OPTIONAL,
	warnedLinks AttrId OPTIONAL,
	alarmedLinks AttrId OPTIONAL,
	setOfLinkConnCounters SetOfLinkConnCounters OPTIONAL
}

UserLinkId ::= SEQUENCE {
	id SmartResIdtype,
	layer Layer
}

UserLinkProtState ::= ENUMERATED {
	notProtectedUL(1),
	protectedUL(2),
	genericUL(3)
}

UserLinkState ::= ENUMERATED {
	normal(1),
	warning(2),
	alarmed(3)
}

UserLinkType ::= ENUMERATED {
	group  (1),
	stm1   (2),
	stm4   (3),
	stm16  (4),
	stm64  (5),
	stm256 (6),
	opt    (7),
	subStm1(8),
	pdh    (9)
}

UserListType ::= ENUMERATED {
	created(1),
	notCreated(2),
	all(3)
}

UserLoggedOut ::= SEQUENCE {
	userId AttrId,
	result Res    OPTIONAL
}

UserProfiles ::= SEQUENCE {
	userProfileName AttrName,
	userProfileId AttrId
}

Users ::= SEQUENCE {
	userName AttrName,
	userId AttrId OPTIONAL
}

UsersProfileInfo ::= SEQUENCE {
	userProfileName AttrName,
	userName AttrName,
	creationDate UnixTime,
	usersGroups RefUsersGroupList,
	accessRights AccessRights
}

UserTimeWindowChanged ::= SEQUENCE {
	userId     AttrId,
	timeWindow WeeklyTimeWindow,
	dummy      NULL   OPTIONAL
}

VariedDefault ::= SEQUENCE {
	overwriteLogName BOOLEAN,
	multiplierFactor IntValue,
	allLayers BOOLEAN,
	allSN BOOLEAN,
	showLogName BOOLEAN
}

VC4PathProf ::= SEQUENCE {
	add Flag,
	def Flag,
	find Flag,
	autoRoute Flag,
	activ Flag,
	secure Flag,
	modify Flag,
	service Flag,
	unsecure Flag,
	resetName Flag,
	deactiv Flag,
	disass Flag,
	remove Flag,
	addProt Flag,
	activProt Flag,
	secureProt Flag,
	workSide Flag,
	unsecureProt Flag,
	modifyProt Flag,
	swap Flag,
	deactivProt Flag,
	removeProt Flag
}


VC4CoreReport ::= CHOICE {
	generalError             NULL,
	neNotFound               NULL,
	portNotFoundOrNotValid   NULL,
	disassociateVC4PathError PathName,
	details                  VC4CoreReportDetails,
	movelinkdetails          MoveLinkReportDetails
}


VC4StructureInfo ::= CHOICE {
	notSubmultiplexed NULL,
	threeTUG3 ThreeTUG3
}

VC4CoreReportDetails ::= SEQUENCE {
	disassociatedVC4Paths SetOfPathNames,
	newLinks              SetOfVC4CoreReportLinkDetails,
	unmodifyableVC4Paths  SetOfVC4CoreReportUnmodifyableVC4Paths,
	relocatedVC4Paths     SetOfVC4CoreReportRelocatedVC4Paths,
	tracedVC4PathSummary  SetOfVC4CoreReportTracedVC4PathSummary,
	autorouteDetails      VC4CoreAutoRouteDetails
}

VC4CoreAutoRouteDetails ::= SEQUENCE {
	matchesSoNothingToAutoroute NULL OPTIONAL,
	autoroutableSummary         SetOfVC4CoreReportAutorouteInfo,
	autoroutedVC4Paths          SetOfVC4CoreReportAutoroutedPaths,
	vc4PathsRequiringActivation SetOfPathNames,
	vc4PathsWithLessDiversity   SetOfVC4PathsWithLessDiversity,
	autorouteErrors             SetOfVC4CoreReportAutorouteErrors
}

SetOfVC4CoreReportLinkDetails ::= SET OF VC4CoreReportLinkDetails

VC4CoreReportLinkDetails ::= SEQUENCE {
	oldLinkName                  LinkName,
	oldLinksCutomerData          GraphicString OPTIONAL,
	newLinkName                  LinkName,
	newLinkNeedsProtectionAdding BOOLEAN
}

SetOfVC4CoreReportUnmodifyableVC4Paths ::= SET OF VC4CoreReportUnmodifyableVC4Path

VC4CoreReportUnmodifyableVC4Path ::= SEQUENCE {
	reason VC4CoreReportUnmodifyableVC4PathReason,
	path   VC4CoreReportPathDetails
}

VC4CoreReportUnmodifyableVC4PathReason ::= ENUMERATED {
	prematureTermination(1),
	nestedProtection(2),
	protectionSpansOutsideScopeOfEnteredPorts(3),
	connectivityDoesntMatch(4),
	unSupportedPromotion(5),
	unSupportedDemotion(6),
	overlappingFragments(7),
	activationError(8),
	unSupportedXConnType(9)
}

SetOfVC4CoreReportRelocatedVC4Paths ::= SET OF VC4CoreReportRelocatedVC4Path

VC4CoreReportRelocatedVC4Path ::= SEQUENCE {
	characteristic  VC4CoreReportPathCharacteristic,
	obsoletePath    VC4CoreReportPathDetails,
	replacementPath VC4CoreReportPathDetails
}

VC4CoreReportPathCharacteristic ::= ENUMERATED {
	normal(0),
	nowProtectedOriginallyUnprotected(1),
	protectedWithNoDiversity(2)
}

VC4CoreReportPathDetails ::= SEQUENCE {
	pathName     PathName,
	networkType  GraphicString,
	connectivity VC4CoreConnectivity
}

VC4CoreConnectivity ::= SET OF GraphicString

SetOfVC4CoreReportAutorouteInfo ::= SET OF VC4CoreReportAutorouteInfo

VC4CoreReportAutorouteInfo ::= SEQUENCE {
	summaryInfo      VC4CoreReportTracedVC4PathSummary,
	aEndConnectivity VC4CoreConnectivity,	-- this is how far the VC4 tracing algorithm got
	zEndConnectivity VC4CoreConnectivity,	-- this is how far the VC4 tracing algorithm got
	signalType       SignalType,
	circuitType      PathType,
	aEnd             RouteItemInfo,
	zEnd             RouteItemInfo
}

SetOfVC4CoreReportTracedVC4PathSummary ::= SET OF VC4CoreReportTracedVC4PathSummary

VC4CoreReportTracedVC4PathSummary ::= SEQUENCE {
	pathName        PathName OPTIONAL, -- if this is for a replacement fragment,then this may
	protInfo        VC4CoreReportProtInfo,
	needsActivation NULL OPTIONAL,
	aEndTTP         LRTTP,
	aEndTimeslot    CTPRelId,
	zEndTTP         LRTTP,
	zEndTimeslot    CTPRelId
}

SetOfVC4CoreReportAutoroutedPaths ::= SET OF VC4CoreReportAutoroutedPath

VC4CoreReportAutoroutedPath ::= SEQUENCE {
	obsoletePathName   PathName,
	replacementDetails VC4CoreReportTracedVC4PathSummary
}

VC4CoreReportProtInfo ::= ENUMERATED {
	unprotected(1),
	worker(2),
	protection(3),
	workerProtectionTogether(4)
}

SetOfVC4PathsWithLessDiversity ::= SET OF VC4PathsWithLessDiversity

VC4PathsWithLessDiversity ::= SEQUENCE {
	obsoleteDetails      VC4CoreReportTracedVC4PathSummary,
	obsoleteDiversity    VC4CoreReportDiversity,
	replacementDetails   VC4CoreReportTracedVC4PathSummary,
	replacementDiversity VC4CoreReportDiversity
}

VC4CoreReportDiversity ::= ENUMERATED {
	noDiversity(0),
	partialDiversity(1),
	fullDiversity(2)
}

SetOfVC4CoreReportAutorouteErrors ::= SET OF VC4CoreReportAutorouteError

VC4CoreReportAutorouteError ::= SEQUENCE {
	reason           VC4CoreReportAutorouteErrorReason,
	obsoletePathName PathName,
	aEndTTP          LRTTP,
	aEndTimeslot     CTPRelId,
	aEndConnectivity VC4CoreConnectivity,	-- this is how far the VC4 tracing algorithm got
	zEndTTP          LRTTP,
	zEndTimeslot     CTPRelId,
	zEndConnectivity VC4CoreConnectivity	-- this is how far the VC4 tracing algorithm got
}

VC4CoreReportAutorouteErrorReason ::= ENUMERATED {
	prematurelyTerminatedPath(1),
	unableToCreateUnprotectedPath(2),
	unableToCreateWorkerOnlyPath(3),
	unableToCreateWorkerPath(4),
	unableToCreateProtectionOnlyPath(5)
}




Views ::= SEQUENCE {
	viewName AttrName,
	viewId AttrId
}

VirtSNProf ::= SEQUENCE {
	add Flag,
	modify Flag,
	remove Flag
}

VTGroupStructureInfo ::= CHOICE {
	oneVT6 ConnectionInfo,
	twoVT3 TwoVT3,
	threeVT2 ThreeVT2,
	fourVT15 FourVT15
}

VTType ::= ENUMERATED {
	notApplicable(0),
	vt6(1),
	vt3(2),
	vt2(3),
	vt15(4)
}

WaitToRestoreTime ::= INTEGER

WantedTypes ::= BOOLEAN

Wavelength ::= INTEGER

Wavelengths ::= SEQUENCE {
	tx Wavelength,
	rx Wavelength,
	txProt Wavelength OPTIONAL,
	rxProt Wavelength OPTIONAL,
	typecross BOOLEAN OPTIONAL
}

Wdm ::= SEQUENCE {
	wdmName TTPName OPTIONAL,
	channels INTEGER OPTIONAL,
	band Band,
	technology Technology
}

WeekDay ::= INTEGER

WeeklyTimeWindow ::= SEQUENCE {
	sundayStart INTEGER,
	sundayStop INTEGER,
	mondayStart INTEGER,
	mondayStop INTEGER,
	tuesdayStart INTEGER,
	tuesdayStop INTEGER,
	wednesdayStart INTEGER,
	wednesdayStop INTEGER,
	thursdayStart INTEGER,
	thursdayStop INTEGER,
	fridayStart INTEGER,
	fridayStop INTEGER,
	saturdayStart INTEGER,
	saturdayStop INTEGER
}

Weight ::= INTEGER

WeightCoeff ::= INTEGER

WindowType ::= ENUMERATED {
	adminUI(1),
	networkUI(2)
}

WLengthInfo ::= CHOICE {
	wavelengths      Wavelengths,
	numOfWavelengths INTEGER
}

WorkerDirection ::= ENUMERATED {
	worker      (1),
	protection  (2),
	notAvailable(3),
	preplan     (4)
}

Wrapper ::= ENUMERATED {
	proprietaryGIGA(1),
	standardG709(2),
	proprietaryAMCC(3),
	notSupported(4),
	none(5)
}

WrongConn ::= SEQUENCE {
	connName ConnInfo,
	msg Cause
}

WrongLink ::= SEQUENCE {
	linkName LinkName,
	msg Cause
}

WrongSN ::= SEQUENCE {
	snName SNName,
	msg Cause
}

XCProf ::= SEQUENCE {
	addXC AddXCProf OPTIONAL,
	legXC LegXCProf OPTIONAL,
	pathProt PathProtXCProf OPTIONAL,
	remove Flag
}

Year ::= INTEGER

PathCmd ::= ENUMERATED {
	cmdCommission(1),
	cmdDecommission(2),
	cmdAllNotCommissioned(3),
	cmdAllCommissioned(4)
}

IdAttrObjPath ::= SEQUENCE {
	pathName IdAttrName OPTIONAL,
	pathId IdAttrId OPTIONAL,
	pathType IdAttrType OPTIONAL
}

ObjPath ::= SEQUENCE {
	pathName PathName OPTIONAL,
	pathId PathOrLinkId OPTIONAL,
	pathType SgLnType OPTIONAL,
	setOfSNId SetOfSNId OPTIONAL,
	cmd PathCmd OPTIONAL
}

ObjPathList ::= SET OF ObjPath

GetObjPath ::= SEQUENCE {
	reqId SmartReqIdtype,
	userId AttrId,
	attrList IdAttrObjPath OPTIONAL,
	objFilter ObjPath OPTIONAL
}

SetObjPath ::= SEQUENCE {
	reqId     SmartReqIdtype,
	userId    AttrId,
	object    ObjPath,
	attrValue ObjPath,
	dummy     NULL OPTIONAL
}

TPRole ::= ENUMERATED {
	ctp         (0),
        ttp         (1),
        lineSide    (2),
        clientSide  (3)
}

SetOfClientMappingMode ::= SET OF ClientMappingMode

ChannelCoord ::= SEQUENCE {
	portCoord PortCoord,
	timeslot  Timeslot,
	tpName	  TPName			OPTIONAL,
        tpRole    TPRole			OPTIONAL,
	clientMappingMode SetOfClientMappingMode OPTIONAL,
	notConnected NULL 			OPTIONAL
}

SetOfChannelCoord ::= SET OF ChannelCoord

ClientMappingMode ::= INTEGER

-- Client Mapping Modes
-- 0 = undef
-- 1 = OPU1
-- 2 = OPU1-2v
-- 3 = OPTM-STM1
-- 4 = OPTM-STM4
-- 5 = OPTM-STM4-2c
-- 6 = OPTM-STM4-3c
-- 7 = GFP
-- 8 = OPU2
-- 9 = 2x1G

ChannelType ::= ENUMERATED {
      otm       (0),
      sdh       (1)
}

ChannelInfo ::= SEQUENCE {
	tpName        TPName,
	timeslot      Timeslot,
	-- new fields for Add Circuit Wizard
	freq          Wavelengths   OPTIONAL,
	aEndVCG       VCG           OPTIONAL,
	zEndVCG       VCG           OPTIONAL,
	pathGroupInfo PathGroupInfo OPTIONAL,
	tpRole        TPRole        OPTIONAL,
	channelType   ChannelType   OPTIONAL,
	operState     OperState	    OPTIONAL,
        associatedLinkConnection    LinkConnection   OPTIONAL
}

ChannelsInfo ::= SET OF ChannelInfo


ChannelFilter ::= SEQUENCE {
	signalType     SignalType     OPTIONAL,
	managementType ManagementType OPTIONAL
}

SNIdName ::= SEQUENCE {
       usnId         SNId,
       snName        SNName
}

LinkConnection ::= SEQUENCE {
	link Link,
	linkConnId     LinkConnRelId,
	linkConnName   LinkConnName      OPTIONAL,
	aEndTP         AccessPoint       OPTIONAL,
	zEndTP         AccessPoint       OPTIONAL,
	otherSN        SNIdName          OPTIONAL
}

GetChannelList ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	snId         SNId,
	portCoord    PortCoord,
	filter       ChannelFilter,
	assignInfo   TPAssignInfo       OPTIONAL,
	interval     SchedulingInterval OPTIONAL,
	clientTrType ClientTrType       OPTIONAL,
	cmdType      CmdType            OPTIONAL,
	pathId       PathId             OPTIONAL,
	side         WorkerDirection    OPTIONAL,
        associatedLinkConnection        LinkConnection   OPTIONAL,
        otherSN      SNIdName           OPTIONAL
}

ReportGetChannelList ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	channelsInfo ChannelsInfo,
	dummy        NULL   OPTIONAL
}

MsgGetChannelList MESSAGE GetChannelList ::= 5022
	FROM	UI
	TO	RCH

md_MsgGetChannelList MessageDescriptor ::= { mdKind 2,mdReport 5023 }

MsgReportGetChannelList MESSAGE ReportGetChannelList ::= 5023
	FROM	RCH
	TO	UI

md_MsgReportGetChannelList MessageDescriptor ::= { mdKind 3 }

AddressType ::= ENUMERATED {
	ipV4       (0),
	ipV6       (1),
	nsap       (2),
	unnumbered (3)
}

GenericAddress ::= SEQUENCE {
	addressType AddressType,
	address     GraphicString
}


SnCoord ::= CHOICE {
	neAddress GenericAddress,
	emNeId    NEId,
	snId      SNId
}

AccessPoint ::= SEQUENCE {
	snId SnCoord,
	tpId ChannelCoord
}

ProtectionDiversity ::= ENUMERATED {
	none (0),
	link (1),
	node (2),
	srlg (3),
        srg  (4)
}

RouteOptCriteria ::= ENUMERATED {
	undefined   (0),
	trafficEng  (1),
	adminWeight (2),
	minHops     (3)
}

PayLoad ::= ENUMERATED {
	-- unknown(0),
	asynchE4              (5),
	asynchDS3T3           (6),
	asynchE3              (7),
	bitsynchE3            (8),
	bytesynchE3           (9),
	asynchDS2T2           (10),
	bitsynchDS2T2         (11),
	asynchE1              (13),
	bytesynchE1           (14),
	bytesynch31ByDS0      (15),
	asynchDS1T1           (16),
	bitsynchDS1T1         (17),
	bytesynchDS1T1        (18),
	vc11vc12              (19),
	ds1SFAsynch           (22),
	ds1ESFAsynch          (23),
	ds3M23Asynch          (24),
	ds3CBitParityAsynch   (25),
	vtLovc                (26),
	stsSpeHovc            (27),
	posNoScramble16BitCrc (28),
	posNoScramble32BitCrc (29),
	posScramble16BitCrc   (30),
	posScramble32BitCrc   (31),
	atm                   (32),
	ethernet              (33),
	sdhSonet              (34),
	digitalwrapper        (36),
	lambda                (37),
	ansiEtsiPdh           (38),
	lapsSdh               (40),
	fddi                  (41),
	dqdb                  (42),
	fiberChannel3         (43),
	hdlc                  (44),
	ethernetV2DixOnly     (45),
	ethernet802dot3Only   (46)
}

ProtOperMode ::= ENUMERATED {
        undefined     (0),
        singleEnded   (1),
        dualEnded     (2)
}

LSPathProt ::= SEQUENCE {
	protType            ProtType,
	diversity           ProtectionDiversity,
	revertive           NULL            OPTIONAL,
	colour              Colour          OPTIONAL,
	restorationType     RestorationType OPTIONAL,
	priority            Priority        OPTIONAL,
	protectionLsp       LSPId           OPTIONAL,
	waitToRestoreTime   INTEGER         OPTIONAL,
        protOperationalMode ProtOperMode    OPTIONAL
}

AstnCircuitId ::= SEQUENCE {
	ingress SnCoord,
	tcId    PathId
}

ASTNDD_SdhProtection ::= SEQUENCE {
	tMSSPRing       BOOLEAN,
	tMSP_1_to_1     BOOLEAN,
	tMSP_1_Plus_1   BOOLEAN,
	tUnprotect_link BOOLEAN,
	tShared_1_to_N  BOOLEAN,
	tExtra_traffic  BOOLEAN
}

Action ::= ENUMERATED {
	include(0),
	exclude(1)
}

BoundTo ::= ENUMERATED {
	worker    (0),
	protection(1),
	both      (2)
}

EROHopType ::= ENUMERATED {
	loose (0),
	strict(1)
}

SetOfConstrainedERO ::= SET OF ConstrainedERO

EROObject::=SEQUENCE {
	lkId         LKId,
	lcId         LCId     OPTIONAL,
	labelId      Timeslot OPTIONAL,
	otherLabelId Timeslot OPTIONAL
}

ConstrainedERO::= SEQUENCE {
	action     Action,
	boundTo    BoundTo,
	eroObject  EROObject,
	eroHopType EROHopType OPTIONAL
}

ASTNDD_RoutingCriteria ::= SEQUENCE {
	trafficEng          RouteOptCriteria,
	useSdhProt          ASTNDD_SdhProtection OPTIONAL,
	looseEROConstraints SetOfConstrainedERO
}

CreateLSPath ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userId           AttrId,
	pathName         PathName,
	-- Circuit Properties
	signalType       SignalType,
	directionality   Directionality,
	colour           Colour,
	customerData     CustomerData,
	managementType   ManagementType,
	--trafficEng       RouteOptCriteria,
	payload          PayLoad,
	routing          GenericRouting         OPTIONAL,
	-- Quality (of Protection)
	protection       LSPathProt             OPTIONAL,
	-- Circuit Behaviour
	setInService     NULL                   OPTIONAL,
	crankBackOptions CrankBackOptions       OPTIONAL,
	autoActivate     NULL                   OPTIONAL,
	routingCriteria  ASTNDD_RoutingCriteria OPTIONAL
}

ReportCreateLSPath ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	pathId       PathId,
	signalType   SignalType,
	dummy        NULL   OPTIONAL
}

AstnPath ::= SEQUENCE {
	pathId            PathId,
	signalType        SignalType,
	circuitId         AstnCircuitId OPTIONAL,
	pathCmdType       PathCmdType   OPTIONAL,
	getFullInfo       NULL          OPTIONAL,
	result            Res           OPTIONAL,
	cmdAlreadyInProgr BOOLEAN       OPTIONAL
}

LSPathCmdType ::= ENUMERATED {
	cmdGet        (0),
	cmdReroute    (1),
	cmdEnable     (2),
	cmdDeactivate (3),
	cmdRemove     (4),
	cmdActivate   (5)
}

SetOfAstnPath ::= SET OF AstnPath

LSPathObj ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	setOfAstnPath SetOfAstnPath,
	isDisableASTN NULL OPTIONAL,
	cmdType       LSPathCmdType
}

ReportLSPathObj ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	setOfPathInfo     SetOfPathInfo OPTIONAL,
	cmdAlreadyInProgr BOOLEAN       OPTIONAL
}


MsgCreateLSPath MESSAGE CreateLSPath ::= 5024
	FROM	UI
	TO	CPM

md_MsgCreateLSPath MessageDescriptor ::= { mdKind 1,mdReport 5025 }

MsgReportCreateLSPath MESSAGE ReportCreateLSPath ::= 5025
	FROM	CPM
	TO	UI

md_MsgReportCreateLSPath MessageDescriptor ::= { mdKind 3 }

MsgLSPathObj MESSAGE LSPathObj ::= 5026
	FROM	UI
	TO	CPM

md_MsgLSPathObj MessageDescriptor ::= { mdKind 1,mdReport 5027 }

MsgReportLSPathObj MESSAGE ReportLSPathObj ::= 5027
	FROM	CPM
	TO	UI

md_MsgReportLSPathObj MessageDescriptor ::= { mdKind 3 }

MsgRerouteLSPath MESSAGE RerouteLSPath ::= 5038
	FROM	UI
	TO	CPM

RerouteLSPath ::= SEQUENCE {
	reqId    SmartReqIdtype,
	astnPath AstnPath,
	dummy    NULL   OPTIONAL
}

md_MsgRerouteLSPath MessageDescriptor ::= { mdKind 1, mdReport 5039}

MsgReportRerouteLSPath MESSAGE ReportRerouteLSPath ::= 5039
	FROM	CPM
	TO	UI

ReportRerouteLSPath ::= SEQUENCE {
	reqId         SmartReqIdtype,
	result        Res,
	dummy         NULL   OPTIONAL
}

md_MsgReportRerouteLSPath MessageDescriptor ::= { mdKind 3 }

MsgModifyLSPath MESSAGE ModifyLSPath ::= 5042
	FROM	UI
	TO	CPM

ModifyLSPath ::= SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	astnPath      AstnPath,
	attributes    LSPathAttributes,
	dummy         NULL   OPTIONAL
}

LSPathAttributes ::= SEQUENCE {
	pathName          PathName            OPTIONAL,
	protType          ProtType            OPTIONAL,
	diversity         ProtectionDiversity OPTIONAL,
	customerData      CustomerData        OPTIONAL,
	switchCommand     SwitchType          OPTIONAL,
	serviceState      ServiceState        OPTIONAL,
	priority          Priority            OPTIONAL,
	waitToRestoreTime INTEGER             OPTIONAL,
	trafficEng        RouteOptCriteria    OPTIONAL
}

md_MsgModifyLSPath MessageDescriptor ::= { mdKind 1, mdReport 5043}

MsgReportModifyLSPath MESSAGE ReportModifyLSPath ::= 5043
	FROM	CPM
	TO	UI

ReportModifyLSPath ::= SEQUENCE {
	reqId        SmartReqIdtype,
	result       Res,
	dummy        NULL   OPTIONAL
}

md_MsgReportModifyLSPath MessageDescriptor ::= { mdKind 3 }

MsgGetLSPsAlarmedHops MESSAGE GetLSPsAlarmedHops ::= 5044
	FROM	UI
	TO	CPM

GetLSPsAlarmedHops ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	paths  SetOfAstnPath,
	dummy  NULL   OPTIONAL
}

md_MsgGetLSPsAlarmedHops MessageDescriptor ::= { mdKind 1, mdReport 5045}

MsgReportGetLSPsAlarmedHops MESSAGE ReportGetLSPsAlarmedHops ::= 5045
	FROM	CPM
	TO	UI

ReportGetLSPsAlarmedHops ::= SEQUENCE {
	resourceName       GraphicString,
	pathStructFlag     PathStructFlag OPTIONAL,
	resourceIdentifier ResourceIdentifier,
	resourceState      ResourceState,
	severity           Severity
}

md_MsgReportGetLSPsAlarmedHops MessageDescriptor ::= { mdKind 3 }

CrankBackReroute ::= ENUMERATED {
	none         (0),
	e2e          (1),
	boundary     (2),
	segmentbased (3)
}

MaxCrankBackRetries ::= INTEGER

CrankBackOptions ::= SEQUENCE {
	crankBackReroute       CrankBackReroute,
	ingressMaxRetries      MaxCrankBackRetries,	--(def val 1)
	intermediateMaxRetries MaxCrankBackRetries 	--(def val 1)
}

MsgReRoutePath MESSAGE ReRoutePath ::= 5046
	FROM	UI
	TO	WCH

ReRoutePath ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	pathId     PathId,
	dummy      NULL   OPTIONAL
}

md_MsgReRoutePath MessageDescriptor ::= { mdKind 1, mdReport 5047}

MsgReportReRoutePath MESSAGE ReportReRoutePath ::= 5047
	FROM	WCH
	TO	UI

ReportReRoutePath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportReRoutePath MessageDescriptor ::= { mdKind 3 }


--		     --
-- Query Tool Messages --
--		     --
SetOfDataSegments  ::= SET OF GraphicString

UserRecord ::= SEQUENCE {
	recordLabel GraphicString,
	numberSegments INTEGER,
	dataSegments SetOfDataSegments
}

MsgSetUserRecord MESSAGE SetUserRecord ::= 5012
	FROM UI
	TO CH

md_MsgSetUserRecord MessageDescriptor ::= { mdKind 1,mdReport 5013 }

SetUserRecord ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	dataRecord UserRecord,
	dummy      NULL   OPTIONAL
}

MsgReportSetUserRecord MESSAGE ReportSetUserRecord ::= 5013
	FROM CH
	TO UI

md_MsgReportSetUserRecord MessageDescriptor ::= { mdKind 3 }

ReportSetUserRecord ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgGetUserRecord MESSAGE GetUserRecord ::= 5014
	FROM UI
	TO CH

md_MsgGetUserRecord MessageDescriptor ::= { mdKind 1,mdReport 5015 }

GetUserRecord ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	recordLabel GraphicString,
	dummy       NULL   OPTIONAL
}

MsgReportGetUserRecord MESSAGE ReportGetUserRecord ::= 5015
	FROM CH
	TO UI

md_MsgReportGetUserRecord MessageDescriptor ::= { mdKind 3 }

ReportGetUserRecord ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	dataRecord UserRecord,
	dummy      NULL   OPTIONAL
}

TPRouting ::= SET OF AccessPoint

FormattedRouting ::= CHOICE {
	tpRouting	TPRouting
}

Route ::= SEQUENCE {
	worker     FormattedRouting OPTIONAL, -- points from AEnd to ZEnd
	protection FormattedRouting OPTIONAL  -- points from AEnd to ZEnd
}

GenericRouting ::= SET OF Route

CreateOduPath ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	pathName       PathName,
	-- Circuit Properties
	signalType     SignalType,
	directionality Directionality,
	colour         Colour,
	customerData   CustomerData,
	managementType ManagementType,
	trafficEng     RouteOptCriteria,
	payload        PayLoad,
	routing        GenericRouting OPTIONAL,
	-- Quality (of Protection)
	protection     LSPathProt     OPTIONAL,
	-- Circuit Behaviour
	setInService   NULL           OPTIONAL
}

ReportCreateOduPath ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	pathId    PathId,
	pathState PathState,
	dummy     NULL   OPTIONAL
}

MsgCreateOduPath MESSAGE CreateOduPath ::= 5032
	FROM	UI
	TO	CH

md_MsgCreateOduPath MessageDescriptor ::= { mdKind 1,mdReport 5033 }

MsgReportCreateOduPath MESSAGE ReportCreateOduPath ::= 5033
	FROM	CH
	TO	UI

md_MsgReportCreateOduPath MessageDescriptor ::= { mdKind 3 }


GetAutoChannelInfo::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	usnId          SNId,
	signalType     SignalType     OPTIONAL,
	directionality Directionality OPTIONAL,
	snRole         SNRole         OPTIONAL
}

ReportGetAutoChannelInfo::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	cardPortChannel CardPortChannel,
	dummy           NULL   OPTIONAL
}

MsgGetAutoChannelInfo MESSAGE GetAutoChannelInfo ::= 5034
	FROM	UI
	TO	CH

md_MsgGetAutoChannelInfo MessageDescriptor ::= { mdKind 1,mdReport 5035 }

MsgReportGetAutoChannelInfo MESSAGE ReportGetAutoChannelInfo ::= 5035
	FROM	CH
	TO	UI

md_MsgReportGetAutoChannelInfo MessageDescriptor ::= { mdKind 3 }

-- Start of additions for Extract NE

MsgGetExtractNEList MESSAGE GetExtractNEList ::= 5016
	FROM	UI
	TO	LR

md_MsgGetExtractNEList MessageDescriptor ::= { mdKind 1,mdReport 5017 }

MsgReportGetExtractNEList MESSAGE ReportGetExtractNEList ::= 5017
	FROM	LR
	TO	UI

md_MsgReportGetExtractNEList MessageDescriptor ::= { mdKind 3 }

MsgGetPairOfThroughConnectedTPsList MESSAGE GetPairOfThroughConnectedTPsList ::= 5018
	FROM	UI
	TO	LR

md_MsgGetPairOfThroughConnectedTPsList MessageDescriptor ::= { mdKind 1,mdReport 5019 }

MsgReportGetPairOfThroughConnectedTPsList MESSAGE ReportGetPairOfThroughConnectedTPsList ::= 5019
	FROM	LR
	TO	UI

md_MsgReportGetPairOfThroughConnectedTPsList MessageDescriptor ::= { mdKind 3 }

MsgExtractNE MESSAGE ExtractNE ::= 5020
	FROM	UI
	TO	LR

md_MsgExtractNE MessageDescriptor ::= { mdKind 1,mdReport 5021 }

MsgReportExtractNE MESSAGE ReportExtractNE ::= 5021
	FROM	LR
	TO	UI

md_MsgReportExtractNE MessageDescriptor ::= { mdKind 3 }

GetExtractNEList ::= SEQUENCE {
	reqId     ReqId,
	nePattern NEName,
	dummy     NULL   OPTIONAL
}

ReportGetExtractNEList ::= SEQUENCE {
	reqId    ReqId,
	result   Res,
	setOfNEs SetOfNEs,
	dummy    NULL   OPTIONAL
}

GetPairOfThroughConnectedTPsList ::= SEQUENCE {
	reqId ReqId,
	neId  NEId,
	dummy NULL   OPTIONAL
}

ReportGetPairOfThroughConnectedTPsList ::= SEQUENCE {
	reqId                          ReqId,
	result                         Res,
	setOfPairedThroughConnectedTPs SetOfPairedTTPs,
	dummy                          NULL   OPTIONAL
}

ExtractNE ::= SEQUENCE {
	reqId                      ReqId,
	commit                     BOOLEAN,
	pairsOfThroughConnectedTPs SetOfPairedTTPIds,
	dummy                      NULL   OPTIONAL
}

ReportExtractNE ::= SEQUENCE {
	reqId                ReqId,
	result               Res,
	extractReportDetails SetOfPairedTTPIds,
	dummy                NULL   OPTIONAL
}


PairedTTPs ::= SEQUENCE {
	firstTTP LRTTP,
	secondTTP LRTTP
}

SetOfPairedTTPs ::= SET OF PairedTTPs

PairedTTPIds ::= SEQUENCE {
	firstTTPId LRTTPId,
	secondTTPId LRTTPId,
	extracted BOOLEAN OPTIONAL,	-- only employed in the response MsgReportExtractNE
	text GraphicString OPTIONAL	-- only employed in the response MsgReportExtractNE
}

SetOfPairedTTPIds ::= SET OF PairedTTPIds

-- End of additions for Extract NE


-- ******************  Begin Circuit Test Interface (RM)  ******************

-- *************************************************************************
--                    MsgPrepareNodeForCircuitTest
-- *************************************************************************

TestType ::= ENUMERATED {
	uneqGenerator(0),
	pom(1),
	uneqGeneratorAndPom(2),
	pathTrace(3),
	portLoopback(4),
	channelLoopback(5)
}

MsgPrepareNodeForCircuitTest MESSAGE PrepareNodeForCircuitTest ::= 6001
        FROM PSB
        TO TM

PrepareNodeForCircuitTest ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	pathId     PathId,
	signalType SignalType,
	tpInvolved TPInfo,
	testInfo   TestType,
	dummy      NULL   OPTIONAL
}

md_MsgPrepareNodeForCircuitTest MessageDescriptor ::= { mdKind 1,mdReport 6501 }

MsgReportPrepareNodeForCircuitTest MESSAGE ReportPrepareNodeForCircuitTest ::= 6501
        FROM    TM
        TO      PSB

ReportPrepareNodeForCircuitTest ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportPrepareNodeForCircuitTest MessageDescriptor ::= { mdKind 3 }

-- *************************************************************************
--                      MsgCreateLoopback
-- *************************************************************************

PortLoopback ::= ENUMERATED {
	disabled(0),
	front_end_transparent(1),
	back_end_transparent(2),
	front_end_non_transparent(3),
	back_end_non_transparent(4)
}

ChannelLoopback ::= NULL

LoopbackType ::= CHOICE {
	portLoopback    PortLoopback,
	channelLoopback ChannelLoopback
}

MsgCreateLoopback MESSAGE CreateLoopback ::= 6002
	FROM PSB
	TO TM

CreateLoopback ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	pathId       PathId,
	signalType   SignalType,
	tpInvolved   TPInfo,
	loopbackType LoopbackType,
	dummy        NULL   OPTIONAL
}

md_MsgCreateLoopback MessageDescriptor ::= { mdKind 1,mdReport 6502 }

MsgReportCreateLoopback MESSAGE ReportCreateLoopback ::= 6502
	FROM TM
	TO PSB

ReportCreateLoopback ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportCreateLoopback MessageDescriptor ::= { mdKind 3 }

-- *************************************************************************
--                      MsgSetLabelForCircuitTest
-- *************************************************************************

LabelType ::= SEQUENCE {
	sendPathTrace     TrailTrace OPTIONAL,
	sendUneqGenerator TrailTrace OPTIONAL,
	expectedPathTrace TrailTrace OPTIONAL,
	expectedPOM       TrailTrace OPTIONAL
}

MsgSetLabelForCircuitTest MESSAGE SetLabelForCircuitTest ::= 6003
	FROM PSB
	TO TM

SetLabelForCircuitTest ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	pathId     PathId,
	signalType SignalType,
	tpInvolved TPInfo,
	labelInfo  LabelType,
	dummy      NULL   OPTIONAL
}

md_MsgSetLabelForCircuitTest MessageDescriptor ::= { mdKind 1,mdReport 6503 }

MsgReportSetLabelForCircuitTest MESSAGE ReportSetLabelForCircuitTest ::= 6503
	FROM TM
	TO PSB

ReportSetLabelForCircuitTest ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportSetLabelForCircuitTest MessageDescriptor ::= { mdKind 3 }

-- *************************************************************************
--                      MsgDetailTestResult
-- *************************************************************************

MsgDetailTestResult MESSAGE DetailTestResult ::= 6004
	FROM PSB
	TO TM

DetailTestResult ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	pathId     PathId,
	signalType SignalType,
	tpInvolved TPInfo,
	dummy      NULL   OPTIONAL
}

md_MsgDetailTestResult MessageDescriptor ::= { mdKind 2,mdReport 6504 }

MsgReportDetailTestResult MESSAGE ReportDetailTestResult ::= 6504
	FROM TM
	TO PSB

ReportDetailTestResult ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	sendValue        TrailTrace,
	generatorEnabled BOOLEAN OPTIONAL, -- in case of CTP
	expectedValue    TrailTrace,
	monitorActive    BOOLEAN OPTIONAL, -- in case of CTP
	receivedValue    TrailTrace
}

md_MsgReportDetailTestResult MessageDescriptor ::= { mdKind 3 }

-- *************************************************************************
--                      MsgRemoveLoopback
-- *************************************************************************

MsgRemoveLoopback MESSAGE RemoveLoopback ::= 6005
	FROM PSB
	TO TM

RemoveLoopback ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	pathId       PathId,
	signalType   SignalType,
	tpInvolved   TPInfo,
	loopbackType LoopbackType,
	dummy        NULL   OPTIONAL
}

md_MsgRemoveLoopback MessageDescriptor ::= { mdKind 1,mdReport 6505 }

MsgReportRemoveLoopback MESSAGE ReportRemoveLoopback ::= 6505
	FROM TM
	TO PSB

ReportRemoveLoopback ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportRemoveLoopback MessageDescriptor ::= { mdKind 3 }

-- *************************************************************************
--                      MsgRestoreNodeAfterCircuitTest
-- *************************************************************************

MsgRestoreNodeAfterCircuitTest MESSAGE RestoreNodeAfterCircuitTest ::= 6006
	FROM TM
	TO PSB

RestoreNodeAfterCircuitTest ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	pathId     PathId,
	signalType SignalType,
	tpInvolved TPInfo,
	testInfo   TestType,
	dummy      NULL   OPTIONAL
}

md_MsgRestoreNodeAfterCircuitTest MessageDescriptor ::= { mdKind 1,mdReport 6506 }

MsgReportRestoreNodeAfterCircuitTest MESSAGE ReportRestoreNodeAfterCircuitTest ::= 6506
	FROM TM
	TO PSB

ReportRestoreNodeAfterCircuitTest ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportRestoreNodeAfterCircuitTest MessageDescriptor ::= { mdKind 3 }

-- ******************  End Circuit Test Interface (RM)  ********************

-- ******************  Init User Records ***********************************

MsgGetUserRecordList MESSAGE GetUserRecordList ::= 6007
	FROM UI
	TO CH

md_MsgGetUserRecordList MessageDescriptor ::= { mdKind 2,mdReport 6507 }

GetUserRecordList ::= SEQUENCE {
	reqId             SmartReqIdtype,
	userId            AttrId,
	recordLabelFilter GraphicString,
	dummy             NULL   OPTIONAL
}

SetOfUserRecord ::= SET OF UserRecord

MsgReportGetUserRecordList MESSAGE ReportGetUserRecordList ::= 6507
	FROM CH
	TO UI

ReportGetUserRecordList ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	setOfDataRecord SetOfUserRecord,
	dummy           NULL   OPTIONAL
}

md_MsgReportGetUserRecordList MessageDescriptor ::= { mdKind 3 }

MsgGetUserRecordLabelList MESSAGE GetUserRecordLabelList ::= 6008
	FROM UI
	TO CH

md_MsgGetUserRecordLabelList MessageDescriptor ::= { mdKind 2,mdReport 6508 }

GetUserRecordLabelList ::= SEQUENCE {
	reqId             SmartReqIdtype,
	userId            AttrId,
	recordLabelFilter GraphicString,
	dummy             NULL   OPTIONAL
}

SetOfRecordLabel ::= SET OF GraphicString

MsgReportGetUserRecordLabelList MESSAGE ReportGetUserRecordLabelList ::= 6508
	FROM CH
	TO UI

ReportGetUserRecordLabelList ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	setOfDataRecord SetOfRecordLabel,
	dummy           NULL   OPTIONAL
}

md_MsgReportGetUserRecordLabelList MessageDescriptor ::= { mdKind 3 }

MsgRemoveUserRecord MESSAGE RemoveUserRecord ::= 6009
	FROM UI
	TO CH

md_MsgRemoveUserRecord MessageDescriptor ::= { mdKind 1,mdReport 6509 }

RemoveUserRecord ::= SEQUENCE {
	reqId       SmartReqIdtype,
	userId      AttrId,
	recordLabel GraphicString,
	dummy       NULL   OPTIONAL
}

MsgReportRemoveUserRecord MESSAGE ReportRemoveUserRecord ::= 6509
	FROM CH
	TO UI

ReportRemoveUserRecord ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

md_MsgReportRemoveUserRecord MessageDescriptor ::= { mdKind 3 }



-- ******************  End User Records ***********************************

-- *****************  Init Create Trail ***********************************

Routeing ::= SEQUENCE {
	trailName  TrailName,
	pathGroup  PathGroup           OPTIONAL,
	trafficEng RouteOptCriteria    OPTIONAL,
	routing    GenericRouting,
	pathId     PathId              OPTIONAL
}

CreateActions ::= SEQUENCE {
	payload           PayLoad             OPTIONAL,
	setInService      NULL                OPTIONAL,
	autoActivate      NULL                OPTIONAL,
	firstXcIsUnidir   NULL                OPTIONAL,
	sdhStructure      AU4Info             OPTIONAL,
	customerData      CustomerData        OPTIONAL,
	crankBackOptions  CrankBackOptions    OPTIONAL,
	preemptFlag       PreemptFlag         OPTIONAL,
    numOfCircuitToCreate    INTEGER       OPTIONAL, -- LS Provisioning Enhancement
	autoNaming        NULL                OPTIONAL  -- LS Provisioning Enhancement

}

RouteConstraintsInfo ::= SEQUENCE {
	serverSDHProt     NULL                OPTIONAL,
	colour            Colour              OPTIONAL,
	extraTrfSupport   NULL                OPTIONAL,
	diversity         ProtectionDiversity OPTIONAL,
	protectionLsp     LSPId               OPTIONAL
}

RouteConstraints ::= SEQUENCE {
	worker            RouteConstraintsInfo OPTIONAL,
	protection        RouteConstraintsInfo OPTIONAL,
	pathProtDiversity PathProtDiversity    OPTIONAL
}

ASTNPath ::= SEQUENCE {
	astnCircuitInfo   ASTNCircuitInfo     OPTIONAL,
	encapsulationMode EncapsulationMode   OPTIONAL
}

TrailDetails ::= SEQUENCE {
	revertive           NULL                OPTIONAL,
	astnPath            ASTNPath            OPTIONAL,
	priority            Priority            OPTIONAL,
        protOperationMode   ProtOperMode	OPTIONAL
}

TrailDefault ::= SEQUENCE {
	signalType        SignalType,
	pathStructFlag    PathStructFlag      OPTIONAL,
	managementType    ManagementType,
	directionality    Directionality,
	clientTrType      ClientTrType        OPTIONAL,
	hopLinkName       GraphicString       OPTIONAL,
	schedTrail        SchedulingInterval  OPTIONAL,
	protType          ProtType
}

CreateTrail ::= SEQUENCE {
	reqId             SmartReqIdtype,
	userId            AttrId,
	trailDefault      TrailDefault,
	trailDetails      TrailDetails      OPTIONAL,
	routeConstraints  RouteConstraints,
	createActions     CreateActions,
	routeing          Routeing,
	pathGroup         PathGroup         OPTIONAL
}

ReportCreateTrail ::= SEQUENCE {
	reqId     SmartReqIdtype,
	result    Res,
	pathId    PathId,
	pathState PathState,
	dummy     NULL   OPTIONAL
}

MsgCreateTrail MESSAGE CreateTrail ::= 5048
	FROM	UI
	TO	CH

md_MsgCreateTrail MessageDescriptor ::= { mdKind 1,mdReport 5049 }

MsgReportCreateTrail MESSAGE ReportCreateTrail ::= 5049
	FROM	CH
	TO	UI

md_MsgReportCreateTrail MessageDescriptor ::= { mdKind 3 }

-- *****************  End Create Trail ***********************************

-- *****************  Init Topology Discovery ****************************


DiscoveryTaskType	::= ENUMERATED {
	noDiscrepancies        (0),
	creation               (1),
	deletion               (2),
	resolvedDiscrepancies  (3),
	unresolvedDiscrepancies(4)
}

DiscoveredResource	::= SEQUENCE {
	resourceName      GraphicString,
	result            Res,
	discoveryTaskType DiscoveryTaskType
}

SetOfDiscoveredResource ::= SET OF DiscoveredResource

DiscoverTopology ::= SEQUENCE {
	reqId                SmartReqIdtype,
	userId               AttrId,
	routingArea          GenericAddress,
	neAddress            GenericAddress,
	localDiscovery       NULL           OPTIONAL,
	discoverCircuitsOnly NULL           OPTIONAL,
        discoverStatusOnly   NULL           OPTIONAL
}

MsgDiscoverTopology MESSAGE DiscoverTopology ::= 5036
	FROM	UI
	TO	CPM

md_MsgDiscoverTopology MessageDescriptor ::= { mdKind 1, mdReport 5037}

ReportDiscoverTopology ::= SEQUENCE {
	reqId                     SmartReqIdtype,
	globalResult              Res,
	discoveredPaths           SetOfDiscoveredResource	OPTIONAL,
	discoveredDataLinks       SetOfDiscoveredResource	OPTIONAL,
	discoveredTELinks         SetOfDiscoveredResource	OPTIONAL,
	discoveredControlChannels SetOfDiscoveredResource	OPTIONAL,
	discoveredLSR             SetOfDiscoveredResource	OPTIONAL,
        discoveredADJ             SetOfDiscoveredResource       OPTIONAL
}

MsgReportDiscoverTopology MESSAGE ReportDiscoverTopology ::= 5037
	FROM	CPM
	TO	UI

md_MsgReportDiscoverTopology MessageDescriptor ::= { mdKind 3 }


-- Metodi di appoggio al messaggio DiscoverTopology
RoutingArea ::= SEQUENCE {
        routingAreaAddress GenericAddress,
	managedSignalTypes SetOfSignalType,
	dummy              NULL OPTIONAL
}

SetOfRoutingArea ::= SET OF RoutingArea

GetRoutingAreaList ::=SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL  OPTIONAL
}

MsgGetRoutingAreaList MESSAGE GetRoutingAreaList ::= 5050
	FROM	UI
	TO	CPM

md_MsgGetRoutingAreaList MessageDescriptor ::= { mdKind 1, mdReport 5051}

ReportGetRoutingAreaList ::= SEQUENCE {
	reqId            SmartReqIdtype,
	userId           AttrId,
	setOfRoutingArea SetOfRoutingArea,
	dummy            NULL             OPTIONAL
}

MsgReportGetRoutingAreaList MESSAGE ReportGetRoutingAreaList ::= 5051
	FROM	CPM
	TO	UI

md_MsgReportGetRoutingAreaList MessageDescriptor ::= { mdKind 3 }

Lsr ::=SEQUENCE {
	ipAddress GenericAddress
	--TBD
}

SetOfLsr ::= SET OF Lsr

GetLsrList ::=SEQUENCE {
	reqId         SmartReqIdtype,
	userId        AttrId,
	routingAreaId GenericAddress,
	dummy         NULL           OPTIONAL
}

MsgGetLsrList MESSAGE GetLsrList ::= 5052
	FROM	UI
	TO	CPM

md_MsgGetLsrList MessageDescriptor ::= { mdKind 1, mdReport 5053}

ReportGetLsrList ::=SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	setOfLsr SetOfLsr,
	dummy    NULL          OPTIONAL
}

MsgReportGetLsrList MESSAGE ReportGetLsrList ::= 5053
	FROM	CPM
	TO	UI

md_MsgReportGetLsrList MessageDescriptor ::= { mdKind 3 }


-- *****************  End Topology Discovery ****************************

LSRElement ::= SEQUENCE {
	name      NEName,
	ipAddress GenericAddress OPTIONAL
}

--Dettagli del LSR a partire da LSRQT

LSRId ::= SEQUENCE {
	routingArea GenericAddress,
	routerId    GenericAddress
}

LSRKey ::= CHOICE {
	lsrId   LSRId,
	lsrName NEName
}

GetLSRInfo ::= SEQUENCE {
	reqId                 SmartReqIdtype,
	userId                AttrId,
	lsrKey                LSRKey,
	dummy                 NULL   OPTIONAL
}

MsgGetLSRInfo MESSAGE GetLSRInfo ::= 5054
	FROM	UI
	TO	CPM

md_MsgGetLSRInfo MessageDescriptor ::= { mdKind 1, mdReport 5055}

LabelSwitchedRouterInfo ::= SEQUENCE {
	labelSwitchedRouterName NEName           OPTIONAL,
	routerId                GenericAddress   OPTIONAL,
	routingAreaId           GenericAddress   OPTIONAL,
	neNameAssociated        NEName           OPTIONAL,
	creationDate            UnixTime         OPTIONAL,
	restorePhase            RestorePhase     OPTIONAL,
        configured              ConfiguredOnCP   OPTIONAL,
	configurable            ConfigurableOnCP OPTIONAL,
        lsrInfo                 LSRInfo          OPTIONAL,
        trapInfo                SetOfTrapInfo    OPTIONAL,
        managedSignalTypes      SetOfSignalType  OPTIONAL,
        canBeDeconfigured       BOOLEAN          OPTIONAL,
        isTrib                  BOOLEAN          OPTIONAL
}

ReportGetLSRInfo ::= SEQUENCE {
	reqId                   SmartReqIdtype,
	result                  Res,
	labelSwitchedRouterInfo LabelSwitchedRouterInfo,
	dummy                   NULL   OPTIONAL
}

MsgReportGetLSRInfo MESSAGE ReportGetLSRInfo ::= 5055
	FROM	CPM
	TO	UI

md_MsgReportGetLSRInfo MessageDescriptor ::= { mdKind 3 }

--Protocols State del LSR a partire da LSRQT

GetProtocolsLSRInfo ::= SEQUENCE {
	reqId   SmartReqIdtype,
	userId  AttrId,
	lsrKey  LSRKey,
	dummy   NULL   OPTIONAL
}

MsgGetProtocolsLSRInfo MESSAGE GetProtocolsLSRInfo ::= 5056
	FROM	UI
	TO	CPM

md_MsgGetProtocolsLSRInfo MessageDescriptor ::= { mdKind 1, mdReport 5057}

LSRStateInfo ::= SEQUENCE {
	adminState AdminState     OPTIONAL,
	operState  OperState      OPTIONAL
}

LSRProtocolsInfo ::= SEQUENCE {
	labelSwitchedRouterName LSRElement     OPTIONAL,
	gospf_teState           LSRStateInfo   OPTIONAL,
	ospfRoutingAreaId       GenericAddress OPTIONAL,
	lmpState                LSRStateInfo   OPTIONAL,
	grsvp_teState           LSRStateInfo   OPTIONAL,
	uniState                LSRStateInfo   OPTIONAL,
	enniState               LSRStateInfo   OPTIONAL,
	enniRouterControllerId  GenericAddress OPTIONAL,
	e2_enniState            LSRStateInfo   OPTIONAL
}

ReportGetProtocolsLSRInfo ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	lsrProtocolsInfo LSRProtocolsInfo,
	dummy            NULL   OPTIONAL
}

MsgReportGetProtocolsLSRInfo MESSAGE ReportGetProtocolsLSRInfo ::= 5057
	FROM	CPM
	TO	UI

md_MsgReportGetProtocolsLSRInfo MessageDescriptor ::= { mdKind 3 }

---WSON
PrioInterval ::= SEQUENCE {
  interval     INTEGER,
  value        INTEGER
}

SetOfPrioInterval ::= SET OF PrioInterval

RSVP ::= SEQUENCE {
  refreshInt	INTEGER OPTIONAL,
  retransmitInt	INTEGER OPTIONAL,
  expBackUp	INTEGER OPTIONAL,
  purge		INTEGER OPTIONAL,
  adminStatus	LkAdminState OPTIONAL,
  reOptInterval	INTEGER OPTIONAL,
  operState     OperState    OPTIONAL,
  retryLimit	INTEGER     OPTIONAL
}

LMP ::= SEQUENCE {
  keepAlive		BOOLEAN OPTIONAL,
  keepAliveTimeOut	INTEGER OPTIONAL,
  dcnMtu		INTEGER OPTIONAL,
  adminStatus		LkAdminState OPTIONAL,
  operState             OperState    OPTIONAL
}

OSPF ::= SEQUENCE {
  adminStatus		LkAdminState OPTIONAL,
  forceZero		BOOLEAN OPTIONAL,
  priorities		SetOfPrioInterval OPTIONAL,
  operState             OperState    OPTIONAL
}

LSRInfo ::= SEQUENCE {
  rsvp		RSVP OPTIONAL,
  lmp		LMP OPTIONAL,
  ospf		OSPF OPTIONAL
}

TrapFamily ::= ENUMERATED {
  rsvp  (0),
  lmp   (1),
  ospf  (2),
  tcMgr (3)
}

TrapType ::= ENUMERATED {
      tcOperstateEnabled                   (0),
      tcSignalupEnabled                    (1),
      tcTeardownEnabled                    (2),
      tcPathcompEnabled                    (3),
      tcRecparamchangeEnabled              (4),
      rsvpLspOperStateChangeTrapEnabled    (5),
      rsvpLspSignalUpTrapEnabled           (6),
      rsvpLspTearDownTrapEnabled           (7),
      rsvpLspPathComputationTrapEnabled    (8),
      rsvpRestartInfoTrapEnabled           (9),
      lmpLinkPropertyMismatchNotifEnabled (10),
      lmpUnprotectedNotifEnabled          (11),
      lmpCcUpDownNotifEnabled             (12),
      lmpTeLinkNotifEnabled               (13),
      lmpDataLinkNotifEnabled             (14),
      ospfVirtIfStateChange               (15),
      ospfNbrStateChange                  (16),
      ospfVirtNbrStateChange              (17),
      ospfIfConfigError                   (18),
      ospfVirtIfConfigError               (19),
      ospfIfAuthFailure                   (20),
      ospfVirtIfAuthFailure               (21),
      ospfIfRxBadPacket                   (22),
      ospfVirtIfRxBadPacket               (23),
      ospfTxRetransmit                    (24),
      ospfVirtIfTxRetransmit              (25),
      ospfOriginateLsa                    (26),
      ospfMaxAgeLsa                       (27),
      ospfLsdbOverflow                    (28),
      ospfLsdbApproachingOverflow         (29),
      ospfIfStateChange                   (30)
}

TrapInfo ::= SEQUENCE {
  trapType      TrapType,
  trapFamily    TrapFamily,
  enable	BOOLEAN
}

SetOfTrapInfo ::= SET OF TrapInfo
---END WSON

ModifyLSR ::= SEQUENCE {
	reqId    SmartReqIdtype,
	userId   AttrId,
	lsrKey   LSRKey,
	lsrName  NEName,
        lsrInfo  LSRInfo  OPTIONAL,
	dummy    NULL   OPTIONAL
}

MsgModifyLSR MESSAGE ModifyLSR ::= 5058
	FROM	UI
	TO	CPM

md_MsgModifyLSR MessageDescriptor ::= { mdKind 1, mdReport 5059}

ReportModifyLSR ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgReportModifyLSR MESSAGE ReportModifyLSR ::= 5059
	FROM	CPM
	TO	UI

md_MsgReportModifyLSR MessageDescriptor ::= { mdKind 3 }

LCState ::= ENUMERATED {
	yes (0),
	no  (1)
}

Allocated ::= LCState

ForcedUp ::= LCState

SetOfAllocated ::= SET OF Allocated

SetOfForcedUp ::= SET OF ForcedUp

LCKey ::= CHOICE {
	lcName GraphicString,
	lcId   LCId
}

GetLinkComponentInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	lcKey  LCKey,
	dummy  NULL   OPTIONAL
}

MsgGetLinkComponentInfo MESSAGE GetLinkComponentInfo ::= 5060
	FROM	UI
	TO	CPM

md_MsgGetRoutingAreaList MessageDescriptor ::= { mdKind 1, mdReport 5061}

LCLmpParameters ::= SEQUENCE {
        lmpAdminStatus	LkAdminState	OPTIONAL,
	focedUp         ForcedUp        OPTIONAL
}

LSRPoint ::= SEQUENCE {
	lsrPointName LSRElement,
	lsrPortCoord PortCoord,
	lsrPointId   INTEGER,
	lcLmpParameters	LCLmpParameters	OPTIONAL
}

SetOfInBandCCNames ::= SET OF GraphicString

-- ULTIMA Aggiunto enum

LCOperState ::= ENUMERATED {
	upAllocOperStatus (0),
	upFreeOperStatus  (1),
	downOperStatus    (2),
	psvTstOperStatus  (3),
	testOperStatus    (4),
	undefined         (5)
}

SetOfLCOperState ::= SET OF LCOperState

SetOfLinkId ::= SET OF SmartResIdtype

Canale ::= SEQUENCE {
        channelId         INTEGER,
        timeslot          Timeslot,
        dummy             NULL OPTIONAL
}

SetOfCanale ::= SET OF Canale

LinkComponentInfo ::= SEQUENCE {
	linkComponentName         GraphicString        OPTIONAL,
	hoLinkName                GraphicString        OPTIONAL,
	lsrAPoint                 LSRPoint             OPTIONAL,
	lsrZPoint                 LSRPoint             OPTIONAL,
	creationDate              UnixTime             OPTIONAL,
	linkClusterName           GraphicString        OPTIONAL,
	setOfInBandCCName         SetOfInBandCCNames   OPTIONAL,
	lcOperationalState        LCOperState          OPTIONAL,
	-- used for Link Verification Report
	testResult                TestResult           OPTIONAL,
	correlated                LCState              OPTIONAL,
	allocatedToLk             Allocated            OPTIONAL,
	managedSignalTypes	  SetOfSignalType,
	linkList                  SetOfLinkId,
	channels               	  SetOfCanale,
        isMisaligned              BOOLEAN 	       OPTIONAL,
        canBeDeconfigured         BOOLEAN 	       OPTIONAL,
        restorePhase              RestorePhase           OPTIONAL,
        isTrib                    BOOLEAN 	       OPTIONAL
}

ReportGetLinkComponentInfo ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	linkComponentInfo LinkComponentInfo,
	dummy             NULL   OPTIONAL
}

MsgReportGetLinkComponentInfo MESSAGE ReportGetLinkComponentInfo ::= 5061
	FROM	CPM
	TO	UI

md_MsgReportGetLinkComponentInfo MessageDescriptor ::= { mdKind 3 }

MsgGetLinkVerificationInfo MESSAGE GetLinkVerificationInfo ::= 5062
	FROM	U
	TO	CPM

md_MsgGetLinkVerificationInfo MessageDescriptor ::= { mdKind 1, mdReport 5063}

GetLinkVerificationInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	lcKey  LCKey,
	dummy  NULL   OPTIONAL
}

ReportGetLinkVerificationInfo ::= SEQUENCE {
	reqId             SmartReqIdtype,
	result            Res,
	linkComponentInfo LinkComponentInfo,
	dummy             NULL   OPTIONAL
}

MsgReportGetLinkVerificationInfo MESSAGE ReportGetLinkVerificationInfo ::= 5063
	FROM	CPM
	TO	UI

md_MsgReportGetLinkVerificationInfo MessageDescriptor ::= { mdKind 3 }

-- Modify LC da LCQT
SetOfLCLmpParameters ::= SET OF LCLmpParameters

ModifyLinkComponent ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	lcKey  LCKey,
	lcName GraphicString,
	dummy  NULL   OPTIONAL
}

MsgModifyLinkComponent MESSAGE ModifyLinkComponent ::= 5064
	FROM	UI
	TO	CPM

md_MsgModifyLinkComponent MessageDescriptor ::= { mdKind 1, mdReport 5065}

ReportModifyLinkComponent ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgReportModifyLinkComponent MESSAGE ReportModifyLinkComponent ::= 5065
	FROM	CPM
	TO	UI

md_MsgReportModifyLinkComponent MessageDescriptor ::= { mdKind 3 }

-- Dettagli LK da LKQT
GetLinkClusterInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	lkKey  LKKey,
	dummy  NULL   OPTIONAL
}

MsgGetLinkClusterInfo MESSAGE GetLinkClusterInfo ::= 5066
	FROM	UI
	TO	CPM

md_MsgGetLinkClusterInfo MessageDescriptor ::= { mdKind 1, mdReport 5067}

ReportGetLinkClusterInfo ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	linkClusterInfo LinkClusterInfo,
	dummy           NULL   OPTIONAL
}

MsgReportGetLinkClusterInfo MESSAGE ReportGetLinkClusterInfo ::= 5067
	FROM	 CPM
	TO	 UI

md_MsgReportGetLinkClusterInfo MessageDescriptor ::= { mdKind 3 }

-- Modify LK da LKQT
SetOfLKInfoOnNode ::= SET OF LKInfoOnNode

ModifyLinkCluster ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	lkKey  LKKey,
	lkName GraphicString,
        lkInfoOnNode LKInfoOnNode OPTIONAL,
	dummy  NULL   OPTIONAL
}

MsgModifyLinkCluster MESSAGE ModifyLinkCluster ::= 5068
	FROM	UI
	TO	CPM

md_MsgModifyLinkCluster MessageDescriptor ::= { mdKind 1, mdReport 5069}

ReportModifyLinkCluster ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgReportModifyLinkCluster MESSAGE ReportModifyLinkCluster ::= 5069
	FROM	CPM
	TO	UI

md_MsgReportModifyLinkCluster MessageDescriptor ::= { mdKind 3 }

-- Verification Report LK da LKQT
GetAdjacencyVerificationInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	lkKey  LKKey,
	dummy  NULL   OPTIONAL
}

MsgGetAdjacencyVerificationInfo MESSAGE GetAdjacencyVerificationInfo ::= 5070
	FROM	UI
	TO	CPM

md_MsgGetAdjacencyVerificationInfo MessageDescriptor ::= { mdKind 1, mdReport 5071}

ReportGetAdjacencyVerificationInfo ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	linkClusterInfo LinkClusterInfo,
	dummy           NULL   OPTIONAL
}

MsgReportGetAdjacencyVerificationInfo MESSAGE ReportGetAdjacencyVerificationInfo ::= 5071
	FROM	CPM
	TO	UI

md_MsgReportGetAdjacencyVerificationInfo MessageDescriptor ::= { mdKind 3 }

SetOfCCType ::= SET OF CCType

CCType ::= ENUMERATED {
	in_band    (0),
	out_of_band(1),
        indirect   (2),
        routerId   (3)
}

CCOperState ::= ENUMERATED {
	up              (0),
	down            (1),
	config_sender   (2),
	config_receiver (3),
	active          (4),
	going_down      (5),
          undefined       (6)
}

SetOfCCOperState ::= SET OF CCOperState

-- Details CC da CCQT
CCKey ::= CHOICE {
	ccName GraphicString,
	ccId   CCId
}


GetControlChannelInfo ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	ccKey  CCKey,
        getCitInfo NULL OPTIONAL,
	dummy  NULL   OPTIONAL
}

MsgGetControlChannelInfo MESSAGE GetControlChannelInfo ::= 5072
	FROM	UI
	TO	CPM

md_MsgGetControlChannelInfo MessageDescriptor ::= { mdKind 1, mdReport 5073}

CCLmpParameters ::= SEQUENCE {
	configInterval			INTEGER	OPTIONAL,
	configRetryLimit		INTEGER	OPTIONAL,
	configRetDelta			INTEGER	OPTIONAL,
	helloInterval			INTEGER	OPTIONAL,
	helloDead			INTEGER	OPTIONAL,
	restartTime			INTEGER	OPTIONAL
}

LmpCITInfo ::= SEQUENCE {
	maxRecUnit			INTEGER	OPTIONAL,
	restartTimer			INTEGER	OPTIONAL,
	maxTerminate			INTEGER	OPTIONAL,
	maxConfigure			INTEGER	OPTIONAL,
	maxFailure			INTEGER	OPTIONAL,
	echoTimer			INTEGER	OPTIONAL,
	echoFailureThreshold		INTEGER	OPTIONAL
}

CCInfoOnNode ::= SEQUENCE {
	neName           NEName         OPTIONAL,
	neIp             GenericAddress OPTIONAL,
	citId            GenericAddress OPTIONAL,
	controlChannelId CCId           OPTIONAL,
 	ccLmpParameters	 CCLmpParameters OPTIONAL,
	ccLmpCitInfo	 LmpCITInfo	 OPTIONAL,
        configured      ConfiguredOnCP   OPTIONAL,
        configurable    ConfigurableOnCP OPTIONAL,
        restorePhase    RestorePhase     OPTIONAL
}

SetOfNames ::= SET OF GraphicString

ControlChannelInfo ::= SEQUENCE {
	controlChannelName GraphicString OPTIONAL,
	nodeInfoFrom       CCInfoOnNode  OPTIONAL,
	nodeInfoTo         CCInfoOnNode  OPTIONAL,
	ccType             CCType        OPTIONAL,
	ccOperState        CCOperState   OPTIONAL,
	forcedUp           ForcedUp      OPTIONAL,
	creationDate       UnixTime      OPTIONAL,
	ccLmpAdminStatus   LkAdminState  OPTIONAL,
          isMisaligned       BOOLEAN       OPTIONAL,
          canBeDeconfigured  BOOLEAN 	 OPTIONAL,
	setOfCorrelatedCCs SetOfNames OPTIONAL
}

ReportGetControlChannelInfo ::= SEQUENCE {
	reqId              SmartReqIdtype,
	result             Res,
	controlChannelInfo ControlChannelInfo,
	dummy              NULL   OPTIONAL
}

MsgReportGetControlChannelInfo MESSAGE ReportGetControlChannelInfo ::= 5073
	FROM	CPM
	TO	UI

md_MsgReportGetControlChannelInfo MessageDescriptor ::= { mdKind 3 }

-- Modify CC da CCQT
SetOfCCInfoOnNode ::= SET OF CCInfoOnNode

ModifyControlChannel ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	ccKey  CCKey,
	ccName GraphicString,
	ccInfoOnNode CCInfoOnNode OPTIONAL,
	dummy  NULL   OPTIONAL
}

MsgModifyControlChannel MESSAGE ModifyControlChannel ::= 5074
	FROM	UI
	TO	CPM

md_MsgModifyControlChannel MessageDescriptor ::= { mdKind 1, mdReport 5075}

ReportModifyControlChannel ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgReportModifyControlChannel MESSAGE ReportModifyControlChannel ::= 5075
	FROM	 CPM
	TO	 UI

md_MsgReportModifyControlChannel MessageDescriptor ::= { mdKind 3 }

LKId ::= SEQUENCE {
	routingArea GenericAddress,
	lkInterface GenericAddress
}

LKKey ::= CHOICE {
	lkName GraphicString,
	lkId   LKId
}

ElementKey ::= CHOICE {
	lcKey LCKey,
	lkKey LKKey
}

GetCircuitList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	elKey  ElementKey,
	dummy  NULL   OPTIONAL
}

MsgGetCircuitList MESSAGE GetCircuitList ::= 5155
	FROM	UI
	TO	CPM

md_MsgGetCircuitList MessageDescriptor ::= { mdKind 2, mdReport 5255 }

ReportGetCircuitList ::= SEQUENCE {
	reqId                   SmartReqIdtype,
	result                  Res,
	setOfCircuitQueryResult SetOfCircuitQueryResult,
	dummy                   NULL   OPTIONAL
}

MsgReportGetCircuitList MESSAGE ReportGetCircuitList ::= 5255
	FROM	CPM
	TO	UI

md_MsgReportGetCircuitList MessageDescriptor ::= { mdKind 3 }

GetLinkClusterList ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	ccKey  CCKey,
	dummy  NULL   OPTIONAL
}

MsgGetLinkClusterList MESSAGE GetLinkClusterList ::= 5162
	FROM	UI
	TO	CPM

md_MsgGetLinkClusterList MessageDescriptor ::= { mdKind 2, mdReport 5262 }

ReportGetLinkClusterList ::= SEQUENCE {
	reqId                       SmartReqIdtype,
	result                      Res,
	setOfLinkClusterQueryResult SetOfLinkClusterQueryResult,
	linkClusterQuery            LinkClusterQuery,
	dummy                       NULL   OPTIONAL
}

MsgReportGetLinkClusterList MESSAGE ReportGetLinkClusterList ::= 5262
	FROM	CPM
	TO	UI

md_MsgReportGetLinkClusterList MessageDescriptor ::= { mdKind 3 }

LockLinkCluster ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	lkKey        LKKey,
	lockingState LkLockingState,
	dummy        NULL   OPTIONAL
}

MsgLockLinkCluster MESSAGE LockLinkCluster ::= 5164
	FROM	UI
	TO	CPM

md_MsgLockLinkCluster MessageDescriptor ::= { mdKind 1, mdReport 5264}

ReportLockLinkCluster ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgReportLockLinkCluster MESSAGE ReportLockLinkCluster ::= 5264
	FROM	CPM
	TO	UI

md_MsgReportLockLinkCluster MessageDescriptor ::= { mdKind 3 }

-- *****************  Init NMS statistics ********************************

MsgGetNMSData MESSAGE GetNMSData ::= 5163
	FROM UI
	TO NRQH

md_MsgGetNMSData MessageDescriptor ::= { mdKind 1,mdReport 5263 }

GetNMSData ::= SEQUENCE {
	reqId     SmartReqIdtype,
	userId    AttrId,
	dataLabel GraphicString,
	dummy     NULL   OPTIONAL
}


MsgReportGetNMSData MESSAGE ReportGetNMSData ::= 5263
	FROM NRQH
	TO UI

md_MsgReportGetNMSData MessageDescriptor ::= { mdKind 3 }

ReportGetNMSData ::= SEQUENCE {
	reqId      SmartReqIdtype,
	result     Res,
	dataRecord UserRecord,
	dummy      NULL   OPTIONAL
}


-- *****************  End  NMS statistics ********************************

-- *****************  Init Tandem SNCP Connection ******************************

GetNEListBoundToRouting ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	pathId     PathId     OPTIONAL,
	pathname   PathName   OPTIONAL,
	signalType SignalType,
	command    CommandType
}


MsgGetNEListBoundToRouting MESSAGE GetNEListBoundToRouting ::= 5165
	FROM	UI
	TO	DBQH

md_MsgGetNEListBoundToRouting MessageDescriptor ::= { mdKind 2, mdReport 5265 }

NEInRouting ::= SEQUENCE {
	neName           SNName,
	neId             SNId,
	aEndWorkerTP     TPInfo,
	zEndWorkerTP     TPInfo,
	zEndProtectionTP TPInfo OPTIONAL
}

NEInRoutingList ::= SET OF NEInRouting

MsgReportGetNEListBoundToRouting MESSAGE ReportGetNEListBoundToRouting ::= 5265
	FROM	DBQH
	TO	UI

md_MsgReportGetNEListBoundToRouting MessageDescriptor ::= { mdKind 3 }

ReportGetNEListBoundToRouting ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	numResults      INTEGER,
	neInRoutingList NEInRoutingList,
	dummy           NULL OPTIONAL
}

MsgGetSNCInfo MESSAGE GetSNCInfo::= 5166
	FROM	UI
	TO	DBQH

md_MsgGetSNCInfo MessageDescriptor ::= { mdKind 2, mdReport 5266 }

GetSNCInfo ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	signalType SignalType,
	sncType    SNCType,
	sncId      SNCId,
	dummy      NULL   OPTIONAL
}

MsgReportGetSNCInfo MESSAGE ReportGetSNCInfo ::= 5266
	FROM	DBQH
	TO	UI

md_MsgReportGetSNCInfo MessageDescriptor ::= { mdKind 3 }

ReportGetSNCInfo ::= SEQUENCE {
	reqId            SmartReqIdtype,
	result           Res,
	aEndWorkerTP     TPInfo,
	zEndWorkerTP     TPInfo,
	zEndProtectionTP TPInfo OPTIONAL
}

-- *****************  End  Tandem SNCP Connection ******************************


-- *****************  Init ASTN_DD Backup & Restore ***************************

MsgSetRestorePhase MESSAGE SetRestorePhase::= 5167
	FROM	UI
	TO	CPM

md_MsgSetRestorePhase MessageDescriptor ::= { mdKind 2, mdReport 5267 }

SetRestorePhase ::= SEQUENCE {
	reqId        SmartReqIdtype,
	userId       AttrId,
	restorePhase RestorePhase,
	snId         SNId,
	dummy        NULL   OPTIONAL
}

MsgReportSetRestorePhase MESSAGE ReportSetRestorePhase ::= 5267
	FROM	CPM
	TO	UI

md_MsgReportSetRestorePhase MessageDescriptor ::= { mdKind 3 }

ReportSetRestorePhase ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

MsgLSPathSafeDisable MESSAGE LSPathSafeDisable::= 5168
	FROM	UI
	TO	CPM

md_MsgLSPathSafeDisable MessageDescriptor ::= { mdKind 2, mdReport 5268 }

LSPathSafeDisable ::= SEQUENCE {
	reqId      SmartReqIdtype,
	userId     AttrId,
	pathId     PathId,
	signalType SignalType,
	dummy      NULL   OPTIONAL
}

MsgReportLSPathSafeDisable MESSAGE ReportLSPathSafeDisable ::= 5268
	FROM	CPM
	TO	UI

md_MsgReportLSPathSafeDisable MessageDescriptor ::= { mdKind 3 }

ReportLSPathSafeDisable ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}


-- *****************  End  ASTN_DD Backup & Restore ***************************

-- *****************  Init OTE - UDC Management *******************************

MsgGetTrailInfo MESSAGE GetTrailInfo::= 5172
	FROM	UI
	TO	CH

md_MsgGetTrailInfo MessageDescriptor ::= { mdKind 2, mdReport 5272 }

GetTrailInfo ::= SEQUENCE {
	reqId		SmartReqIdtype,
	userId		AttrId,
	trails		SetOfPaths,
	dummy		NULL OPTIONAL
}

MsgReportGetTrailInfo MESSAGE ReportGetTrailInfo ::= 5272
	FROM	CH
	TO	UI

md_MsgReportGetTrailInfo MessageDescriptor ::= { mkkind 3 }

ReportGetTrailInfo ::= SEQUENCE {
	reqId		SmartReqIdtype,
	result		Res,
	trailInfos	SetOfTrailInfo,
	dummy		NULL OPTIONAL
}

SetOfTrailInfo ::= SET OF TrailInfo

TrailInfo ::= SEQUENCE {
	trailDefault	TrailDefault,
	routeing	TrailRouteing	OPTIONAL
}

TrailRouteing ::= SEQUENCE {
	trailName  TrailName,
	pathGroup  PathGroup           OPTIONAL,
	routing    NamedGenericRouting
}

Node ::= SEQUENCE {
	uSN     SNs,
	tpPoint CardPortChannel OPTIONAL
}

LinkLinkConn ::= SEQUENCE {
	conn        ConnInfo,
	fromTpPoint AccessPoint,
	toTpPoint   AccessPoint
}

NamedAccessPoint ::= CHOICE {
	node     Node,
	currConn LinkLinkConn
}

NamedTPRouting ::= SET OF NamedAccessPoint

NamedRoute ::= SEQUENCE {
	worker     NamedTPRouting,
	protection NamedTPRouting OPTIONAL
}

NamedGenericRouting ::= SET OF NamedRoute

MsgActivateLegProtections MESSAGE ActivateLegProtections::= 5173
	FROM	UI
	TO	CH

md_MsgActivateLegProtections MessageDescriptor ::= { mdKind 2, mdReport 5273 }

ActivateLegProtections ::= SEQUENCE {
        reqId      SmartReqIdtype,
        userId     AttrId,
        signalType SignalType,
        pathId     PathId,
	dummy      NULL        OPTIONAL
}

MsgReportActivateLegProtections MESSAGE ReportActivateLegProtections ::= 5273
	FROM	CH
	TO	UI

md_MsgReportActivateLegProtections MessageDescriptor ::= { mkkind 3 }

ReportActivateLegProtections ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL 	OPTIONAL
}

MsgDeactivateLegProtections MESSAGE DeactivateLegProtections::= 5174
	FROM	UI
	TO	CH

md_MsgDeactivateLegProtections MessageDescriptor ::= { mdKind 2,mdReport 5274 }

DeactivateLegProtections ::= SEQUENCE {
        reqId      SmartReqIdtype,
        userId     AttrId,
        signalType SignalType,
        pathId     PathId,
	dummy      NULL        OPTIONAL
}

MsgReportDeactivateLegProtections MESSAGE ReportDeactivateLegProtections ::= 5274
	FROM	CH
	TO	UI

md_MsgReportDeactivateLegProtections MessageDescriptor ::= { mkkind 3 }

ReportDeactivateLegProtections ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL     OPTIONAL
}

MsgGetVCGs MESSAGE GetVCGs::= 5176
	FROM	UI
	TO	CH

md_MsgGetVCGs MessageDescriptor ::= { mdKind 2,mdReport 5276 }

GetVCGs ::= SEQUENCE {
        reqId       SmartReqIdtype,
        userId      AttrId,
        signalType  SignalType,
        pathGroupId PathId,
	pendingOnly NULL OPTIONAL
}

MsgReportGetVCGs MESSAGE ReportGetVCGs ::= 5276
	FROM	CH
	TO	UI

md_MsgReportGetVCGs MessageDescriptor ::= { mkkind 3 }

SetOfVCG ::= SET OF VCG

ReportGetVCGs ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	vcgs   SetOfVCG,
	dummy  NULL       OPTIONAL
}

-- *****************  End OTE - UDC Management  *******************************

-- *****************  Init Microwave - Discovery Link Management  *************

MsgDiscoveryLink MESSAGE DiscoveryLink::= 5177
	FROM	UI
	TO	CH

md_MsgDiscoveryLink MessageDescriptor ::= { mdKind 2,mdReport 5277 }

SetOfEMId ::= SET OF EMId

SelectionArea ::= CHOICE {
	setOfUSNId SetOfSNId,
	setOfEMId  SetOfEMId,
	wholeNet   NULL
}

SetOfLinkType ::= SET OF LinkType

DiscoveryOptions ::= SEQUENCE {
	selection  SelectionArea,
	linkType   SetOfLinkType,
	updatePort NULL OPTIONAL
}

DiscoveryLink ::= SEQUENCE {
	reqId           SmartReqIdtype,
	userId          AttrId,
	discoveryOpt    DiscoveryOptions OPTIONAL,
	filterSelection FilterSelection  OPTIONAL,
	fileName        GraphicString    OPTIONAL,
	startingLine    INTEGER,
	numOfLines      INTEGER,
	startingFromEnd NULL             OPTIONAL
}

FilterSelection ::= SEQUENCE {
	linkCreated BOOLEAN,
	linkDeleted BOOLEAN,
	linkUpdated BOOLEAN,
	linkFailed  BOOLEAN,
	linkSuccess BOOLEAN,
	linkWarning BOOLEAN
}


MsgReportDiscoveryLink MESSAGE ReportDiscoveryLink ::= 5277
	FROM	CH
	TO	UI

md_MsgReportDiscoveryLink MessageDescriptor ::= { mkkind 3 }

LinkFound ::= SEQUENCE {
	linkId   INTEGER,
	linkName GraphicString,
	action   GraphicString,
	result   GraphicString,
	info     GraphicString
}

ResourceError ::= SEQUENCE {
	resourceName     GraphicString,
	errorDescription GraphicString
}

SetOfResourceError ::= SET OF ResourceError

SetOfLinkFound ::= SET OF LinkFound

ReportDiscoveryLink ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	fileName        GraphicString      OPTIONAL,
	startingLine    INTEGER,
	numOfLines      INTEGER,
	lastLineRead    INTEGER            OPTIONAL,
	endReached      NULL               OPTIONAL,
	discoveredLinks SetOfLinkFound     OPTIONAL,
	erroredNodes    SetOfResourceError OPTIONAL,
	dummy           NULL               OPTIONAL
}

-- *****************  End Microwave - Discovery Link Management  *************

-- *****************  INIT Async Management  *************

MsgFlushAsyncs MESSAGE FlushAsyncs::= 5178
	FROM	UI
	TO	CH

md_MsgFlushAsyncs MessageDescriptor ::= { mdKind 2,mdReport 5278 }

FlushAsyncs::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	dummy  NULL   OPTIONAL
}

MsgReportFlushAsyncs MESSAGE ReportFlushAsyncs ::= 5278
	FROM	CH
	TO	UI

md_MsgReportFlushAsyncs MessageDescriptor ::= { mkkind 3 }

ReportFlushAsyncs ::= SEQUENCE {
	reqId           SmartReqIdtype,
	result          Res,
	dummy           NULL               OPTIONAL
}


-- *****************  END Async Management  *************

-- *****************  INIT Paging Management  *************

-- **********************************************************************
-- **                                                                  **
-- ** If the operator is closing the  window,  the "reset" command has **
-- ** to be sent. The server will respond with positive compliance and **
-- ** then it will reset its memory.                                   **
-- **                                                                  **
-- **********************************************************************
NavigatorAction::= ENUMERATED {
	gotoBegin (0),
	next      (1),
	prev      (2),
	gotoEnd   (3),
	refresh   (4),
	reset     (5)
}

NavigatorKey ::= CHOICE {
    key     INTEGER,
    keyName GraphicString
}

-- ******************************************************************
-- **                                                              **
-- **   Navigator Sequence                                         **
-- **                                                              **
-- ******************************************************************
-- **                                                              **
-- ** The file name will be present only in the cases in which the **
-- ** cashing is on file.                                          **
-- **                                                              **
-- **********************************************************************
-- ** Scenarios:                                                       **
-- **                                                                  **
-- ** Action "Goto Begin" or first request:                            **
-- **                                                                  **
-- ** Navigator {                                                      **
-- ** 	key    = 0                                                     **
-- ** 	action = gotoBegin                                             **
-- ** 	limit  = tot                                                   **
-- ** }                                                                **
-- **                                                                  **
-- **********************************************************************
-- **                                                                  **
-- ** Action "Goto End":                                               **
-- **                                                                  **
-- ** Navigator {                                                      **
-- ** 	key    = 0                                                     **
-- ** 	action = gotoEnd                                               **
-- ** 	limit  = tot                                                   **
-- ** }                                                                **
-- **                                                                  **
-- **********************************************************************
-- **                                                                  **
-- ** Action "Next":                                                   **
-- **                                                                  **
-- ** Navigator {                                                      **
-- **	 key    = Z                                                    **
-- **	 action = next                                                 **
-- **	 limit  = tot                                                  **
-- ** }                                                                **
-- **                                                                  **
-- **********************************************************************
-- **                                                                  **
-- ** Action "Prev":                                                   **
-- **                                                                  **
-- ** Navigator {                                                      **
-- **	 key    = A                                                    **
-- **	 action = prev                                                 **
-- **	 limit  = tot                                                  **
-- ** }                                                                **
-- **                                                                  **
-- **********************************************************************
-- **                                                                  **
-- ** Action "Refresh":                                                **
-- **                                                                  **
-- ** Navigator {                                                      **
-- **	 key    = A                                                    **
-- **	 action = refresh                                              **
-- **	 limit  = tot                                                  **
-- ** }                                                                **
-- **                                                                  **
-- **********************************************************************
-- **                                                                  **
-- ** Action "Go to page...":                                          **
-- ** (present only if the key is an integer and the server has filled **
-- **  in the field NavigatorReport::total)                            **
-- **                                                                  **
-- ** Navigator {                                                      **
-- **	 key    = tot * (N - 1) <=== (key < NUM_TOTAL)                 **
-- **	 action = Next                                                 **
-- **	 limit  = tot                                                  **
-- ** }                                                                **
-- **                                                                  **
-- ************************************************************************
-- **                                                                    **
-- ** During the paging the sequence NavigatorReport will filled in      **
-- ** as follows:                                                        **
-- **                                                                    **
-- ** NavigatorReport {                                                  **
-- **	 fileName	<== (present only if necessary)                  **
-- **	 firstkey = A   <== (logik key of the first record of the list)  **
-- **	 nextKey  = Z   <== (logik key of the last+1 record of the list) **
-- **                   <== (this key will be the first record key in    **
-- **                        the next operation)                         **
-- **                   <== (if the end of the list is reached, nextKey  **
-- **                        must be put to 0 or to null)                **
-- **	 total    = NUM_TOTAL                                            **
-- **	 beginReached   <== (present if previous records are present)    **
-- ** }                                                                  **
-- **                                                                    **
-- ************************************************************************
Navigator ::= SEQUENCE {
    fileName GraphicString OPTIONAL,
    key      NavigatorKey,
    action   NavigatorAction,
    limit    INTEGER
}

-- *******************************************************************
-- **                                                               **
-- ** fileName:                                                     **
-- ** In the report will be filled in the filename in the cases in  **
-- ** which the cashing is on file.                                 **
-- **                                                               **
-- ** total:                                                        **
-- ** if the key is an integer this field will be used to implement **
-- ** the "go to page..." operation                                 **
-- **                                                               **
-- *******************************************************************
NavigatorReport ::= SEQUENCE {
    fileName     GraphicString OPTIONAL,
    firstKey     NavigatorKey,
    nextKey      NavigatorKey,
    total        INTEGER       OPTIONAL,
    beginReached NULL          OPTIONAL
}

-- *****************  END Paging Management  *************

-- *****************  INIT Keep Alive Management  *************

MsgKeepAlive MESSAGE KeepAlive::= 5179
	FROM	UI
	TO	UM

md_MsgKeepAlive MessageDescriptor ::= { mdKind 2,mdReport 5279 }

KeepAlive ::= SEQUENCE {
	reqId  SmartReqIdtype,
	userId AttrId,
	time   INTEGER          OPTIONAL
}

MsgReportKeepAlive MESSAGE ReportKeepAlive ::= 5279
	FROM	UM
	TO	UI

md_MsgReportKeepAlive MessageDescriptor ::= { mkkind 3 }

ReportKeepAlive ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	time   INTEGER          OPTIONAL
}

MsgForceGuiLogout MESSAGE ForceGuiLogout::= 5180
	FROM	UI
	TO	UM

md_MsgForceGuiLogout MessageDescriptor ::= { mdKind 2,mdReport 5280 }

LogoutMode ::= ENUMERATED {
    sendLogout   (0),
    closeChannel (1)
}

ForceGuiLogout ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	userIdToLogout AttrId,
	modeLogout     LogoutMode
}

MsgReportForceGuiLogout MESSAGE ReportForceGuiLogout ::= 5280
	FROM	UM
	TO	UI

md_MsgReportForceGuiLogout MessageDescriptor ::= { mkkind 3 }

ReportForceGuiLogout ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL    OPTIONAL
}

-- *****************  END Keep Alive Management  *************
-- **************** INIT alarm enable/disable ****************
MsgGetAlarmResourcesDisabled MESSAGE GetAlarmResourcesDisabled ::= 5182
	FROM	UI
	TO	UM

md_MsgGetAlarmResourcesDisabled MessageDescriptor ::= { mdKind 2, mdReport 5282}

MsgReportGetAlarmResourcesDisabled MESSAGE ReportGetAlarmResourcesDisabled ::= 5282
	FROM	CH
	TO	UI

md_MsgReportGetAlarmResourcesDisabled MessageDescriptor ::= { mdKind 3 }

GetAlarmResourcesDisabled ::= SEQUENCE {
        reqId  SmartReqIdtype,
        userId AttrId,
        dummy    NULL   OPTIONAL
}

AlarmResourcesDisabled ::= SEQUENCE {
       emName   EMName,
       ne       NEName,
       shelfId  Identifier,
       cardName GraphicString,
       dummy    NULL   OPTIONAL
}

SetOfAlarmResourcesDisabled ::= SET OF AlarmResourcesDisabled

ReportGetAlarmResourcesDisabled ::= SEQUENCE {
        reqId     SmartReqIdtype,
        resCode   ResCode,
        cause GraphicString,
        resources SetOfAlarmResourcesDisabled
}

-- ***************** END alarm enable/disable ****************
-- ************************* INIT WSON ***********************
-- ******************message GetFileList *********************
MsgGetFileList MESSAGE GetFileList ::= 5183
 	FROM	UI
 	TO	CPM

md_MsgGetFileList MessageDescriptor ::= { mdKind 2, mdReport 5283}

MsgReportGetFileList MESSAGE ReportGetFileList ::= 5283
 	FROM	CPM
 	TO	UI

md_MsgReportGetFileList MessageDescriptor ::= { mdKind 3 }


GetFileList ::= SEQUENCE {
         reqId         SmartReqIdtype,
         userId        AttrId,
         directoryName GraphicString OPTIONAL,
         fileExt       GraphicString OPTIONAL
}

FileInfo ::= SEQUENCE {
 	fileName GraphicString,
     	size  INTEGER OPTIONAL,
     	date  UnixTime OPTIONAL
 }


SetOfFileInfo ::= SET OF FileInfo

ReportGetFileList ::= SEQUENCE {
 	reqId SmartReqIdtype,
 	result Res,
 	directoryName GraphicString,
 	setOfFileInfo SetOfFileInfo,
 	dummy NULL OPTIONAL
}

-- ************message ImportControlPlaneConfig ************
MsgImportControlPlaneConfig MESSAGE ImportControlPlaneConfig ::= 5184
 	FROM	UI
 	TO	CPM

md_MsgImportControlPlaneConfig MessageDescriptor ::= { mdKind 2, mdReport 5284}

MsgReportImportControlPlaneConfig MESSAGE ReportImportControlPlaneConfig ::= 5284
 	FROM	CPM
 	TO	UI

md_MsgReportImportControlPlaneConfig MessageDescriptor ::= { mdKind 3 }

ImportControlPlaneConfig ::= SEQUENCE {
        reqId            SmartReqIdtype,
        userId           AttrId,
        directoryName    GraphicString OPTIONAL,
        fileName         GraphicString OPTIONAL,
        transactionId    INTEGER OPTIONAL,
        abortTransaction NULL OPTIONAL,
        ignoreAllErrors  NULL OPTIONAL
}

ImportResultList ::= SEQUENCE {
        importedLSRs            SetOfDiscoveredResource,
        importedAdjacencies     SetOfDiscoveredResource,
        importedControlChannels SetOfDiscoveredResource,
        importedLinkClusters    SetOfDiscoveredResource,
        importedLinkComponents  SetOfDiscoveredResource,
        importedWsonCircuits    SetOfDiscoveredResource,
 	dummy                   NULL OPTIONAL
}

ImportInfo ::= SEQUENCE {
        numOfNodes           INTEGER,
        numOfAdjacencies     INTEGER,
        numOfControlChannels INTEGER,
        numOfLinkClusters    INTEGER,
        numOfLinkComponents  INTEGER,
        numOfWsonCircuits    INTEGER,
        currNmsId            INTEGER,
        prevNmsId            INTEGER,
        ospfRoutingArea      GraphicString,
        dummy                NULL OPTIONAL
}

ReportImportControlPlaneConfig ::= SEQUENCE {
        reqId         SmartReqIdtype,
        result        Res,
        transactionId INTEGER OPTIONAL,
        importInfo    ImportInfo OPTIONAL,
        firstError    NULL OPTIONAL,
        resultList    ImportResultList OPTIONAL
}


-- ************message GetCombinedPathInfo ************
MsgGetCombinedPathInfo MESSAGE GetCombinedPathInfo ::= 5185
 	FROM	UI
 	TO        CH

md_MsgGetCombinedPathInfo MessageDescriptor ::= { mdKind 2, mdReport 5285}

MsgReportGetCombinedPathInfo MESSAGE ReportGetCombinedPathInfo ::= 5285
 	FROM	CH
 	TO	UI

md_MsgReportGetCombinedPathInfo MessageDescriptor ::= { mdKind 3 }

GetCombinedPathInfo ::= SEQUENCE {
	reqId	   SmartReqIdtype,
	userId	   AttrId,
	setOfPaths SetOfPathId,
	dummy	   NULL	OPTIONAL
}

LambdaDiversity ::= ENUMERATED {
	undefined	(0),
	independent	(1),
	shareAll	(2),
	notEqual	(3),
	shareProtection	(4)
}

CombinedPathConstraints ::= SEQUENCE {
        pathType	PathType,
        diversity	ProtectionDiversity,
        lambdaDiversity	LambdaDiversity	OPTIONAL
}

LSPRole ::= ENUMERATED {
        worker	   (0),
        protection (1),
        preplanned (2),
        secondProt (3)
}

HopList ::= SET OF HOPElement

HOPElement ::= SEQUENCE {
        --nodeName	GraphicString,
        nodeName	NEName ,
        ingressPort	ChannelCoord,
        regIngressPort	ChannelCoord	OPTIONAL,
        regEgressPort	ChannelCoord	OPTIONAL,
        egressPort	ChannelCoord
}

SetOfPreplannedPathInfo ::= SET OF PreplannedPathInfo

PreplannedPathInfo ::= SEQUENCE {
        pathName PathName,
        pathType PathType,
        signalType SignalType,
        operState OperState            OPTIONAL,
        pathState PathState            OPTIONAL,
        creationDate UnixTime          OPTIONAL,
        userName AttrName              OPTIONAL,
        routing Routing                OPTIONAL,
        pathCategory PathCategory      OPTIONAL
}

LSPRouteDetails ::= CHOICE {
        hops       HopList,
        setOfPaths SetOfPathInfo,
	setOfPreplannedPaths SetOfPreplannedPathInfo
}

CombinedPathData ::= SEQUENCE {
        pathId      PathId,
        pathname    PathName OPTIONAL
}

SetOfCombinedPathData ::= SET OF CombinedPathData

LSP ::= SEQUENCE {
        lspId    INTEGER,
        lspRole  LSPRole,   -- it must be the original lspRole
        currentLspRole  LSPRole  OPTIONAL,  -- it must be the current lspRole
        priority Priority OPTIONAL,
        routing  LSPRouteDetails OPTIONAL,
        lspState CycleLifeState OPTIONAL,  --- for TMF
	mustBePreemptive       BOOLEAN    OPTIONAL,
        waitingForPreemption  SetOfCombinedPathData OPTIONAL
}

LSPs ::= SET OF LSP

WSON ::= SEQUENCE {
        tcId	       INTEGER,
        lsps	       LSPs,
        clientPathInfo PathInfo OPTIONAL,
        offPathInfo   SetOfPathInfo OPTIONAL,
        routerId        GraphicString OPTIONAL
}

CombinedInfo ::= CHOICE {
        wsonInfo	WSON
}

CombinedPathRoutingInfo ::= SEQUENCE {
        pathConstraints CombinedPathConstraints,
        combinedInfo    CombinedInfo
}

ProtSchema ::= SEQUENCE {
        protectionType ProtType,
        priority       Priority,
        revertive      BOOLEAN,
        wtr            INTEGER OPTIONAL
}

WsonStateDetails ::= SEQUENCE {
        pathState       CycleLifeState,
        wsonOperState   OperState,
        tcOperState     ASTNTcOperStatus,
        wsonSncpStatus  ASTNSncpStatus OPTIONAL
}

StateDetails ::= CHOICE {
        wsonStateDetails       WsonStateDetails  --Da estendere per le nuove tipologie di Combined
}

CombinedPathInfo ::= SEQUENCE {
        pathId          PathId,
	pathname	PathName,
	creationDate	UnixTime,
	username	AttrName,
	routingInfo	CombinedPathRoutingInfo,
	customerData	CustomerData OPTIONAL,
	protectionInfo	ProtSchema OPTIONAL,
	stateDetails    StateDetails OPTIONAL  -- Da non accendere in creazione. Contiene le info su tutti gli stati dei possibili combined
}

SetOfCombinedPathInfo ::= SET OF CombinedPathInfo

ReportGetCombinedPathInfo ::= SEQUENCE {
	reqId	              SmartReqIdtype,
	result	              Res,
	setOfCombinedPathInfo SetOfCombinedPathInfo,
	dummy	              NULL OPTIONAL
}

-- ************message ConfigureControlPlane ************
MsgConfigureControlPlane MESSAGE ConfigureControlPlane ::= 5186
            FROM  UI
            TO    CPM

md_MsgConfigureControlPlane MessageDescriptor ::= { mdKind 2, mdReport 5286}

MsgReportConfigureControlPlane MESSAGE ReportConfigureControlPlane ::= 5286
            FROM  CPM
            TO    UI

md_MsgReportConfigureControlPlane MessageDescriptor ::= { mdKind 3 }

ConfigurationType ::= ENUMERATED {
        allCP   (0),
        allLSRs (1),
        allADJs (2),
        allLKs  (3),
        allCC   (4),
        allLC   (5)
}

-- readFromCP e unpdateFromCP saranno in un messaggio a parte
ConfigCmdType ::= ENUMERATED {
        setOnCP      (0),
        clearFromCP  (1)
}

LSRConfigCmd ::= SEQUENCE {
        lsrKey             LSRKey,
        cmdType            ConfigCmdType,
	dummy		   NULL OPTIONAL
}

LSRConfigRes ::= SEQUENCE {
        lsrKey             LSRKey,
        cmdType            ConfigCmdType,
        result             Res,
	dummy		   NULL OPTIONAL
}

SetOfLSRConfigCmd ::= SET OF LSRConfigCmd
SetOfLSRConfigRes ::= SET OF LSRConfigRes

ADJKey ::= CHOICE {
	adjId   ADJId,
	adjName GraphicString
}

ADJConfigCmd ::= SEQUENCE {
        adjKey             ADJKey,
        cmdType            ConfigCmdType
}

ADJConfigRes ::= SEQUENCE {
        adjKey             ADJKey,
        cmdType            ConfigCmdType,
        result             Res,
	dummy		   NULL OPTIONAL
}

SetOfADJConfigCmd ::= SET OF ADJConfigCmd
SetOfADJConfigRes ::= SET OF ADJConfigRes

CCConfigCmd ::= SEQUENCE {
        ccKey              CCKey,
        cmdType            ConfigCmdType
}

CCConfigRes ::= SEQUENCE {
        ccKey              CCKey,
        cmdType            ConfigCmdType,
        result             Res,
	dummy		   NULL OPTIONAL
}

SetOfCCConfigCmd ::= SET OF CCConfigCmd
SetOfCCConfigRes ::= SET OF CCConfigRes

LKConfigCmd ::= SEQUENCE {
        lkKey              LKKey,
        cmdType            ConfigCmdType
}

LKConfigRes ::= SEQUENCE {
        lkKey              LKKey,
        cmdType            ConfigCmdType,
        result             Res,
	dummy		   NULL OPTIONAL
}

SetOfLKConfigCmd ::= SET OF LKConfigCmd
SetOfLKConfigRes ::= SET OF LKConfigRes

LCConfigCmd ::= SEQUENCE {
        lcKey              LCKey,
        cmdType            ConfigCmdType
}

LCConfigRes ::= SEQUENCE {
        lcKey              LCKey,
        cmdType            ConfigCmdType,
        result             Res
}

SetOfLCConfigCmd ::= SET OF LCConfigCmd
SetOfLCConfigRes ::= SET OF LCConfigRes

ConfigureControlPlane ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        ospfRoutingArea    GraphicString,
        configType         ConfigurationType  OPTIONAL,
        lsrConfigCmd       LSRConfigCmd  OPTIONAL,
        adjConfigCmd       ADJConfigCmd  OPTIONAL,
        ccConfigCmd        CCConfigCmd  OPTIONAL,
        lkConfigCmd        LKConfigCmd  OPTIONAL,
        lcConfigCmd        LCConfigCmd  OPTIONAL
}

ReportConfigureControlPlane ::= SEQUENCE {
        reqId         SmartReqIdtype,
        result        Res,
        lsrConfigRes  SetOfLSRConfigRes    OPTIONAL,
        adjConfigRes  SetOfADJConfigRes    OPTIONAL,
        lkConfigRes   SetOfLKConfigRes     OPTIONAL,
        ccConfigRes   SetOfCCConfigRes     OPTIONAL,
        lcConfigRes   SetOfLCConfigRes     OPTIONAL
}

-- ************message ControlPlaneObjectRemove ************
MsgControlPlaneObjectRemove MESSAGE ControlPlaneObjectRemove ::= 5187
 	FROM	UI
 	TO	CPM

md_MsgControlPlaneObjectRemove MessageDescriptor ::= { mdKind 2, mdReport 5287}

MsgReportControlPlaneObjectRemove MESSAGE ReportControlPlaneObjectRemove ::= 5287
 	FROM	CPM
 	TO	UI

md_MsgReportControlPlaneObjectRemove MessageDescriptor ::= { mdKind 3 }

ControlPlaneObjectRemove ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        lsrKey             LSRKey     OPTIONAL,
        adjKey             ADJKey     OPTIONAL,
        lkKey              LKKey      OPTIONAL,
        lcKey              LCKey      OPTIONAL,
        cckey              CCKey      OPTIONAL
}

ReportControlPlaneObjectRemove ::= SEQUENCE {
          reqId         SmartReqIdtype,
          result        Res,
	  dummy	        NULL OPTIONAL
}

-- *****************message ModifyAdjacency *****************
MsgModifyAdjacency MESSAGE ModifyAdjacency ::= 5188
	FROM	UI
	TO	CPM

md_MsgModifyAdjacency MessageDescriptor ::= { mdKind 1, mdReport 5288}

MsgReportModifyAdjacency MESSAGE ReportModifyAdjacency ::= 5288
	FROM	CPM
	TO	UI

md_MsgReportModifyAdjacency MessageDescriptor ::= { mdKind 3 }

LMPAdjInfo ::= SEQUENCE {
	adjSumRetInterval	INTEGER OPTIONAL,
	adjSumRetLimit		INTEGER OPTIONAL,
	adjSumRetDelta		INTEGER OPTIONAL,
        dummy                   NULL OPTIONAL
}

AdjInfo ::= SEQUENCE {
	  adminStatus LkAdminState,
          operState   LMPOperState OPTIONAL,
          routerId    GenericAddress OPTIONAL,
	  lmpAdjInfo	LMPAdjInfo OPTIONAL,
          configured      ConfiguredOnCP   OPTIONAL,
          configurable    ConfigurableOnCP OPTIONAL,
          restorePhase    RestorePhase OPTIONAL,
          lsrName         NEName  OPTIONAL
}

SetOfAdjInfo ::= SET OF AdjInfo

ModifyAdjacency ::= SEQUENCE {
	reqId	     SmartReqIdtype,
	userId	     AttrId,
        adjKey       ADJKey,
	adjName	     GraphicString,
	adjInfo      AdjInfo OPTIONAL,
	dummy	     NULL OPTIONAL
}

ReportModifyAdjacency ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL   OPTIONAL
}

-- *****************message GetAdjacencyInfo  *****************
MsgGetAdjacencyInfo MESSAGE GetAdjacencyInfo ::= 5189
	FROM	UI
	TO	CPM

md_MsgGetAdjacencyInfo MessageDescriptor ::= { mdKind 2, mdReport 5289}

MsgReportGetAdjacencyInfo MESSAGE ReportGetAdjacencyInfo ::= 5289
	FROM	CPM
	TO	UI

md_MsgReportGetAdjacencyInfo MessageDescriptor ::= { mdKind 3 }

GetAdjacencyInfo ::= SEQUENCE {
	reqId	SmartReqIdtype,
	userId	AttrId,
	adjKey	ADJKey,
	dummy	NULL OPTIONAL
}

AdjacencyInfo ::= SEQUENCE {
        adjacencyName   GraphicString,
        adjId           ADJId,
        setOfAdjInfo    SetOfAdjInfo OPTIONAL,
        managedSignalTypes SetOfSignalType OPTIONAL,
	isMisaligned       BOOLEAN OPTIONAL,
        canBeDeconfigured  BOOLEAN OPTIONAL,
        isTrib             BOOLEAN OPTIONAL
}

ReportGetAdjacencyInfo ::= SEQUENCE {
	reqId	      SmartReqIdtype,
	result	      Res,
	adjacencyInfo AdjacencyInfo,
	dummy	      NULL OPTIONAL
}

-- ***************** END message GetAdjacencyInfo  *****************
-- ***************** message ModifyPortsInfo ************************
ModifyPortsInfo::= SEQUENCE {
        reqId                SmartReqIdtype,
        neId                 NEId,
        portId               PortCoord,
	portType             PortType OPTIONAL,
	role                 TPRole   OPTIONAL,
        logicalTTPName       TTPName
}

ReportModifyPortsInfo::= SEQUENCE {
        reqId                SmartReqIdtype,
        result               Res,
        dummy 		     NULL OPTIONAL
}

MsgModifyPortsInfo MESSAGE ModifyPortsInfo ::= 5192
	FROM	UI
	TO	CH

md_MsgModifyPortsInfo MessageDescriptor ::= { mdKind 2, mdReport 5292 }

MsgReportModifyPortsInfo MESSAGE ReportModifyPortsInfo ::= 5292
	FROM	CH
	TO	UI

md_MsgReportModifyPortsInfo MessageDescriptor ::= { mdKind 3 }
-- ***************** END message ModifyPortsInfo **********************
-- ***************** message GetPortConnectivities ********************
GetPortConnectivities::= SEQUENCE {
        reqId         SmartReqIdtype,
        neId          NEId,
        portId        PortCoord,
	portType      PortType OPTIONAL,
	role          TPRole   OPTIONAL
}

ReportGetPortConnectivities::= SEQUENCE {
        reqId         SmartReqIdtype,
        result        Res,
        links         SetOfLinkName     OPTIONAL,
        paths         SetOfPath         OPTIONAL,
        circuits      SetOfPath         OPTIONAL,
        xconns        SetOfSNC	OPTIONAL,
        associatedPorts SetOfChannelCoord OPTIONAL
}

MsgGetPortConnectivities MESSAGE GetPortConnectivities ::= 5193
	FROM	UI
	TO	CH

md_MsgGetPortConnectivities MessageDescriptor ::= { mdKind 2, mdReport 5293 }

MsgReportGetPortConnectivities MESSAGE ReportGetPortConnectivities ::= 5293
	FROM	CH
	TO	UI

md_MsgReportGetPortConnectivities MessageDescriptor ::= { mdKind 3 }
-- ***************** END message GetPortConnectivities ****************
-- *****************  message  PrepareCombinedPath  *******************
PrepareCombinedPath ::= SEQUENCE {
	reqId 		SmartReqIdtype,
	userId 		AttrId,
	signalType	SignalType,
	pathId		INTEGER,
	dummy     	NULL OPTIONAL
}

ReportPrepareCombinedPath ::= SEQUENCE {
	reqId       	SmartReqIdtype,
	result      	Res,
	setOfPathId  	SetOfPathId,
	dummy       	NULL OPTIONAL
}

MsgPrepareCombinedPath MESSAGE PrepareCombinedPath ::= 5194
	FROM	UI
	TO	CH

md_MsgPrepareCombinedPath MessageDescriptor ::= { mdKind 2,mdReport 5294 }

MsgReportPrepareCombinedPath MESSAGE ReportPrepareCombinedPath ::= 5294
	FROM	CH
	TO	UI

md_MsgReportPrepareCombinedPath MessageDescriptor ::= { mdKind 3 }
-- ***************** END message  PrepareCombinedPath  ****************
-- *********************** message  CCGetStatus ***********************
CCGetStatus ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        cckey              CCKey OPTIONAL,
        isUpdate           NULL OPTIONAL
}

ReportCCGetStatus ::= SEQUENCE {
          reqId         SmartReqIdtype,
          result        Res,
          ccOperState   CCOperState   OPTIONAL, -- only present if isUpdate
	  dummy	        NULL OPTIONAL
}

MsgCCGetStatus MESSAGE CCGetStatus ::= 5195
	FROM	UI
	TO	CPM

md_MsgCCGetStatus MessageDescriptor ::= { mdKind 2, mdReport 5295 }

MsgReportCCGetStatus MESSAGE ReportCCGetStatus ::= 5295
	FROM	CPM
	TO	UI

md_MsgReportCCGetStatus MessageDescriptor ::= { mdKind 3 }
-- ***************** END message   CCGetStatus ************************
-- ********************  message   LKGetStatus ************************
LKGetStatus ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        lkKey              LKKey OPTIONAL,
        isUpdate	   NULL OPTIONAL
}

ReportLKGetStatus ::= SEQUENCE {
        reqId         SmartReqIdtype,
        result        Res,
        lockingState  LkLockingState OPTIONAL, --only present if isUpdate not present
        lmpOperState  LMPOperState OPTIONAL --only present if isUpdate not present
}

MsgLKGetStatus MESSAGE LKGetStatus ::= 5196
	FROM	UI
	TO	CPM

md_MsgLKGetStatus MessageDescriptor ::= { mdKind 2, mdReport 5296 }

MsgReportLKGetStatus MESSAGE ReportLKGetStatus ::= 5296
	FROM	CPM
	TO	UI

md_MsgReportLKGetStatus MessageDescriptor ::= { mdKind 3 }
-- ***************** END message   LKGetStatus ************************
-- ***************** message   ADJGetStatus ***************************
ADJGetStatus ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        adjKey             ADJKey OPTIONAL,
        isUpdate	   NULL OPTIONAL
}

ReportADJGetStatus ::= SEQUENCE {
          reqId         SmartReqIdtype,
          result        Res,
          operState     LMPOperState OPTIONAL --only present if isUpdate not present
}

MsgADJGetStatus MESSAGE ADJGetStatus ::= 5197
	FROM	UI
	TO	CPM

md_MsgADJGetStatus MessageDescriptor ::= { mdKind 2, mdReport 5297 }

MsgReportADJGetStatus MESSAGE ReportADJGetStatus ::= 5297
	FROM	CPM
	TO	UI

md_MsgReportADJGetStatus MessageDescriptor ::= { mdKind 3 }
-- ***************** END message  ADJGetStatus ************************
-- ********************  message  LCGetStatus *************************
LCGetStatus ::= SEQUENCE {
        reqId           SmartReqIdtype,
        userId          AttrId,
        lcKey           LCKey OPTIONAL,
        isUpdate        NULL OPTIONAL
}
ReportLCGetStatus ::= SEQUENCE {
          reqId               SmartReqIdtype,
          result              Res,
          lcOperationalState  LCOperState   OPTIONAL -- only present if isUpdate not present
}

MsgLCGetStatus MESSAGE LCGetStatus ::= 5198
	FROM	UI
	TO	CPM

md_MsgLCGetStatus MessageDescriptor ::= { mdKind 2, mdReport 5298 }

MsgReportLCGetStatus MESSAGE ReportLCGetStatus ::= 5298
	FROM	CPM
	TO	UI

md_MsgReportLCGetStatus MessageDescriptor ::= { mdKind 3 }
-- ***************** END message  LCGetStatus *************************
-- *****************  message  LSRGetStatus ***************************
LSRGetStatus ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        lsrKey             LSRKey OPTIONAL,
        isUpdate           NULL OPTIONAL
}

ReportLSRGetStatus ::= SEQUENCE {
          reqId             SmartReqIdtype,
          result            Res,
          lmpOperState      OperState OPTIONAL, -- only present if isUpdate not present
          ospfOperState     OperState OPTIONAL -- only present if isUpdate not present
}

MsgLSRGetStatus MESSAGE LSRGetStatus ::= 5199
	FROM	UI
	TO	CPM

md_MsgLSRGetStatus MessageDescriptor ::= { mdKind 2, mdReport 5299 }

MsgReportLSRGetStatus MESSAGE ReportLSRGetStatus ::= 5299
	FROM	CPM
	TO	UI

md_MsgReportLSRGetStatus MessageDescriptor ::= { mdKind 3 }
-- ***************** END message  LSRGetStatus ************************
-- *****************  message  ExecWsonPathCmd  ***************************
ExecWsonPathCmd  ::= SEQUENCE {
        reqId              SmartReqIdtype,
        userId             AttrId,
        wsonPathKey	   WsonPathKey,
        cmd	           WsonPathCmd,
        dummy              NULL OPTIONAL
}

WsonPathKey ::= CHOICE {
        pathId           PathId,       -- se non basta pathId
        gmplsPathId      AstnCircuitId  -- ingress deve essere neAddress
}

WsonPathCmd ::= CHOICE {
        activate              NULL,
        deactivate            NULL,
        enable                NULL,
        disable               NULL,
        remove                NULL,
        safeDisable           NULL,
        removeLsp   	      RemoveLspCmd,
        modifyPath            ModifyPathCmd,
        reroute               RerouteCmd,
        forcedCmd             ForcedCmdOnWsonPath,
        readStatus            NULL,
        updateStatus          NULL
}

RemoveLspCmd ::= SEQUENCE {
	wLspId      LSPId       OPTIONAL
}

ModifyPathCmd::= SEQUENCE {
        pathName PathName   OPTIONAL,
        priority Priority           OPTIONAL,
        wtrTime INTEGER     OPTIONAL
}

ForcedCmdOnWsonPath::= SEQUENCE {
	switchType  SwitchType,
        dummy        NULL
}

RerouteCmd::= SEQUENCE {
	wLspId      LSPId       OPTIONAL,
	pLspId      LSPId       OPTIONAL
}

WsonPathStatus ::= SEQUENCE {
	tcOperationalState   ASTNTcOperStatus,
        sncpStatus	     ASTNSncpStatus OPTIONAL,
        wLspId               LSPId,              --worker
	pLspId               LSPId    OPTIONAL   --protection
}

ReportExecWsonPathCmd ::= SEQUENCE {
          reqId             SmartReqIdtype,
          result            Res,
          wsonpathStatus    WsonPathStatus OPTIONAL
}

MsgExecWsonPathCmd MESSAGE ExecWsonPathCmd ::= 5202
	FROM	UI
	TO	CPM

md_MsgExecWsonPathCmd MessageDescriptor ::= { mdKind 2, mdReport 5302 }

MsgReportExecWsonPathCmd MESSAGE ReportExecWsonPathCmd ::= 5302
	FROM	CPM
	TO	UI

md_MsgReportExecWsonPathCmd MessageDescriptor ::= { mdKind 3 }
-- ***************** END message  ExecWsonPathCmd ************************
-- ************** message  DisassociateCombinedPath *******************
DisassociateCombinedPath ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	pathId         PathId,
	dummy          NULL OPTIONAL
}

ReportDisassociateCombinedPath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
        pathId PathId,
	dummy  NULL OPTIONAL
}

MsgDisassociateCombinedPath MESSAGE DisassociateCombinedPath::= 5203
	FROM	UI
	TO	CH

md_MsgDisassociateCombinedPath MessageDescriptor ::= { mdKind 2, mdReport 5303 }

MsgReportDisassociateCombinedPath MESSAGE ReportDisassociateCombinedPath ::= 5303
	FROM	CH
	TO	UI

md_MsgReportDisassociateCombinedPath MessageDescriptor ::= { mdKind 3 }
-- ************ END message DisassociateCombinedPath*******************
-- *********************** END WSON ***********************************
-- ********************* message  GetVersion **************************
GetVersion  ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	dummy          NULL OPTIONAL
}

VersionMajor ::= ENUMERATED {
        major  (15)
}

VersionMinor ::= ENUMERATED {
        minor  (1)
}

VersionRevision ::= ENUMERATED {
        revision  (1)
}

ReportGetVersion ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
        majorNum INTEGER,
	minorNum INTEGER,
	revisionNum INTEGER,
        info GraphicString,
	dummy  NULL OPTIONAL
}

MsgGetVersion MESSAGE GetVersion::= 5204
	FROM	UI
	TO	CH

md_MsgGetVersion MessageDescriptor ::= { mdKind 2, mdReport 5304 }

MsgReportGetVersion MESSAGE ReportGetVersion ::= 5304
	FROM	CH
	TO	UI

md_MsgReportGetVersion MessageDescriptor ::= { mdKind 3 }
-- ****************** END message GetVersion **************************
-- ******************  message ExportToXML **************************
ExportToXML  ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
        directoryName  GraphicString,
        fileName       GraphicString,
        overwrite      NULL OPTIONAL
}

ReportExportToXML ::= SEQUENCE {
	reqId               SmartReqIdtype,
	result 		    Res,
	setOfNeToRealign    SetOfNE_SN OPTIONAL,
	fileAlreadyPresent  NULL OPTIONAL
}

MsgExportToXML MESSAGE ExportToXML ::= 5205
	FROM	UI
	TO	CPM

md_MsgExportToXML MessageDescriptor ::= { mdKind 2, mdReport 5305 }

MsgReportExportToXML MESSAGE ReportExportToXML ::= 5305
	FROM	CPM
	TO	UI

md_MsgReportExportToXML MessageDescriptor ::= { mdKind 3 }
-- ****************** END message ExportToXML **************************
-- ******************  message CreateCombinedPath  **************************
CreateCombinedPath ::= SEQUENCE {
              reqId	     SmartReqIdtype,
              userId	     AttrId,
              creationData   CombinedPathCreationData,
              autoActivate   NULL OPTIONAL
}

ReportCreateCombinedPath ::= SEQUENCE {
              reqId          SmartReqIdtype,
              result         Res,
	      pathId	     PathId OPTIONAL --non presente in caso di fail
}

CombinedPathCreationData ::= SEQUENCE {
          pathName     		  GraphicString	OPTIONAL,
          combinedInfo     	  CombinedInfo,
          protSchema   		  ProtSchema,
          combinedPathConstraints CombinedPathConstraints
}

MsgCreateCombinedPath MESSAGE CreateCombinedPath ::= 5206
	FROM	TMF
	TO	CPM

md_MsgCreateCombinedPath MessageDescriptor ::= { mdKind 2, mdReport 5306 }

MsgReportCreateCombinedPath MESSAGE ReportCreateCombinedPath ::= 5306
	FROM	CPM
	TO	TMF

md_MsgReportCreateCombinedPath MessageDescriptor ::= { mdKind 3 }
--- ****************** END message CreateCombinedPath  ******************
--- ************** message  ActivateCombinedPath ************************
ActivateCombinedPath ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	pathId         PathId,
	dummy          NULL OPTIONAL
}

ReportActivateCombinedPath ::= SEQUENCE {
	reqId  SmartReqIdtype,
	result Res,
	dummy  NULL OPTIONAL
}

MsgActivateCombinedPath MESSAGE ActivateCombinedPath::= 5207
	FROM	UI
	TO	CH

md_MsgActivateCombinedPath MessageDescriptor ::= { mdKind 2, mdReport 5307 }

MsgReportActivateCombinedPath MESSAGE ReportActivateCombinedPath ::= 5307
	FROM	CH
	TO	UI

md_MsgReportActivateCombinedPath MessageDescriptor ::= { mdKind 3 }
-- ****************** END message ActivateCombinedPath*******************
--- ************** message asyncronous EMStatus *************************
EMStatus ::= SEQUENCE {
        setofEMs       SetOfEMs,
	dummy          NULL OPTIONAL
}

MsgEMStatus MESSAGE EMStatus::= 5208
	FROM	EH
	TO      UI

md_MsgEMStatus MessageDescriptor ::= { mdKind 4 }
-- ****************** END message asyncronous EMStatus ******************
--- ************** message GetClientPathsAndCircuits ************************
GetClientPathsAndCircuits ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	trailId        TrailId,
	signalType     SignalType,
	setOfLayers    SetOfLayer,
	dummy          NULL OPTIONAL
}

PathGenericData ::= SEQUENCE {
	pathId          PathId,
	pathName        PathName,
	signalType      SignalType,
	pathStructFlag  PathStructFlag,
	dummy           NULL OPTIONAL
}

SetOfPathGenericData ::= SET OF PathGenericData

ReportGetClientPathsAndCircuits ::= SEQUENCE {
	reqId                  SmartReqIdtype,
	result                 Res,
        setOfClientPaths       SetOfPathGenericData,
	dummy                  NULL OPTIONAL
}

MsgGetClientPathsAndCircuits MESSAGE GetClientPathsAndCircuits::= 5209
	FROM	UI
	TO	DBQH

md_MsgGetClientPathsAndCircuits MessageDescriptor ::= { mdKind 2, mdReport 5309 }

MsgReportGetClientPathsAndCircuits MESSAGE ReportGetClientPathsAndCircuits ::= 5309
	FROM	DBQH
	TO	UI

md_MsgReportGetClientPathsAndCircuits MessageDescriptor ::= { mdKind 3 }
-- ****************** END message GetClientPathsAndCircuits *******************

--- LP 26-03-2012 IPT NMS Circuit License Management
UpdateLicense ::= SEQUENCE {
	reqId          SmartReqIdtype,
	userId         AttrId,
	dummy          NULL OPTIONAL
}

MsgUpdateLicense MESSAGE UpdateLicense ::= 5409
    FROM    UI
    TO      WCH

md_MsgUpdateLicense MessageDescriptor ::= { mdKind 4 }


-- INIT LP 05-04-2012 Licensing
License ::= SEQUENCE {
     licenseType           GraphicString,
     startDate             UnixTime  OPTIONAL,
     expirationDate        UnixTime  OPTIONAL,
     freeMEE               INTEGER  OPTIONAL,
     totalMEE              INTEGER OPTIONAL,
     usedMEE               INTEGER   OPTIONAL,
     usedMEEinPercent      INTEGER   OPTIONAL
}

SetOfLicense ::= SET OF License

GetLicenseStatus ::= SEQUENCE {
     reqId SmartReqIdtype,
     userId      AttrId,
     dummy NULL OPTIONAL
}

ReportGetLicenseStatus ::= SEQUENCE {
     reqId SmartReqIdtype,
     hostfingerprint       GraphicString,
     setOfLicense          SetOfLicense,
     remainingTime         INTEGER OPTIONAL  -- if grace period
}


MsgGetLicenseStatus  MESSAGE GetLicenseStatus ::= 5509
	FROM	UI
	TO	CH

md_MsgGetLicenseStatus MessageDescriptor ::= { mdKind 2, mdReport 5609 }

MsgReportGetLicenseStatus MESSAGE ReportGetLicenseStatus ::= 5609
	FROM	CH
	TO	UI

md_MsgReportGetLicenseStatus MessageDescriptor ::= { mdKind 3 }
-- END LP 05-04-2012 Licensing
--- END LP 26-03-2012 IPT NMS Circuit License Management

-- BEGIN ALDO License Async Management
MsgLicenseUpgraded MESSAGE LicenseUpgraded ::= 5709
	FROM	CH
	TO	UI

md_MsgLicenseUpgraded MessageDescriptor ::= { mdKind 4 }

SetOfEMName ::= SET OF EMName

LicenseUpgraded ::= SEQUENCE {
	id                   SmartResIdtype,
	setOfEMnotRealigned  SetOfEMName,
	isTDMlimitReached    NULL OPTIONAL,
  isMWlimitReached     NULL OPTIONAL,
  isETHlimitReached    NULL OPTIONAL,
  isWDMlimitReached    NULL OPTIONAL
}
-- END ALDO License Async Management

END
