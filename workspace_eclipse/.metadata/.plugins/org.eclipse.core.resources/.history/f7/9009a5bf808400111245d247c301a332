/**
 * 
 */
package com.marconi.fusion.tmf.i36PlugIn;

import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.ericsson.oss.slc.ClassConvertionException;
import com.ericsson.oss.slc.IClassConverter;
import com.marconi.fusion.X36.X36Message;
import com.marconi.fusion.X36.X36MessageFactory;
import com.marconi.fusion.X36.X36NeId;
import com.marconi.fusion.X36.X36SetOfNeId;
import com.marconi.fusion.base.asn1.msg.FileMsgBerReader;
import com.marconi.fusion.base.asn1.msg.Message;
import com.marconi.fusion.base.asn1.msg.MessageFactory;
import com.marconi.fusion.base.asn1.msg.io.MessageDecoder;
import com.marconi.fusion.base.logging.DumpInfo;

/**
 * This class is introduced as part of CR 375 implementation. This class is used to get the required information from BER files.
 * 
 * @author tcschpr
 * @version 3.4
 * @since 3.4
 * 
 */
public class BERReader {

	static private Log log = LogFactory.getLog(BERReader.class);

	private final IClassConverter stepByStepConverter;

	public BERReader(final IClassConverter converter) {
		this.stepByStepConverter = converter;

	}

	/**
	 * This method is to get NeIds from the name of BER files
	 * 
	 * @param emId
	 * @param berLoc
	 * @return X36SetOfNeId
	 * @throws Exception
	 */
	public static X36SetOfNeId getNodeList(final String emId, final String berLoc) throws Exception {
		final X36SetOfNeId setOfNeIds = new X36SetOfNeId();
		String neID = null;
		StringTokenizer tokens = null;
		if (berLoc != null) {
			final File ber = new File(berLoc);
			final File[] berFiles = ber.listFiles();
			if (berFiles != null) {
				for (int i = 0; i < berFiles.length; i++) {
					final File berFile = berFiles[i];
					// Should not consider ber.realigned files
					if (berFile.getName().endsWith("ber")) {
						// Removing extension .ber from the file name
						final String berFileWithoutExtn = berFile.getName().substring(0, berFile.getName().lastIndexOf('.'));
						// If ber file is for NE which is in current SO-EM
						if (berFileWithoutExtn.contains(emId.replace(':', '_'))) {
							// Getting NeId from the name of ber file
							tokens = new StringTokenizer(berFileWithoutExtn.split(emId.replace(':', '_'))[1], "_");
							if (tokens.hasMoreTokens()) {
								neID = tokens.nextToken();
								if (!setOfNeIds.contains(new X36NeId(Integer.parseInt(neID)))) {
									setOfNeIds.add(Integer.parseInt(neID));
								}
							}
						}
					}
				}
			} else {
				log.error(new DumpInfo("No ber files present in the location: " + berLoc));
				throw new Exception("No ber files present in the location : " + berLoc);
			}
		}
		log.info(new DumpInfo(setOfNeIds, "Set of NEs to be realigned from BER files"));
		return setOfNeIds;
	}

	/**
	 * This method is to get X36 response messages from the BER file of corresponding NE and converts to latest X36 messages, if
	 * BER files are form older TMF release.
	 * 
	 * @param berLoc
	 * @param msgFactoryClsStr
	 * @param isLatestX36Version
	 * @param x36NeId
	 * @param emId
	 * @return List - list of X36 response messages
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List<X36Message<?>> getMessages(final String berLoc, final String msgFactoryClsStr, final boolean isLatestX36Version, final X36NeId x36NeId,
			final String emId) throws Exception {

		log.info("Ready to read X36Messages from the BER files");

		final List<X36Message<?>> x36MsgList = new ArrayList<X36Message<?>>();
		MessageFactory<Message<?>> msgFactory = null;
		Constructor<?> berFileReaderConstructor = null;
		Object msgFactoryObj = null;
		File ber = null;
		final File berFile = null;
		try {
			if (msgFactoryClsStr != null && !isLatestX36Version) {

				// Load the message factory class
				final Class<?> msgFactoryClass = Class.forName(msgFactoryClsStr);

				// Create an instance of X36MessageFactory
				msgFactoryObj = msgFactoryClass.newInstance();

				// Load the FileMsgBerReader class
				final Class<?> berFileReaderClass = Class.forName("com.marconi.fusion.base.asn1.msg.FileMsgBerReader");

				// Get the constructor of FileMsgBerReader
				berFileReaderConstructor = berFileReaderClass.getConstructor(File.class, MessageDecoder.class);

			} else {
				msgFactory = new X36MessageFactory();
			}
			if (berLoc != null) {
				ber = new File(berLoc);
				final File[] berFiles = ber.listFiles();
				if (berFiles != null) {
					processBerFile(berFiles,emId,x36NeId,isLatestX36Version,berFileReaderConstructor,msgFactoryObj,msgFactory,x36MsgList);
					if (x36MsgList.size() == 0) {
						log.error(String
								.format("Unable to realign NE <%s> since BER file is empty or BER file for that NE is not present in the folder",
										x36NeId.toString()));
						throw new Exception(
								String.format("Unable to realign NE <%s> since BER file is empty", x36NeId.toString()));
					} else {
						return x36MsgList;
					}
				} else {
					log.error(new DumpInfo("No ber files present in the location: " + berLoc));
					throw new Exception("No ber files present in the location : " + berLoc);
				}
			} else {
				log.error(new DumpInfo("Invalid BER location: " + berLoc));
				throw new Exception("Invalid BER location : " + berLoc);
			}
		} catch (final ClassNotFoundException e) {
			log.error(new DumpInfo("Unable to locate the class : " + msgFactoryClsStr, e));
			throw e;
		} catch (final InstantiationException e) {
			log.error(new DumpInfo("Unable to instantiate the class : " + msgFactoryClsStr, e));
			throw e;
		} catch (final FileNotFoundException e) {
			log.error(new DumpInfo("Unable to locate the BER file : " + berFile.getName(), e));
			throw e;
		} catch (final Exception e) {
			log.error(new DumpInfo("Unable to read messages from BER file", e));
			throw e;
		}
	}

	/**
	 * Processes BERFile information
	 * @param berFile
	 * @param emId
	 * @param x36NeId
	 * @param isLatestX36Version
	 * @param berFileReaderConstructor
	 * @param msgFactoryObj
	 * @param msgFactory
	 * @param x36MsgList
	 * @throws Exception
	 */
	private void processBerFile(final File[] berFiles, final String emId, final X36NeId x36NeId, final boolean isLatestX36Version,
			final Constructor<?> berFileReaderConstructor, final Object msgFactoryObj, final MessageFactory<Message<?>> msgFactory,
			final List<X36Message<?>> x36MsgList) throws Exception {
		StringTokenizer tokens = null;
		int neID = 0;
		for (int i = 0; i < berFiles.length; i++) {
			//Reinitialization of neId to zero. TR HO49420 & TR HO49407
			neID = 0;
			final File berFile = berFiles[i];
			// Should not consider ber.realigned files
			if (berFile.getName().endsWith("ber")) {
				// Removing extension .ber from the file name
				final String berFileWithoutExtn = berFile.getName().substring(0, berFile.getName().lastIndexOf('.'));
				// If ber file is for NE which is in current SO-EM
				if (berFileWithoutExtn.contains(emId.replace(':', '_'))) {
					tokens = new StringTokenizer(berFileWithoutExtn.split(emId.replace(':', '_'))[1], "_");
					if (tokens.hasMoreTokens()) {
						neID = Integer.parseInt(tokens.nextToken());
					}
				}
				// If it is current realigning NE's ber file
				if (neID == x36NeId.getValue()) {
					createBerForNeId(isLatestX36Version, berFileReaderConstructor, msgFactoryObj, berFile, msgFactory, x36MsgList);
				}
			}
		}
	}
	/**
	 * Creates BER file for the given NeId
	 * @param isLatestX36Version
	 * @param berFileReaderConstructor
	 * @param msgFactoryObj
	 * @param berFile
	 * @param msgFactory
	 * @param x36MsgList
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	private void createBerForNeId(final boolean isLatestX36Version, final Constructor<?> berFileReaderConstructor, final Object msgFactoryObj,
			final File berFile, final MessageFactory<Message<?>> msgFactory, final List<X36Message<?>> x36MsgList) throws Exception {
		FileMsgBerReader<Message<?>> berReader = null;
		Message<?> msg = null;
		if (!isLatestX36Version) {
			// Build the message decoder class string
			final String messageDecoderClassStr = "com.marconi.fusion.base.asn1.msg.io.MessageDecoder";

			// Load the message decoder class
			final Class<?> messageDecoderClass = Class.forName(messageDecoderClassStr);

			// Get the constructor
			final Constructor<?> messageDecoderConstructor = messageDecoderClass.getConstructor(MessageFactory.class);

			final Object messageDecoderObject = messageDecoderConstructor.newInstance(msgFactoryObj);

			// Create instance of FileMsgBerReader
			final Object berFileReaderObject = berFileReaderConstructor.newInstance(berFile, messageDecoderObject);
			berReader = (FileMsgBerReader<Message<?>>) berFileReaderObject;


		} else {
			berReader = new FileMsgBerReader<Message<?>>(berFile, msgFactory);
		}
		// Read X36 messages from the ber file
		while ((msg = berReader.readBER()) != null) {
			// If the version of X36 message present in the ber file is not latest, convert it to latest
			// X36
			if (stepByStepConverter != null && !isLatestX36Version) {
				try {
					log.info(String.format("Converting <%s> which is read from the BER file", msg.getClass().getName()));
					msg = (Message<?>) stepByStepConverter.convert(msg, null);
				} catch (final ClassConvertionException c) {
					log.error(new DumpInfo(
							"Unable to convert the class : " + msg.getClass().getName() + " to the latest version", c));
				}
			}
			final X36Message<?> x36Msg = (X36Message<?>) msg;
			x36MsgList.add(x36Msg);
		}
	}




}
